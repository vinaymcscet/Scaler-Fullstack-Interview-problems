Ques-1 -> (LLD-React_Use_Memo)

   Problem Statement
    
    In a React application, a developer has created a component that calculates the sum of an array and displays it alongside other data. The component is re-rendering frequently due to state updates unrelated to the array, causing the sum calculation to be unnecessarily repeated. This leads to performance degradation, especially as the size of the array grows.

# Solution - 

    App.js - 
    import "./App.css";
    import ExpensiveComponent from "./ExpensiveComponent";

    function App() {
    return (
        <div className="App">
        <ExpensiveComponent />
        </div>
    );
    }

    export default App;
    ==============================================

    ExpensiveComponent - 
    import React, { useMemo, useState } from "react";

    function ExpensiveComponent() {
    const [count, setCount] = useState(0);
    const [numbers, setNumbers] = useState([1, 2, 3, 4, 5]);

    // Expensive calculation
    const calculateSum = (numbers) => {
        console.log("Calculating sum...");
        return numbers.reduce((acc, curr) => acc + curr, 0);
    };

    const sum = useMemo(() => calculateSum(numbers), [numbers]);

    return (
        <div>
        <h1>Sum: {sum}</h1>
        <button onClick={() => setCount(count + 1)}>Increment Count</button>
        <h2>Count: {count}</h2>
        </div>
    );
    }

    export default ExpensiveComponent;


Ques-2 -> (LLD-React_Use_Memo_List_Item)

    Problem Statement - 
    In a React application, there is a ListItem component that renders individual items in a list. This component receives properties from its parent but often re-renders unnecessarily because its parent componentâ€™s state changes frequently. Although the properties of the ListItem component (like the item text) do not change often, the component still re-renders every time the parent updates, leading to suboptimal performance.

# Solution - 
    
    App.js - 
    import "./App.css";
    import List from "./List";

    function App() {
    return (
        <div className="App">
        <List />
        </div>
    );
    }

    export default App;
    =======================================
    List.js -
    import React, { useState } from "react";

    function List() {
    const [items, setItems] = useState(["Apple", "Banana", "Cherry"]);
    const [counter, setCounter] = useState(0);

    return (
        <div>
        {items.map((item, index) => (
            <ListItem key={index} text={item} />
        ))}
        <button onClick={() => setCounter(counter + 1)}>Increment Counter</button>
        <p>Counter: {counter}</p>
        </div>
    );
    }

    const ListItem = React.memo(({ text }) => {
    console.log("Rendering", text);
    return <div>{text}</div>;
    })

    export default List;
 
Ques-3 -> (LLD-React_Optimize_Character_Count)

    Problem Statement -
    In a React application, you are tasked with building a component where a user can type comments into a textarea and submit them. The component should also display a count of the characters left, which is dynamically updated as the user types. However, the current implementation results in the entire component re-rendering whenever the user types a character, leading to performance issues, especially as the component complexity grows.

# Solution - 
    App.js - 
    import "./App.css";
    import CommentBox from "./CommentBox";

    function App() {
    return (
        <div className="App">
        <CommentBox />
        </div>
    );
    }

    export default App;
    ====================================
    import React, { useState } from "react";

    function CommentBox() {
    const [comment, setComment] = useState("");
    const maxLength = 200;

    const handleChange = (event) => {
        setComment(event.target.value);
    };

    return (
        <div>
        <textarea value={comment} onChange={(e) => handleChange(e)} maxLength={maxLength} />
        <CharacterCount count={maxLength - comment.length} />
        </div>
    );
    }

    const CharacterCount = React.memo(({ count }) => {
    console.log("Rendering character count");
    return <p>{count} characters left</p>;
    });

    export default CommentBox;