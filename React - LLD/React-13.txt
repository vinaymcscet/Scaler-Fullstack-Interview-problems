Ques-1 -> (React_lecture13_counter)

   Problem Statement
    
    You are tasked with creating a simple counter component using React. The counter should be implemented as a class-based component and should have the following functionalities:

    Display an initial count of 0.
    Render two buttons: one for incrementing the count and one for decrementing the count.
    Update the count accordingly when the buttons are clicked.
    You are provided with a basic structure for the Counter component. Your task is to complete the component so that it functions as described above.

# Solution - 

    App.js - 
    import './App.css';
    import Counter from './Counter';

    function App() {
    return (
        <div className="App">
        <Counter></Counter>
        </div>
    );
    }

    export default App;
    ==============================================

    Counter Component - 
    import React, { Component } from "react";

    class Counter extends Component {
    constructor(props) {
        super(props);
        // Initialize state here
        this.state = {
        count: 0
        }
    }

    incrementCount = () => {
        this.setState((prev) => ({
        count: prev.count + 1
        }));
    };

    decrementCount = () => {
        this.setState((prev) => ({
        count: prev.count - 1
        }));
    };

    render() {
        return (
        <div>
            <h2>Counter</h2>
            <div>Count: {this.state.count}</div>
            <button onClick={this.incrementCount}>Increment</button>
            <button onClick={this.decrementCount}>Decrement</button>
        </div>
        );
    }
    }

    export default Counter;


Ques-2 -> (LLD-React_Product_Filter)

    Problem Statement:
    ### Problem Name: Dynamic Product Filter in React **Problem Statement** Build a dynamic product filter application using React. This application will allow users to filter a list of products by category without any server or API calls, demonstrating handling of state and rendering based on user input. **Requirements:** 1. Display a list of products. Each product has a name, price, and category. 2. Provide a set of checkboxes that allow users to select which categories to view. 3. The product list should update in real-time as users check/uncheck categories. 4. No use of external APIs; all data should be handled within the app's state.

# Solution - 
    
    App.js - 
    import "./App.css";
    import ProductFilterApp from "./ProductFilter";

    function App() {
    return (
        <div className="App">
        <ProductFilterApp />
        </div>
    );
    }

    export default App;


    =======================================
    ProductFilterApp.js -
    import React, { useState } from "react";

    const ProductFilterApp = () => {
    const [selectedCategories, setSelectedCategories] = useState([]);

    // Example product data
    const products = [
        { id: 1, name: "Apple", category: "Fruits", price: "$1" },
        { id: 2, name: "Carrot", category: "Vegetables", price: "$0.50" },
        { id: 3, name: "Chicken", category: "Meat", price: "$5" },
        { id: 4, name: "Fish", category: "Meat", price: "$3" },
        { id: 5, name: "Banana", category: "Fruits", price: "$2" },
    ];

    const categories = ["Fruits", "Vegetables", "Meat"];

    const handleCategoryChange = (category) => {
        // Implement category selection logic
        setSelectedCategories((prevCategories) =>
        prevCategories.includes(category)
            ? prevCategories.filter((cat) => cat !== category)
            : [...prevCategories, category]
        );
    };

    const filterProducts = () => {
        // Implement product filtering logic
        return selectedCategories.length === 0
        ? []
        : products.filter((product) =>
            selectedCategories.includes(product.category)
            );
    };

    return (
        <div>
        <h1>Product Filter</h1>
        {/* Category checkboxes */}
        <div>
            {categories.map((category) => (
            <div key={category}>
                <input
                type="checkbox"
                value={category}
                data-testid={`checkbox-${category}`}
                onChange={() => handleCategoryChange(category)}
                />
                {category}
            </div>
            ))}
        </div>
        {/* Product list */}
        <ul data-testid="product-list">
            {filterProducts().map((product) => (
            <li key={product.id} data-testid={`product-${product.id}`}>
                {product.name} - {product.price}
            </li>
            ))}
        </ul>
        </div>
    );
    };

    export default ProductFilterApp;

Ques-3 -> (LLD-React_PureComponent_Counter)

    Problem Statement:
    You are tasked with creating a pure component in React that displays a simple counter. The component should increment the counter value by 1 every time the user clicks on a button. However, there's a catch: the component must be pure, meaning it should not mutate its state directly but instead return a new state object whenever a change occurs.

# Solution - 

    App.jsx - 
    import "./App.css";
    import PureCounter from "./PureCounter";

    function App() {
    return (
        <div className="App">
        <PureCounter />
        </div>
    );
    }

    export default App;
    ===================
    PureCounter.jsx - 
    import React, { PureComponent } from "react";

    class PureCounter extends PureComponent {
    constructor(props) {
        super(props);
        // Initialize state here
        this.state = {
        counter: 0,
        };
    }

    // Implement the handleClick method to handle button clicks
    handleClick = () => {
        // Update the counter state by 1 without mutating the state directly
        // Hint: Use this.setState method to update the state immutably
        // Your code here
        // this.setState((prev) => ({
        //   counter: prev.counter + 1
        // }))
        this.setState({ counter: this.state.counter + 1 })
    };

    render() {
        return (
        <div>
            <h2>Pure Counter</h2>
            <p>Count: {this.state.counter}</p>
            {/* Implement the button component to trigger the handleClick method */}
            {/* Your code here */}
            <button onClick={() => this.handleClick()}>Increment</button>
        </div>
        );
    }
    }

    export default PureCounter;

