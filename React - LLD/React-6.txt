Ques-1 -> (LLD-React_Local Storage I)

    Problem Statement
    In this task, you are required to modify a simple React App component that currently returns an input field of type text. The goal is to allow users to type any string into this input field and store this string in the local storage of the browser.
    The key feature to implement is that every time the page is reloaded, the input field should be pre-filled with the latest value that was entered by the user. This value should be retrieved from the local storage.

    Demo

# Solution - 
    import React from "react";
    import { useEffect, useState } from "react";

    const App = () => {
    // Edit this component
    /***
    * * Do not edit the data-testid attributes.
    * Use key inputValue to store the data in local storage.
    * */
    const [inputValue, setInputValue] = useState('');
        const handleInput = (e) => {
        const value = e.target.value;
        localStorage.setItem('inputValue', value)
        }
        useEffect(() => {
        const storageValue = localStorage.getItem('inputValue');
        setInputValue(storageValue);
        }, [])
    return (
        <div>
        <input 
            data-testid="input-id" 
            type="text" 
            value={inputValue}
            onChange={handleInput}  
        />
        </div>
    );
    };
    export default App;

Ques-2 -> (LLD-React_Local Storage II - hook)

    Problem Statement
    You need to create a custom hook called useLocalStorage(key, initialValue) in the App.jsx file itself or a separate file, it will be used to store and retrieve data from local storage. You should use the key prop as the key for the data in local storage and initialValue as the initial value.

    The hook should return an object with two properties:

    the current value of the data, which should be initialized to the value stored in local storage (if it exists), or the initialValue argument (if it doesn't)
    a function that can be used to update the value of the data in local storage
    Every time the value of the data is updated, the hook should update the corresponding value in local storage.

# Solution - 
    import React, { useState } from 'react';
    export const useLocalStorage = (key, initialValue) => {
    // Write the body of the hook here
    let storageItem = localStorage.getItem(key);
    const [storedValue, setStoredValue] = useState(
        storageItem ? JSON.parse(storageItem) : initialValue
    )
    const setValue = (value) => {
        const valueToStore = value instanceof Function ? value(storedValue) : value;
        setStoredValue(valueToStore);
        localStorage.setItem(key, JSON.stringify(valueToStore));
    };
        
        return {
        value: storedValue,
        setValue,
        };
    };

    const App = () => {
    const { value, setValue } = useLocalStorage("inputValue", "");

    const handleChange = (e) => {
        setValue(e.target.value);
    };

    return (
        <div>
        <input type="text" value={value} onChange={handleChange} />
        </div>
    );
    };

    export default App;


Ques-3 -> (LLD-React_Label group by dashboard)

    Problem statement
    The task is to finish implementing the component LabelFilter; an interactive dashboard with filters displaying different types of animals.
    Luckily all of the designs have already been nearly implemented, all you have to do is to finish building out the filtering logic.

    Changes needed:

    When a label is selected it should have the following styles applied to it: color of #fff and background color of #333.
    When a class label is selected only the animal belonging to the selected class should be displayed. So when the user clicks on birds, only the birds tiles should be visible.
    When more than one label are selected then animals belonging to both of those classes should be displayed. So when the user clicks on birds and mammals, both the birds and the mammal tiles should be visible.

# Solution - 
    import { useState } from "react";
    import styled from "styled-components";

    const animalData = [
        { name: "Eagle", class: "Birds" },
        { name: "Penguin", class: "Birds" },
        { name: "Parrot", class: "Birds" },
        { name: "Lion", class: "Mammals" },
        { name: "Tiger", class: "Mammals" },
        { name: "Elephant", class: "Mammals" },
        { name: "Cobra", class: "Reptiles" },
        { name: "Lizard", class: "Reptiles" },
        { name: "Tortoise", class: "Reptiles" },
        { name: "Salmon", class: "Fish" },
        { name: "Shark", class: "Fish" },
        { name: "Trout", class: "Fish" },
    ];

    const LabelFilter = () => {
        /***
        *
        * You donât need to worry about styling your application as we have already done it for you. But if you wish to update the styles, you can use styled-components, inline style or tailwindcss.
        * Check out the demo gif to make sure that you understand what youâre meant to build.
        * Do not edit the data-testid attributes.
        * Do not edit the animalData object.
        *
        * */

        const [classes, setClasses] = useState([])

        const animalClasses = Array.from(
            new Set(animalData.map((animal) => animal.class))
        );

        const isLabelSelected = (animalClass) => classes.includes(animalClass);

        const selectClass = (animalClass) => {
            if (classes.includes(animalClass))
                setClasses(classes.filter((c) => c !== animalClass))
            else
                setClasses([...classes, animalClass])
        }

        const filteredAnimals = classes.length > 0 ? animalData.filter((data) => {
            return classes.includes(data.class);
        }) : animalData;

        return (
        <Wrapper>
        <div data-testid="labels-wrapper-id" className="label-container">
            {animalClasses.map((animalClass) => (
            <div data-testid="label-id" 
            className={`label ${isLabelSelected(animalClass) ? 'selected' : ''}`} 
            key={animalClass} 
            onClick={()=>selectClass(animalClass)}>
                {animalClass}
            </div>
            ))}
        </div>
        <div data-testid="tile-container-id" className="tile-container">
            {filteredAnimals.map((animal) => (
            <div data-testid="animal-tile-id" className="tile" key={animal.name}>
                {animal.name}
            </div>
            ))}
        </div>
        </Wrapper >
    );
    };

    export default LabelFilter;

    const Wrapper = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
    font-family: sans-serif;
    margin: 24px;
    gap: 24px;

    .label-container {
        display: flex;
        flex-direction: row;
        gap: 12px;

        .label {
        background-color: #fff;
        color: #333;
        border: 1px solid #333;
        border-radius: 4px;
        margin-bottom: 8px;
        padding: 6px 12px;
        cursor: pointer;
        transition: 0.1s ease-in-out;

        &:hover {
            opacity: 0.8;
        }

        &.selected {
            background-color: #333;
            color: #fff;
        }
        }
    }

    .tile-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        grid-template-columns: repeat(3, 1fr);
        gap: 12px;

        .tile {
        background-color: #333;
        color: #fff;
        padding: 12px;
        border-radius: 4px;
        text-align: center;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 60px;
        min-width: 120px;
        }
    }
    `;



