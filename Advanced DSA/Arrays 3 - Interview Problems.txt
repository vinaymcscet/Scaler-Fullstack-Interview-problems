Ques-1 --> (Merge Intervals)

# Problem Description -
    You have a set of non-overlapping intervals. You are given a new interval [start, end], insert this new interval into the set of intervals (merge if necessary).
    You may assume that the intervals were initially sorted according to their start times.

# Problem Constraints - 
    0 <= |intervals| <= 105

# Solution -
    module.exports = {
    /**
     * Interval: [start, end]
     * 
     * param A: intervals, a list of Intervals
     * return :a list of Intervals
     */
    solve: function (intervals, new_interval) {
       
        let current_start = new_interval[0];
        let current_end = new_interval[1];
        let N = intervals.length;
        let ans = [];

        if(N==0) return [new_interval];

        for(let i=0;i<N;i++) {
            if(intervals[i][1] < current_start) {
                ans.push([intervals[i][0], intervals[i][1]]);
            } else if(current_end < intervals[i][0]) {
                ans.push([current_start, current_end]);
                while(i<N) {
                    ans.push([intervals[i][0], intervals[i][1]]);
                    i++;
                }
                return ans;
            } else {
                current_start = Math.min(current_start, intervals[i][0]);
                current_end = Math.max(current_end, intervals[i][1]);
            }
        }
        let temp = [current_start, current_end];
        ans.push(temp);
        return ans;
    },
};

Ques-2 --> (Merge Overlapping Intervals)

# Problem Description -
    Given a collection of intervals, merge all overlapping intervals.

# Problem Constraints -
    1 <= Total number of intervals <= 100000.

# Solution -
    module.exports = { 
    /**
     * Interval: [start, end]
     * 
     * param A: intervals, a list of Intervals
     * return :a list of Intervals
     */
	merge : function(A){
        
        A.sort((a, b) => a[0] - b[0]);

        let current_index = A[0];
        let current_start = current_index[0];
        let current_end = current_index[1];
        let N = A.length;
        let ans = [];

        for(let i=1;i<N;i++) {
            if(A[i][0] <= current_end) {
                current_end = Math.max(current_end, A[i][1]);
                // current_end = A[i][1];
            }  else {
                let temp = [current_start, current_end];
                ans.push(temp);
                current_start = A[i][0];
                current_end = A[i][1];
            }
        }
       let temp = [current_start, current_end];
        ans.push(temp);
        return ans; 
	}
};

Ques-3 --> (First Missing Integer)

# Problem Description -
    Given an unsorted integer array, A of size N. Find the first missing positive integer.
    Note: Your algorithm should run in O(n) time and use constant space.

# Problem Constraints -
    1 <= N <= 1000000
    -109 <= A[i] <= 109

# Solution -
    module.exports = { 
    //param A : array of integers
    //return an integer
        firstMissingPositive : function(A){
            function swap_res(a, b) {
                // let temp = A[a];
                // A[a] = A[b];
                // A[b] = temp;
                A[a] = A[a] + A[b];
                A[b] = A[a] - A[b];
                A[a] = A[a] - A[b];
                return [a, b];
            }

            let N = A.length;
            for(let i=0;i<N;i++) {
                while(A[i]>0 && A[i] < N && A[i] != i+1) {
                    let value = A[i];
                    if(A[i] == A[value-1]) break;
                    swap_res(i, value-1);
                }
            }
            for(let j=0;j<N;j++) {
                if(A[j] != j+1) return j+1;
            }
            return N+1;
        }
    };

Ques-4 --> (Next Permutation)

# Problem Description - 
    Implement the next permutation, which rearranges numbers into the numerically next greater permutation of numbers for a given array A of size N.
    If such arrangement is not possible, it must be rearranged as the lowest possible order, i.e., sorted in ascending order.
    NOTE:
        The replacement must be in-place, do not allocate extra memory.
        DO NOT USE LIBRARY FUNCTION FOR NEXT PERMUTATION. Use of Library functions will disqualify your submission retroactively and will give you penalty points.

# Problem Constraints -
    1 <= N <= 5 * 105
    1 <= A[i] <= 109

# Solution -
    module.exports = { 
    //param A : array of integers
    //return a array of integers
        nextPermutation : function(A){
            let N = A.length;
            let ans = [];

            if(N==0) return [];
            if(N==1) return [A[0]];

            function swap(a, b) {
                a = a+b;
                b = a-b;
                a = a-b;
                return [a, b];
            }

            let i=0;
            function helper(A, i) {
                if(i == N) {
                    ans.push(A);
                }
            }
            
            for(let i=0;i<N;i++) {
                for(let j=i;j<N;j++) {
                    swap(A[i], A[j]);
                    helper(A, i+1);
                    swap(A[i], A[j]);
                }
            }
            return ans;
            
            let N = A.length;
            let i = N-2, j = N-1;

            if(N==0) return [];
            if(N==1) return A;

            while(A[i]>A[i+1]) i--;
            
            while(j>i) {
                if(A[j] > A[i]) {
                    let temp = A[i]
                    A[i] = A[j];
                    A[j] = temp
                    break;
                }
                j--;
            }

            let m = i+1;
            let n = N-1;

            while(m<n) {
                let temp1 = A[m]
                    A[m] = A[n];
                    A[n] = temp1;
                m++;
                n--;
            }
            
            return A;
        }
    };


Ques-5 --> (Number of Digit One)

# Problem Description -
    Given an integer A, find and return the total number of digit 1 appearing in all non-negative integers less than or equal to A.

# Problem Constraints -
    0 <= A <= 109

# Solution -
    module.exports = { 
    //param A : integer
    //return an integer
        solve : function(A){
            // Approach - 1
            let ans = 0;

            for(let j=1;j<=A;j*=10) {
                let i = j*10;
                ans += (A/i) * j + Math.min(Math.max(A%i - (j-1), 0), j);
            }
            return ans;

            // Approach - 2
            let count = 0;
            for(let i=1;i<=A;i*=10) {
                let num = i*10;
                let data = Math.floor(A/num);
                let remDigit = A % num;
                count += i * data;
                let onesInrem = Math.min(Math.max(remDigit - i+1, 0), i);
                count += onesInrem;
            }
            return count;
        }
    };

