Ques-1 -> (Morris Inorder Traversal)

# Problem Description -
    Given a binary tree, return the inorder traversal of its nodes' values.
    NOTE: Using recursion and stack are not allowed.

# Problem Constraints -
    1 <= number of nodes <= 105

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //return a array of integers
        solve : function(A){
            let current = A;
            let result = [];
            if(current == null) return;
            while(current != null) {
                if(current.left == null) {
                    result.push(current.data);
                    current = current.right;
                } else {
                    let temp = current.left;
                    while(temp.right != null && temp.right != current) {
                        temp = temp.right;
                    }
                    if(temp.right == null) {
                        temp.right = current;
                        current = current.left;
                    }
                    else if(temp.right == current) {
                        temp.right = null;
                        result.push(current.data);
                        current = current.right;
                    }
                }
            }
            return result;
        }
    };

Ques-2 -> (Kth Smallest Element In BST)

# Problem Description -
    Given a binary search tree represented by root A, write a function to find the Bth smallest element in the tree.

# Problem Constraints -
    1 <= Number of nodes in binary tree <= 100000
    0 <= node values <= 10^9

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //param B : integer
    //return an integer
        kthsmallest : function(A, B){
            // First way - get inorder traversal of tree and return B-1 element from array
            let result = [];
            const inOrderTraversal = (node) => {
                if(node == null) return;
                inOrderTraversal(node.left, B);
                result.push(node.data);
                inOrderTraversal(node.right, B);
            }
            inOrderTraversal(A);
            return result[B-1];

            // second way - iterate through recursion approach and increase count 
            //   and whenever the count is same for the target(kth) element, return the kth node data element.
            
            let count = 0;
            let ans = 0;

            const inOrderTraversal = (node, B) => {
                if(node == null) return;
                inOrderTraversal(node.left, B);
                count++;
                if(count == B) ans = node.data;
                inOrderTraversal(node.right, B);
                return ans;
            }
            return inOrderTraversal(A, B);

            // third way - using morris inOrder Traversal
            let current = A;
            let result = [];
            if(current == null) return;
            while(current != null) {
                if(current.left == null) {
                    result.push(current.data);
                    current = current.right;
                }
                else {
                    let temp = current.left;
                    while(temp.right != null && temp.right != current) {
                        temp = temp.right;
                    }
                    if(temp.right == null) {
                        temp.right = current;
                        current = current.left;
                    }
                    else if(temp.right == current) {
                        temp.right = null;
                        result.push(current.data);
                        current = current.right;
                    }
                }
            }
            return result[B-1];
        }
    };

Ques-3 -> (Recover Binary Search Tree)

# Problem Description -
    Two elements of a Binary Search Tree (BST), represented by root A are swapped by mistake. Tell us the 2 values, when swapped, will restore the Binary Search Tree (BST).
    A solution using O(n) space is pretty straightforward. Could you devise a constant space solution?
    Note: The 2 values must be returned in ascending order

# Problem Constraints -
    1 <= size of tree <= 100000

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //return a array of integers
        recoverTree : function(A){
            // First way
            let first = second = previous = null;
            const inOrder = (node) => {
                if(node == null) return;
                inOrder(node.left);
                if(previous != null && node.data < previous.data) {
                    if(first == null) {
                        first = previous.data;
                        second = node.data;
                    } 
                    else second = node.data;
                }
                previous = node;
                inOrder(node.right);
                return [second, first];
            }
            return inOrder(A);

            // second way - using morris inorder traversal
            let first = second = previous = null;
            const morrisInorderTraversal = (node) => {
                if(node == null) return;
                while(node != null) {
                    if(node.left == null) {
                        if(previous != null && node.data < previous.data) {
                            if(first == null) {
                                first = previous;
                                second = node;
                            } 
                            else second = node;
                        }
                        previous = node;
                        node = node.right;
                    }
                    else {
                        let temp = node.left;
                        while(temp.right != null && temp.right != node) {
                            temp = temp.right;
                        }
                        if(temp.right == null) {
                            temp.right = node;
                            node = node.left;
                        }
                        else if(temp.right == node) {
                            temp.right = null;
                            if(previous != null && node.data < previous.data) {
                                if(first == null) {
                                    first = previous;
                                    second = node;
                                } 
                                else second = node;
                            }
                            previous = node;
                            node = node.right;
                        }
                    }
                }
                return [second.data, first.data];   
            }
            return morrisInorderTraversal(A);
        }
    };

Ques-4 -> (Common Nodes in Two BST)

# Problem Description -
    Given two BST's A and B, return the (sum of all common nodes in both A and B) % (109 +7) .
    In case there is no common node, return 0.
    NOTE:
    Try to do it one pass through the trees.

# Problem Constraints -
    1 <= Number of nodes in the tree A and B <= 105
    1 <= Node values <= 106

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //param B : root node of tree
    //return an integer
        solve : function(A, B){
            let currentOfA = A;
            let currentOfB = B;
            let resultOfA;
            let resultOfB;

            resultOfA = morrisInOrderTraversal(currentOfA);
            resultOfB = morrisInOrderTraversal(currentOfB);

            function morrisInOrderTraversal(current) {
                let result = [];
                if(current == null) return;
                while(current != null) {
                    if(current.left == null) {
                        result.push(current.data);
                        current = current.right;
                    } else {
                        let temp = current.left;
                        while(temp.right != null && temp.right != current) {
                            temp = temp.right;
                        }
                        if(temp.right == null) {
                            temp.right = current;
                            current = current.left;
                        }
                        else if(temp.right == current) {
                            temp.right = null;
                            result.push(current.data);
                            current = current.right;
                        }
                    }
                }
                return result;
            }

            let sumOfCommonValues = findCommonValues(resultOfA, resultOfB);

            function findCommonValues(a1, a2) {
                const setA  = new Set(a1);
                let commonValues = a2.filter(element => setA.has(element));
                return commonValues;
            }

            return sumOfCommonValues.reduce((acc, values) => acc + values, 0) % (10**9+7);
        }
    };

Ques-5 -> (Distance between Nodes of BST)

# Problem Description -
    Given a binary search tree.
    Return the distance between two nodes with given two keys B and C. It may be assumed that both keys exist in BST.
    NOTE: Distance between two nodes is number of edges between them.

# Problem Constraints -
    1 <= Number of nodes in binary tree <= 1000000
    0 <= node values <= 109

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //param B : integer
    //param C : integer
    //return an integer
        solve : function(A, B, C){
            if(A == null) return;
            if(A.data > B && A.data > C) return this.solve(A.left ,B,C);
            if(A.data < B && A.data < C) return this.solve(A.right ,B,C);
            const x = getPath(A, B);
            const y = getPath(A, C);
            return x + y;

            function getPath(a1, a2) {
                let count = 0;
                while(a1 != null && a1.data != a2) {
                    a1 = a2 < a1.data ? a1.left : a1.right;
                    count++;
                }
                return a1 && a1.data == a2 ? count : 0;
            }
        }
    };
