Ques-1 -> (Passing game)

# Problem Description -
    There is a football event going on in your city. In this event, you are given A passes and players having ids between 1 and 106.
    Initially, some player with a given id had the ball in his possession. You have to make a program to display the id of the player who possessed the ball after exactly A passes.
    There are two kinds of passes:
    1) ID
    2) 0
    For the first kind of pass, the player in possession of the ball passes the ball "forward" to the player with id = ID.
    For the second kind of pass, the player in possession of the ball passes the ball back to the player who had forwarded the ball to him.
    In the second kind of pass "0" just means Back Pass.
    Return the ID of the player who currently possesses the ball.

# Problem Constraints -
    1 <= A <= 100000
    1 <= B <= 100000
    |C| = A

# Solution -
    class Stack {
        constructor() {
            this.items = [];
        }
        push(element) {
            this.items.push(element);
        }
        pop() {
            if (this.items.length === 0) return 'underflow';
            return this.items.pop();
        }
        peek() {
            return this.items[this.items.length - 1];
        }
        isEmpty() {
            return this.items.length === 0;
        }
        printStack() {
            let str = '';
            let i = 0;
            while (i < this.items.length) {
                str += this.items[i] + ' ';
                i++;
            }
            return str;
        }
    }

    module.exports = {
        solve: function (A, B, C) {
            const st = new Stack();
            st.push(B);
            for (let item of C) {
                if(item == 0) {
                    st.pop();
                } else {
                    st.push(item);
                }
            }
            return st.peek();
        },
    };

Ques-2 -> (Balanced Paranthesis)

# Problem Description -
    Given an expression string A, examine whether the pairs and the orders of “{“,”}”, ”(“,”)”, ”[“,”]” are correct in A.
    Refer to the examples for more clarity.

# Problem Constraints -
    1 <= |A| <= 100

# Solution -
    class Stack {
        constructor() {
            this.items = [];
        }
        push(element) {
            this.items.push(element);
        }
        pop() {
            if (this.items.length === 0) return 'underflow';
            return this.items.pop();
        }
        peek() {
            return this.items[this.items.length - 1];
        }
        isEmpty() {
            return this.items.length === 0;
        }
        printStack() {
            let str = '';
            let i = 0;
            while (i < this.items.length) {
                str += this.items[i] + ' ';
                i++;
            }
            return str;
        }
    }
    function isOpening(char) {
        return char == "[" || 
            char == "{" || 
            char == "(";
    }
    function isMatching(a, b) {
        return (a == '(' && b == ')')||
            (a == '[' && b == ']')||
            (a == '{' && b == '}')
    }
    module.exports = { 
    //param A : string
    //return an integer
        solve : function(A){
            const st = new Stack();
            
            // Approach - 1 
            for(let i=0;i<A.length;i++) {
                if(A[i] == '{') st.push('{');
                else if(A[i] == '(') st.push('(');
                else if(A[i] == '[') st.push('[');

                if(A[i] == '}') {
                    if(st.isEmpty()) {
                        return 0;
                    } else if(st.peek() == '{') {
                        st.pop();
                    }
                }
                if(A[i] == ')') {
                    if(st.isEmpty()) {
                        return 0;
                    } else if(st.peek() == '(') {
                        st.pop();
                    }
                }
                if(A[i] == ']') {
                    if(st.isEmpty()) {
                        return 0;
                    } else if(st.peek() == '[') {
                        st.pop();
                    }
                }
            }
            if(st.isEmpty()) return 1;
            else return 0;
            // Approach - 2
            for(let i=0;i<A.length;i++) {
                if(isOpening(A[i])) st.push(A[i]);
                else {
                    if(st.isEmpty()) return 0;
                    else if(!isMatching(st.peek(), A[i])) return 0;
                    else st.pop();
                }
            }
            return st.isEmpty() == true ? 1 : 0;
        }
    };

Ques-3 -> ( Double Character Trouble)

# Problem Description -
    You have a string, denoted as A.
    To transform the string, you should perform the following operation repeatedly:
    Identify the first occurrence of consecutive identical pairs of characters within the string.
    Remove this pair of identical characters from the string.
    Repeat steps 1 and 2 until there are no more consecutive identical pairs of characters.
    The final result will be the transformed string.

# Problem Constraints -
    1 <= |A| <= 100000

# Solution -
    class Stack {
        constructor() {
            this.items = [];
        }
        push(element) {
            this.items.push(element);
        }
        pop() {
            if (this.items.length === 0) return 'underflow';
            return this.items.pop();
        }
        peek() {
            return this.items[this.items.length - 1];
        }
        isEmpty() {
            return this.items.length === 0;
        }
        printStack() {
            let str = '';
            let i = 0;
            while (i < this.items.length) {
                str += this.items[i] + '';
                i++;
            }
            return str;
        }
    }
    module.exports = { 
    //param A : string
    //return a strings
        solve : function(A){
            const st = new Stack();
            let i=0, N = A.length;
            while(i<N) {
                if(st.isEmpty()) {
                    st.push(A[i]);
                } else {
                    if(st.peek() == A[i]) st.pop();
                    else st.push(A[i]);
                }
                i++;
            }
            return st.printStack();
        }
    };

Ques-4 -> (Evaluate Expression)

# Problem Description -
    An arithmetic expression is given by a string array A of size N. Evaluate the value of an arithmetic expression in Reverse Polish Notation.
    Valid operators are +, -, *, /. Each string may be an integer or an operator.
    Note: Reverse Polish Notation is equivalent to Postfix Expression, where operators are written after their operands.

# Problem Constraints -
    1 <= N <= 105

# Solution -
    class Stack {
        constructor() {
            this.items = [];
        }
        push(element) {
            this.items.push(element);
        }
        pop() {
            if (this.items.length === 0) return 'underflow';
            return this.items.pop();
        }
        peek() {
            return this.items[this.items.length - 1];
        }
        isEmpty() {
            return this.items.length === 0;
        }
        printStack() {
            let str = '';
            let i = 0;
            while (i < this.items.length) {
                str += this.items[i] + '';
                i++;
            }
            return str;
        }
    }
    module.exports = { 
    //param A : array of strings
    //return an integer
        evalRPN : function(A){
            const st = new Stack();
            let i=0, N = A.length;
            while(i<N) {
                if(A[i] != '+' && A[i] != '-' && A[i] != '/' && A[i] != '*') {
                    st.push(parseInt(A[i]));
                } else {
                    let x = st.pop();
                    let y = st.pop();

                    if(A[i] == '+'){
                        st.push(y + x);
                    }
                    if(A[i] == '-'){
                        st.push(y - x);
                    }
                    if(A[i] == '/'){
                        st.push(Math.floor(y / x));
                    }
                    if(A[i] == '*'){
                        st.push(y * x);
                    }
                }
                i++;
            }
            return st.peek();
        }
    };
    
Ques-5 -> (Min Stack)

# Problem Description -
    Design a stack that supports push, pop, top, and retrieve the minimum element in constant time.
    push(x) -- Push element x onto stack.
    pop() -- Removes the element on top of the stack.
    top() -- Get the top element.
    getMin() -- Retrieve the minimum element in the stack.
    NOTE:
    All the operations have to be constant time operations.
    getMin() should return -1 if the stack is empty.
    pop() should return nothing if the stack is empty.
    top() should return -1 if the stack is empty.

# Problem Constraints -
    1 <= Number of Function calls <= 107

# Solution -
    function solve() {
        // Initalize your variables here
        this.items = [];
        this.minStack = [];
    };
    solve.prototype.push = function (e) {
        this.items.push(e);
        if(this.minStack.length == 0 || e <= this.minStack[this.minStack.length-1]) this.minStack.push(e);
    };
    solve.prototype.pop = function () {
        if(this.items.length == 0) return;
        const poppedItem = this.items.pop();
        if(poppedItem == this.minStack[this.minStack.length-1]) this.minStack.pop();
    };
    solve.prototype.top = function () {
        // return top
        if(this.items.length == 0) return -1;
        else return this.items[this.items.length-1];
    };
    solve.prototype.getMin = function () {
        // return minimum
        if(this.minStack.length == 0) return -1;
        else return this.minStack[this.minStack.length-1];
    };
    module.exports = {
        solve: solve
    };

Ques-6 -> (Infix to Postfix) 

# Problem Description -
    Given string A denoting an infix expression. Convert the infix expression into a postfix expression.
    String A consists of ^, /, *, +, -, (, ) and lowercase English alphabets where lowercase English alphabets are operands and ^, /, *, +, - are operators.
    Find and return the postfix expression of A.
    NOTE:
    ^ has the highest precedence.
    / and * have equal precedence but greater than + and -.
    + and - have equal precedence and lowest precedence among given operators.

# Problem Constraints -
    1 <= length of the string <= 500000

# Solution -
    class Stack {
        constructor() {
            this.items = [];
        }
        push(element) {
            this.items.push(element);
        }
        pop() {
            if (this.items.length === 0) return 'underflow';
            return this.items.pop();
        }
        peek() {
            return this.items[this.items.length - 1];
        }
        isEmpty() {
            return this.items.length === 0;
        }
        printStack() {
            let str = '';
            let i = 0;
            while (i < this.items.length) {
                str += this.items[i] + '';
                i++;
            }
            return str;
        }
    }
    module.exports = { 
    //param A : string
    //return a strings
        solve : function(A){
            function getPriority(e) {
                if(e == '+' || e == '-') return 1;
                if(e == '*' || e == '/') return 2;
                if(e == '^') return 3;
                else return 0;
            }

            const st = new Stack();
            let N = A.length;
            let outputStack = [];

            for(let i=0;i<N;i++) {
                if (A[i] !== '^' && A[i] !== '/' && A[i] !== '*' && A[i] !== '+' && A[i] !== '-' && A[i] !== '(' && A[i] !== ')') {
                    outputStack.push(A[i]);
                } else if(A[i] == '('){
                    st.push(A[i]);
                } else if(A[i] == ')'){
                    while(st.peek() != '(') {
                        let operator = st.pop();
                        outputStack.push(operator);
                    }
                    st.pop();
                } else {
                    while(!(st.isEmpty()) && getPriority(A[i]) <= getPriority(st.peek())) {
                        let operator = st.pop();
                        outputStack.push(operator);
                    }
                    if(st.isEmpty()) st.push(A[i]);
                    else if(getPriority(A[i]) > getPriority(st.peek())) st.push(A[i]);
                }
            }
            while(!st.isEmpty()) {
                let operator = st.pop();
                outputStack.push(operator);
            }
            return outputStack.join('');
        }
    };

Ques-7 -> (Redundant Braces)

# Problem Description -
    Given a string A denoting an expression. It contains the following operators '+', '-', '*', '/'.
    Check whether A has redundant braces or not.
    NOTE: A will be always a valid expression and will not contain any white spaces.

# Problem Constraints -
    1 <= |A| <= 105

# Solution -
    class Stack {
        constructor() {
            this.items = [];
        }
        push(element) {
            this.items.push(element);
        }
        pop() {
            if (this.items.length === 0) return 'underflow';
            return this.items.pop();
        }
        peek() {
            return this.items[this.items.length - 1];
        }
        isEmpty() {
            return this.items.length === 0;
        }
        printStack() {
            let str = '';
            let i = 0;
            while (i < this.items.length) {
                str += this.items[i] + '';
                i++;
            }
            return str;
        }
    }
    module.exports = { 
    //param A : string
    //return an integer
        braces : function(A){
            const st = new Stack();
            let N = A.length;

            for(let i=0;i<N;i++) {
                if (A[i] === '+' || A[i] === '-' || A[i] === '*' || A[i] === '/') {
                    st.push(A[i]);
                }
                if(A[i] === '(') st.push(A[i]);
                if(A[i] === ')') {
                    if(st.peek() === '(') {
                        return 1;
                    } else {
                        while (st.peek() !== '(') {
                            st.pop();
                        }
                        st.pop();
                    }
                }
            }
            // if(st.isEmpty()) return 1;
            return 0;
            
        },
    };

Ques-8 -> (Check two bracket expressions)

# Problem Description -
    Given two strings A and B. Each string represents an expression consisting of lowercase English alphabets, '+', '-', '(' and ')'.
    The task is to compare them and check if they are similar. If they are identical, return 1 else, return 0.
    NOTE: It may be assumed that there are at most 26 operands from ‘a’ to ‘z’, and every operand appears only once.

# Problem Constraints -
    1 <= length of the each String <= 100

# Solution -
    class Stack {
        constructor() {
            this.items = [];
        }
        push(element) {
            this.items.push(element);
        }
        pop() {
            if (this.items.length === 0) return 'underflow';
            return this.items.pop();
        }
        peek() {
            return this.items[this.items.length - 1];
        }
        isEmpty() {
            return this.items.length === 0;
        }
        printStack() {
            let str = '';
            let i = 0;
            while (i < this.items.length) {
                str += this.items[i] + '';
                i++;
            }
            return str;
        }
        clear() {
            this.items = [];
        }
    }
    const MAX_CHAR = 26;
    function adjSign(s, i) {
        if (i == 0) return 1;
        if (s[i - 1] == '-') return 0;
        return 1;
    }

    function eval(s, v, add) {
        let stk = new Stack();
        stk.push(1);
        let i = 0;
        // we evaluate the contribution of each character in the expression
        while (i < s.length) {
            if (s[i] == '+' || s[i] == '-') {
                i++;
                continue;
            }
            if (s[i] == '(') {
                if (adjSign(s, i))
                    stk.push(stk.peek());
                else
                    stk.push(!stk.peek());
            } else if (s[i] == ')')
                stk.pop();
            else {
                if (stk.peek()) {
                    if (adjSign(s, i)) {
                        if (add == 1)
                            v[s[i].charCodeAt(0) - 97] += 1
                        else
                            v[s[i].charCodeAt(0) - 97] -= 1
                    } else {
                        if (add == 1)
                            v[s[i].charCodeAt(0) - 97] -= 1
                        else
                            v[s[i].charCodeAt(0) - 97] += 1
                    }
                } else {
                    if (adjSign(s, i)) {
                        if (add == 1)
                            v[s[i].charCodeAt(0) - 97] -= 1
                        else
                            v[s[i].charCodeAt(0) - 97] += 1
                    } else {
                        if (add == 1)
                            v[s[i].charCodeAt(0) - 97] += 1
                        else
                            v[s[i].charCodeAt(0) - 97] -= 1
                    }
                }
            }
            i++;
        }
    }
    function areSame(expr1, expr2) {
        let v = new Array(MAX_CHAR).fill(0);
        eval(expr1, v, true);
        // calls the second expression with opposite sign
        eval(expr2, v, false);
        // checks if both the expressions are equal
        for (let i = 0; i < MAX_CHAR; i++)
            if (v[i] != 0)
                return false;
        return true;
    }
    module.exports = { 
    //param A : string
    //param B : string
    //return an integer
        solve : function(A, B){
            return areSame(A, B) == true ? 1 : 0;
        }
    };
