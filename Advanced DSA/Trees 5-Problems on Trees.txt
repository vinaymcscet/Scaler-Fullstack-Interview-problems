Ques-1 -> (Path Sum)

# Problem Description -
    Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

Problem Constraints -
    1 <= number of nodes <= 105
    -100000 <= B, value of nodes <= 100000

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //param B : integer
    //return an integer
        hasPathSum : function(A, B){
            if(A == null) return 0;
            if(A.left == null && A.right == null) {
                if(A.data == B) return 1
                else return 0;
            }
            return this.hasPathSum(A.left, B-A.data ) || this.hasPathSum(A.right, B-A.data);
        }
    };

Ques-2 -> (Next Pointer Binary Tree)

# Problem Description -
    Given a binary tree,
    Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.
    Initially, all next pointers are set to NULL.
    Assume perfect binary tree.

# Problem Constraints -
    1 <= Number of nodes in binary tree <= 100000
    0 <= node values <= 10^9

# Solution -
    // Definition for a  binary tree node
    //			function TreeNode(data){
    //				this.data = data
    //				this.left = null
    //				this.right = null
    //			}

    module.exports = { 
        //param A : root node of tree
        //return nothing
        connect : function(A){
            // first method - using Queue with TC - O(N), SC - O(N)
            let queue = [];
            queue.push(A);
            while(queue.length > 0) {
                let N = queue.length;
                for(let i=1;i<=N;i++) {
                    let front = queue.shift();

                    if(i != N) front.next = queue[0];
                    else front.next = null;
                    if(front.left != null) queue.push(front.left);
                    if(front.right != null) queue.push(front.right);
                }
            }
            return A;

            // first method - using Queue with TC - O(N), SC - O(1)
            let temp = A;
            while(temp.left != null) {
                let front = temp;
                while(temp != null) {
                    temp.left.next = temp.right;
                    if(temp.next != null) {
                        temp.right.next = temp.next.left;
                    }
                    temp = temp.next;
                }
                temp = front.left;
            }
            return A;
        }
    };

Ques-3 -> (Diameter of binary tree)

# Problem Description -
    Given a Binary Tree A consisting of N integer nodes, you need to find the diameter of the tree.
    The diameter of a tree is the number of edges on the longest path between two nodes in the tree.

# Problem Constraints -
    0 <= N <= 105

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }
    class Pair {
        constructor(height, diameter) {
            this.height = height;
            this.diameter = diameter;
        }
    }
    module.exports = { 
    //param A : root node of tree
    //return an integer
        solve : function(A){
            let diameter = -1;
            height(A);
            return diameter;

            function height(A) {
                if(A == null) return -1;
                let leftHeight = height(A.left);
                let rightHeight = height(A.right);
                diameter = Math.max(diameter, (leftHeight + rightHeight + 2));
                return Math.max(leftHeight, rightHeight) + 1;
            }

            return height(A).diameter;

            function height(A) {
                if(A == null) return new Pair(-1, 0);
                let LP = height(A.left);
                let RP = height(A.right);
                let maxDia = Math.max(LP.diameter, RP.diameter,(LP.height + RP.height + 2));
                return new Pair(Math.max(LP.height, RP.height) + 1, maxDia);
            }
        }
    };

Ques-4 -> (Equal Tree Partition)

# Problem Description -
    Given a binary tree A. Check whether it is possible to partition the tree to two trees which have equal sum of values after removing exactly one edge on the original tree.

# Problem Constraints -
    1 <= size of tree <= 100000
    0 <= value of node <= 109

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //return an integer
        solve : function(A){
            
            const checkSumOfTree = (node, sum) => {
                if(node == null) return 0;

                let checkLeft = checkSumOfTree(node.left, sum);
                let checkRight = checkSumOfTree(node.right, sum);
                return  checkLeft + checkRight + node.data;
            }
            let sumOfTreeValue = checkSumOfTree(A, 0);

            if(sumOfTreeValue%2 == 1) return 0;
            let ans = false;

            const checkPartition = (node) => {
                if(node == null) return 0;
                let left = checkPartition(node.left);
                let right = checkPartition(node.right);
                if(left == sumOfTreeValue/2 || right == sumOfTreeValue/2) ans = true;
                return left + right + node.data;
            }
            checkPartition(A);
            return ans ? 1 : 0;
        }
    };

Ques-5 -> (Invert the Binary Tree)

# Problem Description -
    Given a binary tree A, invert the binary tree and return it.
    Inverting refers to making the left child the right child and vice versa.

# Problem Constraints -
    1 <= size of tree <= 100000

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //return the root node in the tree
        invertTree : function(A){
            if(A == null) return;
            let temp = A.left;
            A.left = A.right;
            A.right = temp;
            this.invertTree(A.left);
            this.invertTree(A.right);

            return A;
        }
    };

Ques-7 -> (Identical Binary Trees)

# Problem Description -
    Given two binary trees, check if they are equal or not.
    Two binary trees are considered equal if they are structurally identical and the nodes have the same value.

# Problem Constraints -
    1 <= number of nodes <= 105

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //param B : root node of tree
    //return an integer
        isSameTree : function(A, B){
            if(A == null && B == null) return 1;
            if(A == null || B == null) return 0;
            return (A.data === B.data) && this.isSameTree(A.left, B.left) && this.isSameTree(A.right, B.right) ? 1 : 0;
        }
    };

Ques-8 -> (Sum binary tree or not)

# Problem Description -
    Given a binary tree. Check whether the given tree is a Sum-binary Tree or not.
    Sum-binary Tree is a Binary Tree where the value of a every node is equal to sum of the nodes present in its left subtree and right subtree.
    An empty tree is Sum-binary Tree and sum of an empty tree can be considered as 0. A leaf node is also considered as SumTree.
    Return 1 if it sum-binary tree else return 0.

# Problem Constraints -
    1 <= length of the array <= 100000
    0 <= node values <= 50

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //return an integer
        solve : function(A){
            function sum(node) {
                if (node == null) return 0;
                return sum(node.left) + node.data + sum(node.right);
            }
            function sumtree(A) {
                if(A == null) return 1;
                if(A.left == null && A.right == null) return 1;
                let leftSubtreeSum = sum(A.left);
                let rightSubtreeSum = sum(A.right);

                if((leftSubtreeSum + rightSubtreeSum == A.data) && sumtree(A.left) != 0 && sumtree(A.right) != 0) return 1;
                return 0;
            }
            return sumtree(A);
        }
    };
