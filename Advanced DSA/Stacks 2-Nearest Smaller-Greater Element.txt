Ques-1 -> (Nearest Smaller Element)

# Problem Description -
    Given an array A, find the nearest smaller element G[i] for every element A[i] in the array such that the element has an index smaller than i.
    More formally,
    G[i] for an element A[i] = an element A[j] such that
    j is maximum possible AND
    j < i AND
    A[j] < A[i]
    Elements for which no smaller element exist, consider the next smaller element as -1.

# Problem Constraints -
    1 <= |A| <= 100000
    -109 <= A[i] <= 109

# Solution -
    class Stack {
        constructor() {
            this.items = [];
        }
        push(element) {
            this.items.push(element);
        }
        pop() {
            if (this.items.length === 0) return 'underflow';
            return this.items.pop();
        }
        peek() {
            return this.items[this.items.length - 1];
        }
        isEmpty() {
            return this.items.length === 0;
        }
        printStack() {
            let str = '';
            let i = 0;
            while (i < this.items.length) {
                str += this.items[i] + ' ';
                i++;
            }
            return str;
        }
    }
    module.exports = { 
    //param A : array of integers
    //return a array of integers
        prevSmaller : function(A){
            let ans = [];
            const st = new Stack();
            let N = A.length;
            if(A.length == 1) return [-1];
            for(let i=0;i<N;i++) {
                while(!st.isEmpty() && st.peek() >= A[i]) {
                    st.pop();
                }
                if(st.isEmpty()) ans[i] = -1;
                else ans[i] = st.peek();

                st.push(A[i]);
            }
            return ans;
        }
    };

Ques-2 -> (Largest Rectangle in Histogram)

# Problem Description -
    Given an array of integers A.
    A represents a histogram i.e A[i] denotes the height of the ith histogram's bar. Width of each bar is 1.
    Find the area of the largest rectangle formed by the histogram.

# Problem Constraints -
    1 <= |A| <= 100000
    1 <= A[i] <= 10000

# Solution -
    class Stack {
        constructor() {
            this.items = [];
        }
        push(element) {
            this.items.push(element);
        }
        pop() {
            if (this.items.length === 0) return 'underflow';
            return this.items.pop();
        }
        peek() {
            return this.items[this.items.length - 1];
        }
        isEmpty() {
            return this.items.length === 0;
        }
        printStack() {
            let str = '';
            let i = 0;
            while (i < this.items.length) {
                str += this.items[i] + ' ';
                i++;
            }
            return str;
        }
    }
    function nearestSmallestElementOnLeft(A){
        let ans = [];
        const st = new Stack();
        let N = A.length;
        //if(A.length == 1) return [-1];
        for(let i=0;i<N;i++) {
            while(!st.isEmpty() && A[st.peek()] >= A[i]) {
                st.pop();
            }
            if(st.isEmpty()) ans[i] = -1;
            else ans[i] = st.peek();

            st.push(i);
        }
        return ans;
    };
    function nearestSmallestElementOnRight(A) {
        let ans = [];
        const st = new Stack();
        let N = A.length;
        //if(A.length == 1) return [-1];
        for(let i=N-1;i>=0;i--) {
            while(!st.isEmpty() && A[st.peek()] >= A[i]) {
                st.pop();
            }
            if(st.isEmpty()) ans[i] = -1;
            else ans[i] = st.peek();

            st.push(i);
        }
        return ans;
    };
    module.exports = { 
    //param A : array of integers
    //return an integer
        largestRectangleArea : function(A){
            let area = Number.MIN_SAFE_INTEGER;
            const nearestSmallLeft = nearestSmallestElementOnLeft(A);
            const nearestSmallRight = nearestSmallestElementOnRight(A);

            for(let i=0;i<A.length;i++) {
                let p1,p2;
                if (nearestSmallLeft[i] == -1) p1 = 0;
                else p1 = nearestSmallLeft[i]+1;

                if (nearestSmallRight[i] == -1) p2 = A.length-1;
                else p2 = nearestSmallRight[i]-1;

                let width = (p2-p1 + 1);
                let height = A[i];
                area = Math.max(area, width * height);
            }
            return area;
        }
    };

Ques-3 -> (MAX and MIN)

# Problem Description -
    Given an array of integers A.
    The value of an array is computed as the difference between the maximum element in the array and the minimum element in the array A.
    Calculate and return the sum of values of all possible subarrays of A modulo 109+7.

# Problem Constraints -
    1 <= |A| <= 100000
    1 <= A[i] <= 1000000

# Solution -
    function nearestSmallestElementOnLeft(A){
        let ans = [];
        const stack = [];
        let N = A.length;
        //if(A.length == 1) return [-1];
        for(let i=0;i<N;i++) {
            while(stack.length > 0 && stack[stack.length-1][0] >= A[i]) {
                stack.pop();
            }
            if(stack.length == 0) ans.push(-1);
            else ans.push(stack[stack.length - 1][1]);

            stack.push([A[i], i]);
        }
        return ans;
    };
    function nearestSmallestElementOnRight(A) {
        let ans = [];
        const stack = [];
        let N = A.length;
        //if(A.length == 1) return [-1];
        for(let i=N-1;i>=0;i--) {
            while(stack.length > 0 && stack[stack.length-1][0] >= A[i]) {
                stack.pop();
            }
            if(stack.length == 0) ans.push(N);
            else ans.push(stack[stack.length - 1][1]);

            stack.push([A[i], i]);
        }
        return ans.reverse();
    };
    function nearestGreatestElementOnLeft(A) {
        let ans = [];
        const stack = [];
        let N = A.length;
        //if(A.length == 1) return [-1];
        for(let i=0;i<N;i++) {
            while (stack.length > 0 && stack[stack.length - 1][0] <= A[i]) {
                stack.pop();
            }
            if(stack.length == 0) ans.push(-1);
            else ans.push(stack[stack.length - 1][1]);

            stack.push([A[i], i]);
        }
        return ans;
    };
    function nearestGreatestElementOnRight(A) {
        let ans = [];
        const stack = [];
        let N = A.length;
        //if(A.length == 1) return [-1];
        for(let i=N-1;i>=0;i--) {
            while (stack.length > 0 && stack[stack.length - 1][0] <= A[i]) {
                stack.pop();
            }
            if(stack.length === 0) ans.push(N);
            else  ans.push(stack[stack.length - 1][1]);

            stack.push([A[i], i]);
        }
        return ans.reverse();
    };
    module.exports = { 
    //param A : array of integers
    //return an integer
        solve : function(A){
            let N = A.length;
            let nearSmallLeft = nearestSmallestElementOnLeft(A);
            let nearSmallRight = nearestSmallestElementOnRight(A);
            let neargreatestLeft = nearestGreatestElementOnLeft(A);
            let neargreatestRight = nearestGreatestElementOnRight(A);

            let ans = BigInt(0);
            let mod = BigInt(1000000007);

            for(let i=0;i<N;i++) {
                let max = (i-neargreatestLeft[i])*(neargreatestRight[i]-i);
                let min = (i-nearSmallLeft[i])*(nearSmallRight[i]-i);
                let sum = (max-min)*A[i];
                ans += BigInt(sum);
            }
            return Number(ans % mod);
        }
    };

Ques-4 -> (Next Greater)

# Problem Description -
    Given an array A, find the next greater element G[i] for every element A[i] in the array.
    The next greater element for an element A[i] is the first greater element on the right side of A[i] in the array, A.
    More formally:
    G[i] for an element A[i] = an element A[j] such that 
        j is minimum possible AND 
        j > i AND
        A[j] > A[i]
    Elements for which no greater element exists, consider the next greater element as -1.

# Problem Constraints - 
    1 <= |A| <= 105
    1 <= A[i] <= 107

# Solution -
    class Stack {
        constructor() {
            this.items = [];
        }
        push(element) {
            this.items.push(element);
        }
        pop() {
            if (this.items.length === 0) return 'underflow';
            return this.items.pop();
        }
        peek() {
            return this.items[this.items.length - 1];
        }
        isEmpty() {
            return this.items.length === 0;
        }
        printStack() {
            let str = '';
            let i = 0;
            while (i < this.items.length) {
                str += this.items[i] + ' ';
                i++;
            }
            return str;
        }
    }
    module.exports = { 
    //param A : array of integers
    //return a array of integers
        nextGreater : function(A){
            let ans = [];
            const st = new Stack();
            let N = A.length;
            if(A.length == 1) return [-1];
            for(let i=N-1;i>=0;i--) {
                while(!st.isEmpty() && st.peek() <= A[i]) {
                    st.pop();
                }
                if(st.isEmpty()) ans[i] = -1;
                else ans[i] = st.peek();

                st.push(A[i]);
            }
            return ans;
        }
    };


Ques-5 -> (Max Rectangle in Binary Matrix)

# Problem Description -
    Given a 2-D binary matrix A of size N x M filled with 0's and 1's, find the largest rectangle containing only ones and return its area.

# Problem Constraints -
    1 <= N, M <= 100

# Solution -
    module.exports = { 
    //param A : array of array of integers
    //return an integer
        maximalRectangle : function(A){
            let N = A.length;
            let M = A[0].length;
            let ans = 0;

            for (let i = 0; i < N; i++) {
                for (let j = 1; j < M; j++) {
                    if (A[i][j] == 0) continue;
                    else if(A[i][j] == 1){
                        A[i][j] += A[i][j - 1];
                    }
                }
            }

            for (let i = 0; i < N; i++) {
                for (let j = 0; j < M; j++) {
                    if (A[i][j] == 0) continue;
                    let width = A[i][j];
                    let height = 1;
                    let area = width * height;
                    ans = Math.max(ans, area);

                    // Iterate over rows above the current row
                    for (let k=i-1;k>= 0;k--) {
                        if (A[k][j] == 0) break;
                        width = Math.min(width, A[k][j]);
                        height++;
                        area = width * height;
                        ans = Math.max(area, ans);
                    }
                }
            }
            return ans;
        }
    };

Ques-6 -> (Sort stack using another stack)

# Problem Description -
    Given a stack of integers A, sort it using another stack.
    Return the array of integers after sorting the stack using another stack.

# Problem Constraints -
    1 <= |A| <= 5000
    0 <= A[i] <= 109

# Solution -
    class Stack {
        constructor() {
            this.items = [];
        }
        push(element) {
            this.items.push(element);
        }
        pop() {
            if (this.items.length === 0) return 'underflow';
            return this.items.pop();
        }
        peek() {
            return this.items[this.items.length - 1];
        }
        isEmpty() {
            return this.items.length === 0;
        }
        printStack() {
            let str = '';
            let i = 0;
            while (i < this.items.length) {
                str += this.items[i] + ' ';
                i++;
            }
            return str;
        }
    }
    module.exports = { 
    //param A : array of integers
    //return a array of integers
        solve : function(A){
            // Brute Force - Bubble Sort
            const len = A.length;
            for (let i = 0; i < len; i++) {
                for (let j = 0; j < len - i - 1; j++) {
                    if (A[j] > A[j + 1]) {
                        [A[j], A[j + 1]] = [A[j + 1], A[j]];
                    }
                }
            }
            return A;

            let N = A.length;
            if(N <= 1) return A;

            const st = new Stack();
            const helperStack = new Stack();

            for(let i=0;i<N;i++) {
                st.push(A[i]);
            }
            while(!st.isEmpty()) {
                let temp = st.peek();
                st.pop();
                while(!helperStack.isEmpty() && helperStack.peek() > temp) {
                    st.push(helperStack.peek());
                    helperStack.pop();
                }
                helperStack.push(temp);
            }
            while(!helperStack.isEmpty()) {
                st.push(helperStack.peek());
                helperStack.pop();
            }
            let arr = [];
            while(!st.isEmpty()) {
                arr.push(st.peek());
                st.pop();
            }
            return arr;
        }
    };
