Ques-1 -> (Square Root of Integer)

# Problem Description -
    Given an integer A. Compute and return the square root of A.
    If A is not a perfect square, return floor(sqrt(A)).

    NOTE: 
    The value of A*A can cross the range of Integer.
    Do not use the sqrt function from the standard library. 
    Users are expected to solve this in O(log(A)) time.

# Problem Constraints -
    0 <= A <= 109

# Solution -
    module.exports = { 
    //param A : an integer
    //return an integer
        sqrt : function(A){
            // Brute Force Approach
            let i=1, ans=0;
            while(i*i <= A) {
                ans = i;
                i++;
            }
            return ans;

            // Optimize Approach
            let low = 1;
            let high = A;
            let mid = 0;
            let ans = 0;

            while(low<=high) {
                mid = Math.floor(low + (high-low)/2);

                if(mid*mid == A) return mid;
                if(mid*mid > A) high = mid-1;
                else {
                    ans = mid;
                    low = mid+1;
                }
            }
            return ans;
        }
    };

Ques-2 -> (Rotated Sorted Array Search)

# Problem Description -
    Given a sorted array of integers A of size N and an integer B, 
    where array A is rotated at some pivot unknown beforehand.
    For example, the array [0, 1, 2, 4, 5, 6, 7] might become [4, 5, 6, 7, 0, 1, 2].
    Your task is to search for the target value B in the array. If found, return its index; otherwise, return -1.
    You can assume that no duplicates exist in the array.
    NOTE: You are expected to solve this problem with a time complexity of O(log(N)).

# Problem Constraints -
    1 <= N <= 1000000
    1 <= A[i] <= 109
    All elements in A are Distinct.

# Solution -
    module.exports = { 
    //param A : array of integers
    //param B : integer
    //return an integer
        search : function(A, B){
            // Brute Force Approach
            let N = A.length;
            for(let i=0;i<N;i++) {
                if(A[i] == B) return i;
            }
            return -1;

            // Optimized approach - Binary search
            let N = A.length;
            let low = 0;
            let high = N-1;

            while(low <= high) {
                mid = Math.floor(low + (high-low)/2);

                if(A[mid] == B) return mid;
                if(B<A[0]) { // target part-2
                    if(A[mid] >= A[0])  {
                        // mid part-1
                        // go to right
                        low = mid + 1;
                    } else {
                        // mid part-2
                    if(A[mid] < B) {
                        low = mid+1;
                    } else {
                        high = mid-1;
                    }
                    }
                } else {
                    // target part-1
                    if(A[mid] < A[0]) {
                        high = mid-1;
                    } else {
                        // mid part-1
                        if(A[mid] <B) {
                            low = mid+1;
                        } else {
                            high = mid-1;
                        }
                    }
                } 
            }
            return -1;
        }
    };

Ques-3 -> (Median of Array)

# Problem Description -
    There are two sorted arrays A and B of sizes N and M respectively.
    Find the median of the two sorted arrays ( The median of the array formed by merging both the arrays ).
    NOTE:
    The overall run time complexity should be O(log(m+n)).
    IF the number of elements in the merged array is even, then the median is the average of (n/2)th and (n/2+1)th element. For example, if the array is [1 2 3 4], the median is (2 + 3) / 2.0 = 2.5.

# Problem Constraints -
    1 <= N + M <= 2*106

# Solution -
    module.exports = {
    //param A : array of integers
    //param B : array of integers
    //return an integer
    findMedianSortedArrays: function (A, B) {
        // Brute Force Approach - TC - O(N), SC - O(N)
        const C = [...A, ...B].sort((a, b) => a - b);
        let N = C.length, median = 0;
        if((N%2) == 0) {
            median = ((C[N/2-1]+C[N/2])/2).toFixed(1);
        } else {
            median = C[Math.floor(N/2)].toFixed(1);
        }
        return median;
        
        // Optimize approach
        let N1 = A.length;
        let N2 = B.length;
            // if n1 is bigger swap the arrays:
        if(N2 < N1) return this.findMedianSortedArrays(B,A);

        let low = 0;
        let high = N1;
        //   let mid =0;
        let leftHalfArea = Math.floor((N1+N2+1)/2);
        let ans=0;

        while(low <= high) {
            let mid = Math.floor(low + (high-low)/2);
            let cut1 = mid;
            let cut2 = leftHalfArea - cut1;

            let l1 = (cut1 == 0) ? -Infinity: A[cut1-1];
            let l2 = (cut2 == 0) ? -Infinity: B[cut2-1];
            let r1 = (cut1 == N1) ? Infinity: A[cut1];
            let r2 = (cut2 == N2) ? Infinity: B[cut2];

            if(l1 <= r2 && l2 <= r1) {
                //   return (Math.max(l1,l2) + Math.min(r1, r2))/2;
                if((N1+N2)%2==0) ans=(Math.max(l1,l2)+Math.min(r1,r2))/2.0;
                else  ans= Math.max(l1, l2);
                break;
            } else if(l1 > r2) {
                high = mid-1;
            } else {
                low = mid+1;
            }
        }
        return ans.toFixed(1);
    },
    };

Ques-4 -> (Ath Magical Number)

# Problem Description -
    You are given three positive integers, A, B, and C.
    Any positive integer is magical if divisible by either B or C.
    Return the Ath smallest magical number. Since the answer may be very large, return modulo 109 + 7.
    Note: Ensure to prevent integer overflow while calculating.

# Problem Constraints -
    1 <= A <= 109
    2 <= B, C <= 40000

# Solution -
    module.exports = { 
    //param A : integer
    //param B : integer
    //param C : integer
    //return an integer
        solve : function(A, B, C){
            const getLCM = (a,b) => {
                const getGCD = (a,b) => {
                    if(b == 0) return a;
                    else return getGCD(b, a%b);
                } 
                return a*b/getGCD(a,b);
            }

            let low = Math.min(B,C);
            let high = A*Math.min(B,C);
            let LCM = getLCM(B, C);
            let mid = 0;
            let ans = 0;
            let mod = Math.pow(10,9) + 7;

            while(low <= high) {
                mid = Math.floor(low + (high-low)/2);

                let count = Math.floor(mid/B) + Math.floor(mid/C) - Math.floor(mid/LCM);
                if(count > A) {
                    high = mid-1;
                } else if(count < A) {
                    low = mid+1;
                } else {
                    ans = mid % mod;
                    high = mid-1;
                }
            }
            return ans;
        }
    };

Ques-5 -> (ADD OR NOT)

# Problem Description -
    Given an array of integers A of size N and an integer B.
    In a single operation, any one element of the array can be increased by 1. You are allowed to do at most B such operations.
    Find the number with the maximum number of occurrences and return an array C of size 2, where C[0] is the number of occurrences, and C[1] is the number with maximum occurrence.
    If there are several such numbers, your task is to find the minimum one.

# Problem Constraints-
    1 <= N <= 105
    -109 <= A[i] <= 109
    0 <= B <= 109

# Solution -
    module.exports = { 
    //param A : array of integers
    //param B : integer
    //return a array of integers
        solve : function(A, B){
            //Brute Force Approach = TC - O(N^2), SC - O(1) - small test case passed only
            // let N = A.length;
            A.sort();
            let ans = new Array(2).fill(0);

            for(let i=0;i<N;i++) {
                let count = 0;
                let operations = B;
                for(let j=i;j>=0;j--) {
                    if(A[i]-A[j] <= operations) {
                        operations -= A[i]-A[j];
                        count++;
                    } 
                    // else {
                    //     break;
                    // }
                }
                if(ans[0] < count) {
                    ans[0] = count;
                    ans[1] = A[i];
                }
            }
            return ans;

            // Optimized Approach 
            let N = A.length;
            A.sort((a, b) => a - b); // Sort the array in ascending order.
            let ans = new Array(2).fill(-1);
            let max = 0;
            let prefixArray = new Array(N+1).fill(0);
            for(let i=0;i<N;i++) {
                prefixArray[i+1] = prefixArray[i] + A[i];
            }

            const checkArr = (prefixArray, mid, B, A, i) => {
                let count = mid;
                if((A[i]*count) - (prefixArray[i+1] - prefixArray[i-count+1])<=B) return true;
                else return false;
            }

            for(let i=0;i<N;i++) {
                let low = 1;
                let high = i+1;

                while(low <= high) {
                    let mid = Math.floor(low + (high-low)/2);
                    if(checkArr(prefixArray, mid, B, A, i)) {
                        max = mid;
                        low = mid + 1;
                    } 
                    else high = mid - 1;
                }
                if(ans[0] < max) {
                    ans[0] = max;
                    ans[1] = A[i];
                }
            }
            return ans;
        }
    };

Ques-6 -> (Find Smallest Again)

# Problem Description -
    Given an integer array A of size N.
    If we store the sum of each triplet of the array A in a new list, then find the Bth smallest element among the list.
    NOTE: A triplet consists of three elements from the array. Let's say if A[i], A[j], A[k] are the elements of the triplet then i < j < k.

# Problem Constraints -
    3 <= N <= 500
    1 <= A[i] <= 108
    1 <= B <= (N*(N-1)*(N-2))/6

# Solution -
    module.exports = { 
    //param A : array of integers
    //param B : integer
    //return an integer
        solve : function(A, B){
            A.sort((a, b) => a-b);
            let N = A.length;
            let low = A[0] + A[1] + A[2];
            let high = A[N-1] + A[N-2] + A[N-3];
            let mid = 0;
            let ans = 0;

            const checkTriplet = (A, mid, B) => {
                let count = 0;
                for(let i=0;i<N;i++){
                    let start = i+1;
                    let end = N-1;

                    while(start <= end) {
                        let sum = A[i] + A[start] + A[end];
                        if(sum < mid) {
                            count = count + (end-start);
                            start++;
                        } 
                        else end--;
                    }
                }
                if(count >= B) return true;
                else return false;
            }

            while(low <= high) {
                mid = Math.floor(low + (high - low)/2);
                if(checkTriplet(A, mid, B)) {
                    high = mid-1
                } else {
                    ans = mid;
                    low = mid + 1;
                }
            }
            return ans;
        }
    };

Ques-7 -> (Matrix Median)

# Problem Description -
    Given a matrix of integers A of size N x M in which each row is sorted.
    Find and return the overall median of matrix A.
    NOTE: No extra memory is allowed.
    NOTE: Rows are numbered from top to bottom and columns are numbered from left to right.

# Problem Constraints -
    1 <= N, M <= 10^5
    1 <= N*M <= 10^6
    1 <= A[i] <= 10^9
    N*M is odd

# Solution -
    module.exports = { 
    //param A : array of array of integers
    //return an integer
        findMedian : function(A){
            // Approach - 1
            //const sum = A.reduce((acc, row) => acc.concat(row), []);
            let sum = [];
            for(let i=0;i<A.length;i++) {
                for(let j=0;j<A[0].length;j++){
                    sum.push(A[i][j])
                }
            }
            sum.sort((a,b) =>a-b);
            let N = sum.length;
            if((N%2) == 0) {
            median = ((sum[N/2-1]+sum[N/2])/2);
        } else {
            median = sum[Math.floor(N/2)];
        }
        return median;

        // Approach - 2(Binary search)
        const rows = A.length;
        const cols = A[0].length;
        
        let low = Math.min(...A.map(row => row[0]));
        let high = Math.max(...A.map(row => row[cols-1]));
        let mid = 0;

        while(low < high) {
            mid = Math.floor(low + (high-low)/2);
            const count = countElementsLessThanOrEqualTo(mid);

            if(count <= Math.floor((rows*cols)/2)) low = mid + 1;
            else high = mid;
        }
        return low;

            // Function to count the number of elements less than or equal to the candidate median
            function countElementsLessThanOrEqualTo(candidateMedian) {
                let count = 0;
                for (let i = 0; i < rows; i++) {
                    // Use binary search to find the index of the first element greater than the candidate median
                    let low = 0;
                    let high = cols - 1;
                    let index = -1;

                    while (low <= high) {
                        const mid = Math.floor(low + (high - low) / 2);
                        if (A[i][mid] <= candidateMedian) {
                            index = mid;
                            low = mid + 1;
                        } 
                        else high = mid - 1;
                    }

                    // Increment the count by the index of the first element greater than the candidate median
                    count += index + 1;
                }
                return count;
            }
        }
    };
