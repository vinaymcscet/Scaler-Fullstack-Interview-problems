Ques-1 -> (Fractional Knapsack)

# Problem Description -
    Given two integer arrays A and B of size N each which represent values and weights associated with N items respectively.
    Also given an integer C which represents knapsack capacity.
    Find out the maximum total value that we can fit in the knapsack. If the maximum total value is ans, then return ⌊ans × 100⌋ , i.e., floor of (ans × 100).
    NOTE:
    You can break an item for maximizing the total value of the knapsack.

# Problem Constraints -
    1 <= N <= 105
    1 <= A[i], B[i] <= 103
    1 <= C <= 103

# Solution -
    class Items {
        constructor(weight, value, ppu) {
            this.weight = weight;
            this.value = value;
            this.ppu = ppu;
        }
    }
    module.exports = { 
    //param A : array of integers(value)
    //param B : array of integers(weight)
    //param C : integer(capacity)
    //return an integer
        solve : function(A, B, C){
            // let item = new Items([], [],0);
            let ans = 0;
            let items = [];

            for(let i=0;i<A.length;i++) {
                let ppu = A[i]/B[i];
                items.push(new Items(B[i], A[i], ppu));
            }
            items.sort((a, b) => b.ppu-a.ppu);
            for(let i=0;i<items.length;i++) {
                if(C <= 0) break;
                if(C >= items[i].weight) {
                    ans += items[i].value;
                    C -= items[i].weight;
                }
                else {
                    ans += (C/items[i].weight) * items[i].value;
                    break;
                }
            }
            return Math.floor(Math.floor(ans * 1000) / 10);
        }
    };

Ques-2 -> (0-1 Knapsack)

# Problem Description -
    Given two integer arrays A and B of size N each which represent values and weights associated with N items respectively.
    Also given an integer C which represents knapsack capacity.
    Find out the maximum value subset of A such that sum of the weights of this subset is smaller than or equal to C.
    NOTE:
    You cannot break an item, either pick the complete item, or don’t pick it (0-1 property).

# Problem Constraints -
    1 <= N <= 103
    1 <= C <= 103
    1 <= A[i], B[i] <= 103

# Solution -
    module.exports = { 
    //param A : array of integers(value)
    //param B : array of integers(weight)
    //param C : integer (capacity)
    //return an integer
        solve : function(A, B, C){
            // Top-down approach
            // TC = O(N * capacity), SC = O(N * capacity)
            let N = A.length;
            let dp = Array.from(new Array(N+1), () => new Array(C+1).fill(-1));
            return findZero_OneKnapsackProblem(B, A, C, N-1, dp);

            // Bottom - up approach
            // TC = O(N * capacity), SC = O(N * capacity)
            let N = A.length;
            let dp = Array.from(new Array(N+1), () => new Array(C+1).fill(0));

            for(let i=0;i<=N;i++) {
                for(let j=0;j<=C;j++) {
                    if(i==0 || j==0) dp[i][j] = 0;
                    else {
                        let rejection = dp[i-1][j];
                        let selection = 0;
                        if(j-B[i-1] >= 0) selection = A[i-1] + dp[i-1][j-B[i-1]];
                        dp[i][j] = Math.max(selection, rejection);
                    }
                }
            }
            return dp[N][C];
        }
    };

    function findZero_OneKnapsackProblem(B, A, C, end, dp) {
        // base case
        if(end < 0 || C == 0) return 0;
        if(dp[end][C] != -1) return dp[end][C];

        let include = 0, exclude;
        if(B[end] <= C) {
            include = findZero_OneKnapsackProblem(B, A, C-B[end], end-1, dp) + A[end];
        }
        exclude = findZero_OneKnapsackProblem(B, A, C, end-1, dp);
        return dp[end][C] = Math.max(include , exclude);
    }


Ques-3 -> (Unbounded Knapsack)

# Problem Description -
    Given a knapsack weight A and a set of items with certain value B[i] and weight C[i], we need to calculate maximum amount that could fit in this quantity.
    This is different from classical Knapsack problem, here we are allowed to use unlimited number of instances of an item.

# Problem Constraints -
    1 <= A <= 1000
    1 <= |B| <= 1000
    1 <= B[i] <= 1000
    1 <= C[i] <= 1000

# Solution -
    module.exports = { 
    //param A : integer (Capacity)
    //param B : array of integers (value - profit)
    //param C : array of integers (weight)
    //return an integer
        solve : function(A, B, C){
            let N = B.length;
            let dp = new Array(A+1).fill(0);
            dp[0] = 0;
            // let max = 0;

            for(let i=1;i<=A;i++) {
                for(let j=0;j<N;j++) {
                    if(C[j] <= i)  {
                        dp[i] = Math.max(dp[i], B[j] + dp[i-C[j]]);
                    }
                }
            }
            return dp[A];
        }
    };

Ques-4 -> (Flip Array)

# Problem Description -
    Given an array A of positive elements, you have to flip the sign of some of its elements such that the resultant sum of the elements of array should be minimum non-negative(as close to zero as possible).
    Return the minimum number of elements whose sign needs to be flipped such that the resultant sum is minimum non-negative.

# Problem Constraints -
    1 <= length of(A) <= 100
    Sum of all the elements will not exceed 10,000.

# Solution -
    module.exports = { 
    //param A : array of integers
    //return an integer
        solve : function(A){
            let N = A.length, sum = 0;
            for(let item of A) {
                sum += item;
            }
            let dp = Array.from(new Array(N+1), () => new Array(sum+1).fill(Infinity));
            for(let i=0;i<= N;i++) {
                dp[i][0] = 0;
            }
            for(let i=1;i<= N;i++) {
                for(let j=0;j<=sum;j++) {
                    if(A[i-1] <= j) dp[i][j] = Math.min(dp[i-1][j], 1 + dp[i-1][j - A[i-1]]);
                    else dp[i][j] = dp[i-1][j];
                }
            }
            for(let i=Math.floor(sum/2);i>=0;i--) {
                if(dp[N][i] != Infinity) return dp[N][i];
            }
            return 0;
        }
    };

Ques-5 -> ( Buying Candies)

# Problem Description -
    Rishik likes candies a lot. So, he went to a candy-shop to buy candies.
    The shopkeeper showed him N packets each containg A[i] candies for cost of C[i] nibbles, each candy in that packet has a sweetness B[i]. The shopkeeper puts the condition that Rishik can buy as many complete candy-packets as he wants but he can't buy a part of the packet.
    Rishik has D nibbles, can you tell him the maximum amount of sweetness he can get from candy-packets he will buy?

# Problem Constraints -
    1 <= N <= 700
    1 <= A[i] <= 1000
    1 <= B[i] <= 1000
    1 <= C[i],D <= 1000

# Solution -
    module.exports = { 
    //param A : array of integers
    //param B : array of integers
    //param C : array of integers
    //param D : integer
    //return an integer
        solve : function(A, B, C, D){
            let dp = new Array(D+1).fill(0);
            for(let i=1;i<=D;i++) {
                for(let j=0;j<A.length;j++) {
                    if(C[j] <= i) {
                        dp[i] = Math.max(dp[i], dp[i-C[j]] + A[j] * B[j]);
                    }
                }
            }
            return dp[D];
        }
    };

Ques-6 -> (Tushar's Birthday Party)

# Problem Description -
    As it is Tushar's Birthday on March 1st, he decided to throw a party to all his friends at TGI Fridays in Pune. Given are the eating capacity of each friend, filling capacity of each dish and cost of each dish. A friend is satisfied if the sum of the filling capacity of dishes he ate is equal to his capacity. Find the minimum cost such that all of Tushar's friends are satisfied (reached their eating capacity).
    NOTE:
        Each dish is supposed to be eaten by only one person. Sharing is not allowed.
        Each friend can take any dish unlimited number of times.
        There always exists a dish with filling capacity 1 so that a solution always exists.

# Problem Constraints -
    |A| <= 1000
    |B| <= 1000
    |C| <= 1000
    
# Solution -
    module.exports = { 
    //param A : array of integers (value)
    //param B : array of integers (capacity)
    //param C : array of integers (weight)
    //return an integer
        solve : function(A, B, C){
            let dish = [];
            let n = C.length;
            for (let i = 0; i < n; i++)
                dish.push([B[i], C[i]]);
            let m = -1;
            for (let i = 0; i < A.length; i++) {
                m = Math.max(m, A[i]);
            }
            let dp = new Array(m + 1);
            for (let i = 0; i <= m; i++) {
                dp[i] = new Array(n + 1);
            }
            //maximum capacity among friends

            // dp[highest capacity][no. of dishes]
            for (let i = 0; i <= m; i++) {
                for (let j = 0; j <= n; j++) {
                    //if capacity of friend is 0
                    if (i == 0) dp[i][j] = 0;
                    //if no dish is remaining to choose from
                    else if (j == 0) dp[i][j] = Infinity;
                    else {
                        //if i-th person can eat jth dish
                        if (i >= dish[j - 1][0]) {
                            //As one dish can be taken multiple times, we have used 
                            //dp[ i-dish[j-1].first ][ j ] and not dp[ i-dish[j-1].first ][ j-1 ]. 

                            dp[i][j] = Math.min(dp[i][j - 1], dp[i - dish[j - 1][0]][j] + dish[j - 1][1]);
                        } else dp[i][j] = dp[i][j - 1];
                    }
                }
            }

            // Add for each friend independently
            let ans = 0;
            for (let i = 0; i < A.length; i++) {
                ans += dp[A[i]][n];
            }

            return ans;
        }
    };

Ques-7 -> (Ways to send the signal)

# Problem Description -
    You are trying to send signals to aliens using a linear array of A laser lights. You don't know much about how the aliens are going to percieve the signals, but what you know is that if two consecutive lights are on then the aliens might take it as a sign of danger and destroy the earth.
    Find and return the total number of ways in which you can send a signal without compromising the safty of the earth. Return the ans % 109 + 7.

# Problem Constraints -
    1 <= A <= 105

# Solution -
    module.exports = { 
    //param A : integer
    //return an integer
        solve : function(A){
            let dp = Array.from(new Array(A+1), () => new Array(2).fill(0));
            let MOD = Math.pow(10, 9) + 7;
            dp[1][0] = 1;
            dp[1][1] = 1;

            for(let i=2;i<=A;i++) {
                dp[i][0] = (dp[i-1][1] + dp[i-1][0]) % MOD;
                dp[i][1] = dp[i-1][0];
            }
            return (dp[A][0] + dp[A][1]) % MOD;
        }
    };
