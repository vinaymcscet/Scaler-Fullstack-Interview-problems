Ques-1 -> (Sorted Insert Position)

# Problem Description -
    You are given a sorted array A of size N and a target value B.
    Your task is to find the index (0-based indexing) of the target value in the array.
    If the target value is present, return its index.
    If the target value is not found, return the index of least element greater than equal to B.
    If the target value is not found and least number greater than equal to target is also not present, return the length of array (i.e. the position where target can be placed)
    Your solution should have a time complexity of O(log(N)).

# Problem Constraints -
    1 <= N <= 105
    1 <= A[i] <= 105
    1 <= B <= 105

# Solution -
    module.exports = { 
    //param A : array of integers
    //param B : integer
    //return an integer
        searchInsert : function(A, B){
            const N = A.length;
            let low = 0;
            let mid = 0;
            let high = N-1;

            while(low<=high) {
                mid = Math.floor(low + (high -low)/2);
                if(A[mid] == B) return mid;
                else if(A[mid] < B) low = mid + 1;
                else high = mid - 1;
            }
            return low;
        }
    };

Ques-2 -> (Find a peak element)

# Problem Description -
    Given an array of integers A, find and return the peak element in it.
    An array element is considered a peak if it is not smaller than its neighbors. For corner elements, we need to consider only one neighbor.
    NOTE:
    It is guaranteed that the array contains only a single peak element.
    Users are expected to solve this in O(log(N)) time. The array may contain duplicate elements.

# Problem Constraints -
    1 <= |A| <= 100000
    1 <= A[i] <= 109

# Solution -
    module.exports = { 
    //param A : array of integers
    //return an integer
        solve : function(A){
            let N = A.length;
            let low = 0;
            let high = N-1;
            let mid = 0;

            if(N == 1) return A[0];
            if(A[1] < A[0]) return A[0];
            if(A[N-2] < A[N-1]) return A[N-1];

            while(low <= high) {
                mid = Math.floor(low + (high - low)/2);
                if(A[mid] >= A[mid+1] && A[mid] >= A[mid-1]) return A[mid];
                else if(A[mid] > A[mid + 1]) high = mid - 1;
                else low = mid + 1;
            }
            return A[mid];
        }
    };

Ques-3 -> (Search for a Range)

# Problem Description -
    Given a sorted array of integers A (0-indexed) of size N, find the left most and the right most index of a given integer B in the array A.
    Return an array of size 2, such that 
            First element = Left most index of B in A
            Second element = Right most index of B in A.
    If B is not found in A, return [-1, -1].
    Note : Your algorithm's runtime complexity must be in the order of O(log n).

# Problem Constraints -
    1 <= N <= 106
    1 <= A[i], B <= 109

# Solution -
    module.exports = { 
     //param A : array of integers
    //param B : integer
    //return a array of integers
        searchRange : function(A, B){
            let N = A.length;
            let low = 0;
            let high = N-1;
            let ans = [];
            ans[0] = ans[1] = -1;

            if(N <= 2) {
                ans[0] = ans[1] = 0;
                return ans;
            }

            while(low <= high){
                mid = Math.floor(low + (high - low)/2);
                
                if(A[mid] == B) {
                    let midCopy = mid;
                    while(A[mid] == B){
                        ans[0] = mid;
                        mid = mid-1;
                    }
                    while(A[midCopy] == B) {
                        ans[1] = midCopy;
                        midCopy = midCopy+1;
                    }
                    return ans;
                }
                else if(A[mid] > B) high = mid-1;
                if(A[mid] < B) low = mid + 1;
            }
            return ans;
        }
    };

Ques-4 -> (Single Element in Sorted Array)

# Problem Description -
    Given a sorted array of integers A where every element appears twice except for one element which appears once, find and return this single element that appears only once.
    Elements which are appearing twice are adjacent to each other.
    NOTE: Users are expected to solve this in O(log(N)) time.

# Problem Constraints -
    1 <= |A| <= 100000
    1 <= A[i] <= 10^9

# Solution -
    module.exports = { 
    //param A : array of integers
    //return an integer
        solve : function(A){
            // Approach - 1 (using XOR method)
            let ans = 0, N= A.length;
            for(let i=0;i<N;i++){
                ans = ans ^ Number(A[i]);
            }
            return Number(ans);

            // Approach - 2 (using Bit manipulation - easy testcase passed only )
            function checkBit(A, B) {
                if((BigInt(A) & BigInt(1 << B)) == 0) return 0 
                    else return 1;
            }
            
            let ans = 0, N = A.length;
            for(let i=0;i<31;i++) {
                let count = 0;
                for(let j=0;j<N;j++) {
                    if(checkBit(A[j], i)) {
                        count++;
                    }
                }
                if(count & 1) { // means count is odd
                    ans = ans | (1<<i); // adding ith bit in ans.(set a bit through this operation)
                }
            }
            return ans;

            // using Binary Search method
            let N = A.length;
            let low = 0;
            let high = N-1;
            let mid = 0;

            if(N == 1) return A[0];
            if(A[0] != A[1]) return A[0];
            if(A[N-2] != A[N-1]) return A[N-1];

            while(low <= high) {
                mid = Math.floor(low + (high - low)/2);
                /*if A[mid] is not equal to adjecent elements then return A[mid] */
                if(A[mid] != A[mid-1] && A[mid] != A[mid+1]) return A[mid];
                /*find the first occurancce of A[mid] */
                if(A[mid] ==  A[mid-1]) mid = mid - 1;
                /*if first occurancce is even then unique element is not present yet
                as it would have disturbed the indexing of first element to odd
                hence search in the second part */
                if(mid % 2 == 0) low = mid + 2;
                /*if first occurence is odd it means the unique element is alrady present in the
                first part and it has alrady disturbed the indexing of first occurance to odd
                Hence search in first part */
                else high = mid - 1;
            }
            return A[mid];
        }
    };

Ques-5 -> (Matrix Search)

# Problem Description -
    Given a matrix of integers A of size N x M and an integer B. Write an efficient algorithm that searches for integer B in matrix A.
    This matrix A has the following properties:
    Integers in each row are sorted from left to right.
    The first integer of each row is greater than or equal to the last integer of the previous row.
    Return 1 if B is present in A, else return 0.
    NOTE: Rows are numbered from top to bottom, and columns are from left to right.

# Problem Constraints -
    1 <= N, M <= 1000
    1 <= A[i][j], B <= 106

# Solution -
    module.exports = { 
    //param A : array of array of integers
    //param B : integer
    //return an integer
        searchMatrix : function(A, B){
            // Approach -1 (Brute Force Approach)
            let N = A.length;
            let M = A[0].length;

            for(let i=0;i<N;i++) {
                for(j=0;j<M;j++) {
                    if(A[i][j] == B) return 1;
                }
            }
            return 0;
            
            // Optimized Approach
            let N = A.length;
            let M = A[0].length;
            let low = 0;
            let mid = 0;
            let high = N*M-1;

            while(low <= high) {
                mid = Math.floor(low + (high-low)/2);
                let i = Math.floor(mid / M);
                let j = mid % M;

                if(A[i][j] == B) return 1;
                if(A[i][j] > B) high = mid-1;
                else low = mid + 1;
            }
            return 0;

        }
    };

Ques-6 -> (Minimum Difference)

# Problem Description -
    You are given a 2-D matrix C of size A Ã— B.
    You need to build a new 1-D array of size A by taking one element from each row of the 2-D matrix in such a way that the cost of the newly built array is minimized.
    The cost of an array is the minimum possible value of the absolute difference between any two adjacent elements of the array.
    So if the newly built array is X, the element picked from row 1 will become X[1], element picked from row 2 will become X[2], and so on.
    Determine the minimum cost of the newly built array.

# Problem Constraints -
    2 <= A <= 1000
    2 <= B <= 1000
    1 <= C[i][j] <= 106

# Solution -
    module.exports = { 
    //param A : integer
    //param B : integer
    //param C : array of array of integers
    //return an integer
        solve : function(A, B, C){
            // Sort each row of the C
            for(let i=0;i<A;i++) {
                C[i].sort((a,b) => a-b);
            }

            let ans = Infinity;
            // iterate over each row except last one
            for(let i=0;i<A-1;i++) {
                for(let j=0;j<B;j++) {
                    const nextRow = C[i+1];
                    const lowerBound = lowerBoundOfNextRow(nextRow, C[i][j]);
                    const uppeBound = upperBoundOfNextRow(nextRow, C[i][j]);

                    //update ans
                    ans = Math.min(
                        ans, 
                        Math.min(
                            Math.abs(uppeBound-C[i][j]),
                            Math.abs(C[i][j]-lowerBound)
                        )
                    );
                }
            }   
            return ans;
            // Function to find the lower bound in the next row
            function lowerBoundOfNextRow(row, target) {
                let low = 0, high = row.length-1, mid = 0;
                let ans = Infinity;
                while(low <= high) {
                    mid = Math.floor(low + (high-low)/2);
                    if(row[mid] >= target) {
                        ans = row[mid];
                        high = mid - 1;
                    }
                    else low = mid + 1;
                }
                return ans;
            }
            // Function to find the upper bound in the next row
            function upperBoundOfNextRow(row, target) {
                let low = 0, high = row.length-1, mid = 0;
                let ans = -Infinity;
                while(low <= high) {
                    mid = Math.floor(low + (high-low)/2);
                    if(row[mid] <= target) {
                        ans = row[mid];
                        low = mid + 1;
                    }
                    else high = mid - 1;
                }
                return ans;
            }
        }
    };


Ques-7 -> (Maximum height of staircase)

# Problem Description -
    Given an integer A representing the number of square blocks. The height of each square block is 1. The task is to create a staircase of max-height using these blocks.
    The first stair would require only one block, and the second stair would require two blocks, and so on.
    Find and return the maximum height of the staircase.

# Problem Constraints -
    0 <= A <= 109

# Solution -
    module.exports = { 
    //param A : integer
    //return an integer
        solve : function(A){
            let low = 1;
            let high = A;
            let mid = 0;
            let steps = 0;
            let ans = 0;

            while(low <= high){
                mid = Math.floor(low + (high-low)/2);
                steps = (mid*(mid+1))/2;

                if(steps > A) high=mid-1;
                else if(steps < A) {
                    ans = mid;
                    low = mid+1;
                }
            //    else return mid;
            else {
                ans = mid;
                break;
            } ;
            }
            return ans;

            // Another approach
            let ans=0, sum=0;
            for(let i=1;i<=A;i++){
                ans=i;
                sum=sum+ans;
                if(sum>A){
                    ans=i-1;
                    break;
                }
            }
            return ans;
        }
    };