Ques-1 --> (Benjamin and XOR)

# Problem Description -
    In the picturesque town of Bitville, nestled amidst rolling hills and shimmering lakes, the residents had a deep fascination with the world of bits and binary operations. The townsfolk were avid mathematicians, always seeking new puzzles to unravel and insights to gain. 
    One sunny morning, the town's esteemed professor of mathematics, Dr. Benjamin, presented a captivating challenge to his students. He introduced them to an array A of N  integers, representing a sequence of numbers with each element holding a special significance.
    Dr. Benjamin explained that the students' task was to analyze the array and determine the count of pairs that satisfied a unique condition. The condition revolved around the XOR operation on the ith bit of the pair's elements. The goal was to 
    count the pairs  for which the xor  of the  ith bit  resulted in one. You have to answer for Q queries given in array B, each query denotes the index for which you need to find the count of pairs with xor of that index equals 1.Can you solve the task given by Dr. Benjamin?
    Please read the examples given below for better understanding of the problem.

#Problem Constraints -
    1 <= N <= 4 * 10^4
    1 <= A[i] <= 10^9
    1 <= Q <= 100

# Solution -
    module.exports = { 
    //param A : array of integers
    //param B : array of integers
    //return a array of integers
        solve : function(A, B){
            function checkBit(a, b) {
                if((a & (1<<b)) != 0) {
                    return true;
                }
                return false;
            }
            let N = B.length;
            let M = A.length;
            
            let result = [];
            
            for(let i=0;i<N;i++) {
                let countOne = 0;
                let countZero = 0;
                //const queryIndex = B[i];
                for(let j=0;j<M;j++){
                    if(checkBit(A[j], B[i])) {
                        countOne++;
                    } else {
                        countZero++;
                    }
                }
                result.push(countZero * countOne);
            }
            return result;
        }
    }

Ques-2 --> (Chef and Cooking)


# Problem Description -
    In a parallel universe, there exist a kingdom that is known for its unique way of cooking. In this kingdom, there is a famous chef who is known for her delicious dishes. One day, the chef decided to create a new dish that consists of a sequence of ingredients. Each ingredient has a distinct weight, and the chef wants to choose a subarray of ingredients that have an increasing weight.
    The chef wants to know the maximum possible sum of the weights of the ascending subarray she can choose. Can you help the chef by writing a function that returns the maximum possible sum of an ascending subarray in the weights of ingredients?
    The array of ingredients is represented by the array A.

#Problem Constraints -
    1 <= |A| <= 10^4
    1 <= A[i] <= 10^9

# Solution -
    module.exports = { 
    //param A : array of integers
    //return a long integers
        solve : function(A){
            // Brute Force idea - Not work for bigger Array(hard test case failed)
            let N = A.length;
            let ans = -Infinity;
            
            A = A.sort((a, b) => a-b);
            
            for(let i=0;i<N;i++) {
                let count = 0;
                for(let j=i;j<N;j++) {
                    count += A[j];
                    ans = Math.max(ans, count)
                }
            }
            return ans;
            
            //Approach - 2(Kadane's Algorithm)
            let currentSum = A[0], maxSum = A[0], N = A.length;
            
            for(let i=1;i<N;i++) {
                if(A[i-1] < A[i]) {
                    currentSum += A[i];
                } else {
                    currentSum = A[i];
                }
                maxSum = Math.max(currentSum, maxSum);
            }
            return Math.max(currentSum, maxSum);
        }
    };

Ques-3 --> (Rain Water Trapped)

# Problem Description -
    Given a vector A of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

# Problem Constraints -
    1 <= |A| <= 100000

# Solution -
    module.exports = { 
    //param A : array of integers
    //return an integer
        trap : function(A){
            // Approach - 1
            let N = A.length;
            let pfLeft = [A[0]];
            let pfRight = [];
            pfRight[N-1] = A[N-1];
            let ans = 0;
            
            for(let i=1;i<N;i++) {
                pfLeft[i] = Math.max(A[i], pfLeft[i-1]);
            }
            for(let i=N-2;i>=0;i--) {
                pfRight[i] = Math.max(A[i], pfRight[i+1]);
            }
            
            for(let i=0;i<N;i++) {
                ans += Math.max(Math.min(pfLeft[i], pfRight[i])-A[i], 0);
            }
            return ans;
            
            // Approach - 2
            let maxLeft = A[0], maxRight = A[A.length-1], left = 0, right = A.length-1;
            let ans = 0;
            
            while(left <= right) {
                if(A[left] <= A[right]) {
                    if(A[left] >= maxLeft) {
                        maxLeft = A[left]
                    }
                    else {
                        ans += maxLeft - A[left];
                    }
                    left++;
                } else {
                    if(A[right] >= maxRight) {
                        maxRight = A[right];
                    } 
                    else {
                        ans += maxRight - A[right];
                    }
                    right--;
                }
            }
            return ans;
        }
    };
