Ques-1 -> (Pair Sum divisible by M)

# Problem Description -
    Given an array of integers A and an integer B, find and return the number of pairs in A whose sum is divisible by B.
    Since the answer may be large, return the answer modulo (109 + 7).
    Note: Ensure to handle integer overflow when performing the calculations.

# Problem Constraints -
    1 <= length of the array <= 100000
    1 <= A[i] <= 10^9
    1 <= B <= 10^6

# Solution -
    module.exports = { 
    //param A : array of integers
    //param B : integer
    //return an integer
        solve : function(A, B){
            // let N = A.length, count = 0, mod = Math.pow(10,9) + 7;
            // for(let i=0;i<N;i++){
            //     for(let j=i+1;j<N;j++) {
            //         if(((A[i]% mod+A[j]% mod)% mod) % B == 0) {
            //             count++;
            //         }
            //     }
            // }
            // return count%mod;
            
            // hard test case not passed with this methody

            const hMap = new Map();
            const N = A.length;
            let X;
            let MOD = Math.pow(10, 9) + 7;

            for(let i=0;i<N;i++) {
                if(hMap.has(A[i] % B)) {
                    hMap.set((A[i] % B), hMap.get(A[i] % B) + 1);
                } else {
                    hMap.set((A[i] % B), 1);
                }
            }

            // for pair of 0
            let count = 0;
            // if(hMap.has(hMap.get(0))){
            if(hMap.has(0)){
                X = hMap.get(0);
                count = ((count % MOD) + X*(X-1)/2)% MOD;
            }

            // if(B%2 == 0) {
            if(B%2 == 0 && hMap.has(B/2)) {
                X = hMap.get(B/2);
                count = (count + X*(X-1)/2)% MOD;
            }
            // for(let i=0;i<(B+1)/2;i++) {
            //     count = (count + hMap.get(i) * hMap.get(B-i))% MOD;
            // }
            for (let i = 1; i < B; i++) {
                const j = B - i;
                if (i < j && hMap.has(i) && hMap.has(j)) {
                    count = (count + (hMap.get(i) * hMap.get(j)) % MOD) % MOD;
                }
            }
            return (count % MOD + MOD)% MOD;
        }
    };

Ques-2 -> (Greatest Common Divisor)

# Problem Description -
    Given 2 non-negative integers A and B, find gcd(A, B)
    GCD of 2 integers A and B is defined as the greatest integer 'g' such that 'g' is a divisor of both A and B. Both A and B fit in a 32 bit signed integer.
    Note: DO NOT USE LIBRARY FUNCTIONS.

# Problem Constraints -
    0 <= A, B <= 10^9

# Solution -
    module.exports = { 
    //param A : integer
    //param B : integer
    //return an integer
        gcd : function(A, B){
            if(B == 0) return A;
            return this.gcd(B, A%B);
        }
    };

Ques-3 -> (Delete one)

# Problem Description -
    Given an integer array A of size N. You have to delete one element such that the GCD(Greatest common divisor) of the remaining array is maximum.
    Find the maximum value of GCD.

# Problem Constraints -
    2 <= N <= 105
    1 <= A[i] <= 109

# Solution -
    module.exports = { 
    //param A : array of integers
    //return an integer
        solve : function(A){
            // Brute Force
            const gcd = (A, B) => {
                if(B == 0) return A;
                return gcd(B, A%B);
            }
            let N = A.length;
            let maxGCD = 0;
            for(let i=0;i<N;i++) {
                let currGCD = 0;
                for(let j=0;j<N;j++) {
                    if(i!=j) {
                        if(currGCD == 0) {
                            currGCD = A[j];
                        } else {
                            currGCD = gcd(currGCD, A[j]);
                        }
                    }
                }
                maxGCD = Math.max(maxGCD, currGCD);
            }
            return maxGCD;

            // Prefix, suffix Array method

            const gcd = (A, B) => {
                if(B == 0) return A;
                return gcd(B, A%B);
            }
            
            let N = A.length, left=0, right=0, gcdVal;
            let pfGCD = [A[0]];
            let sfGCD = [];
            sfGCD[N-1] = A[N-1];

            for(let i=1;i<N;i++) {
                pfGCD[i] = gcd(pfGCD[i-1], A[i]);
            }

            for(let i=N-2;i>=0;i--) {
                sfGCD[i] = gcd(sfGCD[i+1], A[i]);
            }

            let ans=Math.max(sfGCD[1], pfGCD[N-2]);

            // deleting ith element
            for(let i=1;i<N-1;i++) {
                left = pfGCD[i-1];
                right = sfGCD[i+1];
                gcdVal = gcd(left, right);
                ans = Math.max(ans, gcdVal);
            }

            return ans;
        }
    };

Ques-4 -> (A, B and Modulo)

# Problem Description -
    Given two integers A and B, find the greatest possible positive integer M, such that A % M = B % M.

# Problem Constraints -
    1 <= A, B <= 109
    A != B

# Solution -
    module.exports = { 
    //param A : integer
    //param B : integer
    //return an integer
        solve : function(A, B){
            if(A>B) M = Math.abs(A-B);
            else if(A<B) M = Math.abs(B-A);
            else M = A;

            return M;
        }
    };

Ques-5 -> (Mod Sum)

# Problem Description -
    Given an array of integers A, calculate the sum of A [ i ] % A [ j ] for all possible i, j pairs. Return sum % (109 + 7) as an output.

# Problem Constraints -
    1 <= length of the array A <= 105
    1 <= A[i] <= 10^3

# Solution -
    module.exports = { 
    //param A : array of integers
    //return an integer
        solve : function(A){
            // Brute Force approach

            let N = A.length, sum = 0, mod = Math.pow(10, 9) + 7;
            for(let i=0;i<N;i++) {
                for(let j=0;j<N;j++) {
                    sum += (A[i] % A[j]) % mod;
                }
            }
            return sum % mod;

            let hmMap = new Map();
            let result = 0;
            let N = A.length;
            let mod = Math.pow(10, 9) + 7;

            for(let i=0;i<N;i++) {
                if(hmMap.has(A[i])) {
                    hmMap.set(A[i], hmMap.get(A[i]) + 1);
                } else {
                    hmMap.set(A[i], 1);
                }
            }
            
            for(let [key_i, value_i] of hmMap) {
                for(let [key_j, value_j] of hmMap) {
                    if(key_i != key_j) {
                        result = (result + ((key_i % key_j) * value_i * value_j)) % mod
                    }
                }
            }
            return result;
        }
    };

Ques-6 -> (Largest Coprime Divisor)

# Problem Description -
    You are given two positive numbers A and B . You need to find the maximum valued integer X such that:
    X divides A i.e. A % X = 0
    X and B are co-prime i.e. gcd(X, B) = 1

# Problem Constraints -
    1 <= A, B <= 10^9

# Solution -
    module.exports = { 
    //param A : integer
    //param B : integer
    //return an integer
        cpFact : function(A, B){
            const gcd = (a,b) => {
                if(b==0) return a;
                return gcd(b, a%b);
            }

            while(gcd(A, B) != 1) {
                A = A/gcd(A,B);
            }
            return A;
        }
    };

Ques-7 -> (Divisor game)

# Problem Description -
    Scooby has 3 three integers A, B, and C.
    Scooby calls a positive integer special if it is divisible by B and it is divisible by C. You need to tell the number of special integers less than or equal to A.

# Problem Constraints -
    1 <= A, B, C <= 10^9

# Solution -
    module.exports = { 
    //param A : integer
    //param B : integer
    //param C : integer
    //return an integer
        solve : function(A, B, C){
            // Approach -1(Brute Force - Hard test case failed)

            let result = [];
            for(let i=1;i<=A;i++) {
                if(i % B == 0 && i % C == 0) {
                    result.push(i);
                }
            }
            return result.length;

            // Approach -2
            const gcd = (a, b) => {
                if(b==0) return a;
                while(b != 0) {
                    [a, b] = [b, a%b];
                }
                return a;
            }
            const LCM = (a, b) => a * b/gcd(a, b);
            let lCMOfBC = LCM(B, C);
            const result = Math.floor(A/lCMOfBC);
            return result;
        }
    };
