Ques-1 -> (Count of divisors)

# Problem Description -
    Given an array of integers A, find and return the count of divisors of each element of the array.
    NOTE: The order of the resultant array should be the same as the input array.

# Problem Constraints -
    1 <= length of the array <= 100000
    1 <= A[i] <= 10^6

# Solution -
    module.exports = { 
    //param A : array of integers
    //return a array of integers
        solve : function(A){
            /* Finding max value in the array */ 
            let max = -Infinity;
            for(let i=0;i<A.length;i++) {
                if(A[i]>max) max = A[i];
            }

            /* creating a new array having element from 0 to max element */ 
            const spfArr = [];
            for(let i=0;i<=max;i++) {
                spfArr[i] = i;
            }

            /* create a smallest prime factor(spf)/divisor of each element */
            for(let i=2;i*i<=max;i++) {
                if(spfArr[i] == i) {
                    for(let j=i*i;j<=max;j+=i) {
                        if(spfArr[j] == j) {
                            spfArr[j] = i;
                        }
                    }
                }
            }

            let result = [];
            let k = 0;
            /* finding the factor count */
            // factor count for 48 = 2^4 * 3^1 => (power+1)*(power+1)
            // so, number of factor count of 48 => 10

            for(let i=0;i<A.length;i++) {
                let x = A[i];
                // create a new hashmap
                const hashMap = new Map();
                // store the count of factors in hashmap
                while(x>1) {
                    if(hashMap.has(spfArr[x])) {
                        hashMap.set(spfArr[x], hashMap.get(spfArr[x])+1);
                    } else {
                        hashMap.set(spfArr[x], 1);
                    }
                    x = x/spfArr[x];
                }
                // calculate the total no of factors and store it in array.
                let sum = 1;
                for(let [item,value] of hashMap.entries()) {
                    sum *=(value+1);
                }
                result[k] = sum;
                k++;
            }
            // printing the resultant array
            return result;
        }
    };


Ques-2 -> (Number Of Open Doors)

# Problem Description -
    Given an integer A, which denotes the number of doors in a row numbered 1 to A. All the doors are closed initially.
    A person moves to and fro, changing the states of the doors as follows: the person opens a door that is already closed and closes a door that is already opened.
    In the first go, he/she alters the states of doors numbered 1, 2, 3, … , A.
    In the second go, he/she alters the states of doors numbered 2, 4, 6 ….
    In the third go, he/she alters the states of doors numbered 3, 6, 9 …
    This continues till the A'th go in, which you alter the state of the door numbered A.
    Find and return the number of open doors at the end of the procedure.

# Problem Constraints -
    1 <= A <= 10^9

# Solution -
    module.exports = { 
    //param A : integer
    //return an integer
        solve : function(A){
            // 1 means open 
            // 0 means close 
            let count = 0;

            for (let i = 1; i*i <= A; i++) {
                count++;
            }
            return count;
        }   
    };


Ques-3 -> (Find All Primes)

# Problem Description -
    Given an integer A. Find the list of all prime numbers in the range [1, A].

# Problem Constraints -
    1 <= A <= 106

# Solution -
    module.exports = { 
    //param A : integer
    //return a array of integers
        solve : function(A){
            // Brute Force Approach

            // check prime number
            const checkPrime = (n) => {
                let count = 0;
                for(let i=1;i <= Math.sqrt(n);i++) {
                    if(n % i == 0) {
                        if(i*i == n)  count += 1;
                        else count += 2; 
                    }
                }
                if(count == 2) return true;
                else return false;
            }

            let totalPrime = [];
            for(let i=2;i<=A;i++) {
                if(checkPrime(i)) {
                    totalPrime.push(i);
                }
            }
            return totalPrime;

            // Optimize Approach - 1
            let result = [];
            function getAllPrimes(A) {
                const arr = [];
                for(let i=0;i<A+1;i++) {
                    arr.push(1);
                }
                arr[0] = arr[1] = 0;
                for(let i=2;i<=A;i++) {
                    if(arr[i] == 1) {
                        for(let j=2*i;j<=A;j+=i) {
                            arr[j] = 0;
                        }
                    }
                }
                return arr;
            }
            let primeNumbers = getAllPrimes(A);
            for(let i = 2; i <= A; i++) {
                if(primeNumbers[i] == 1) {
                    result.push(i);
                }
            }
            return result;

            // Optimize Approach - 2(Seive of Eratosthenes)
            let result = [];
            function getAllPrimes(A) {
                const arr = new Array(A+1).fill(1);
                arr[0] = arr[1] = 0;
                for(let i=2;i*i<=A;i++) {
                    if(arr[i] == 1) {
                        for(let j=i*i;j<=A;j+=i) {
                            arr[j] = 0;
                        }
                    }
                }
                return arr;
            }
            let primeNumbers = getAllPrimes(A);
            for(let i = 2; i <= A; i++) {
                if(primeNumbers[i] == 1) {
                    result.push(i);
                }
            }
            return result;
        }
    };

Ques-4 -> (Factorial Array)

# Problem Description -
    Groot has an array A of size N. However, seeking excitement, Groot embarked on constructing an equally-sized array B with a unique definition for each of its elements:
    B[i] = factorial of A[i] for every i such that 1<= i <= N.
    Now Groot is interested in the total number of non-empty subsequences of array B such that every element in the subsequence has the same non-empty set of prime factors.
    Since the number can be huge, return it modulo 109 + 7.
    NOTE:
    Factorial of a number X denotes (1 x 2 x 3 x 4......(X-1) x (X)).
    A set is a data structure having only distinct elements. E.g : the set of prime factors of Y=12 will be {2,3} and not {2,2,3}

# Problem Constraints -
    1 <= N <= 105
    1 <= A[i] <= 106

# Solution -
    module.exports = { 
    //param A : array of integers
    //return an integer
        solve : function(A){
            A.sort((a, b) => a-b);
            let primeArray = new Array(A[A.length-1]+1).fill(1);
            primeArray[0] = primeArray[1] = 0;
            for (let i=2; i*i <= A[A.length-1]; i++) {
                if(primeArray[i]) {
                    for(let j=i*i;j<=A[A.length-1];j+=i) {
                        primeArray[j] = 0;
                    }
                }
            }

            let N = A.length;
            let B = [];
            for(let i=2;i<=A[N-1];i++) {
                if(primeArray[i]) {
                    B.push(i);
                }
            }
            let j = 0;
            while(A[j] < 2) {
                j++;
            }
            let ans = 0;
            for(let i=0;i<B.length-1;i++) {
                let left = B[i];
                let right = B[i+1];
                let primeCount = 0;
                while(j<A.length) {
                    if(A[j] >= left && A[j] < right) primeCount++;
                    else break;
                    j++;
                }
                ans += (Math.pow(2, primeCount)-1)
            }
            ans += (Math.pow(2, A.length-j))-1;
            return ans % 100000007;
        }
    };

Ques-5 -> (Prime Sum)

# Problem Description -
    Given an even number A ( greater than 2 ), return two prime numbers whose sum will be equal to the given number.
    If there is more than one solution possible, return the lexicographically smaller solution.
    If [a, b] is one solution with a <= b, and [c,d] is another solution with c <= d, then 
    [a, b] < [c, d], If a < c OR a==c AND b < d. 
    NOTE: A solution will always exist. Read Goldbach's conjecture.

# Problem Constraints -
    4 <= A <= 2*10^7

# Solution -
    module.exports = { 
    //param A : integer
    //return a array of integers
        primesum : function(A){
            const spfArr = new Array(A + 1).fill(1);
            spfArr[0] = spfArr[1] = 0;
            
            for(let i=2;i*i<=A;i++) {
                if(spfArr[i] == 1) {
                    for(let j=i*i;j<=A;j+=i) {
                        spfArr[j] = 0;
                    }
                }
            }

            let result = [];
            for(let i=2;i<=A;i++) {
                if (spfArr[i] === 1 && spfArr[A-i] === 1) {
                    result.push(i);
                    result.push(A-i);
                    break;
                }
            }
            return result;

        }
    };

Ques-6 -> (Lucky Numbers)

# Problem Description -
    A lucky number is a number that has exactly 2 distinct prime divisors.
    You are given a number A, and you need to determine the count of lucky numbers between the range 1 to A (both inclusive).

# Problem Constraints -
    1 <= A <= 50000

# Solution -
    module.exports = { 
    //param A : integer
    //return an integer
        solve : function(A){
            const spfArr = new Array(A+1).fill(1);
            spfArr[0] = spfArr[1] = 0;
            for(let i=2;i<=A;i++) {
                spfArr[i] = i;
            }
            /* create a smallest prime factor(spf)/divisor of each element */
            for(let i=2;i*i<=A;i++) {
                if(spfArr[i] == i) {
                    for(let j=i*i;j<=A;j+=i) {
                        if(spfArr[j] == j) {
                            spfArr[j] = i;
                        }
                    }
                }
            }

            let sum = 0;
            const hashMap = new Map();
        // Finding count of array
            for(let i=2;i<spfArr.length;i++) {
                let x = spfArr[i];
                while(x>1) {
                    if(hashMap.has(spfArr[x])) hashMap.set(x, (hashMap.get(x)+1));
                    else hashMap.set(x, 1);
                    x=x/spfArr[x];
                }
                // if(hashMap.has(spfArr[spfArr[i]])) hashMap.set(spfArr[i], (hashMap.get(spfArr[i])+1));
                // else hashMap.set(spfArr[i], 1);
                // spfArr[i]=spfArr[i]/spfArr[spfArr[i]];
            }
            for(let i=1;i<=A;i++) {
                let count = 0;
                for(let [item, value] of hashMap.entries()) {
                    if(i%item == 0) {
                        count++;
                    }
                }
                if(count == 2) {
                    sum++;
                }
            }
            return sum;
        }
    };
