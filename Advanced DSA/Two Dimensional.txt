Ques-1 --> (Search in a row wise and column wise sorted matrix)

# Problem Description -
    Given a matrix of integers A of size N x M and an integer B.
    In the given matrix every row and column is sorted in non-decreasing order. Find and return the position of B in the matrix in the given form:
    If A[i][j] = B then return (i * 1009 + j)
    If B is not present return -1.

    Note 1: Rows are numbered from top to bottom and columns are numbered from left to right.
    Note 2: If there are multiple B in A then return the smallest value of i*1009 +j such that A[i][j]=B.
    Note 3: Expected time complexity is linear
    Note 4: Use 1-based indexing

# Problem Constraints-
    1 <= N, M <= 1000
    -100000 <= A[i] <= 100000
    -100000 <= B <= 100000

# Solution -
    module.exports = { 
    //param A : array of array of integers
    //param B : integer
    //return an integer
        solve : function(A, B){
            let N = A.length;
            let M = A[0].length;
            let i=0;
            let j=M-1;
            let ans = Infinity;
            while(i<N && j>=0) {
                if(A[i][j] == B) {
                    let ith_Index = i+1;
                    let jth_Index = j+1;
                    ans = Math.min(ans, (ith_Index*1009+jth_Index));
                    j--;
                } else if(A[i][j] <= B) {
                    i++;
                } else {
                    j--;
                }
            }
            if(ans == Infinity) return -1;
            return ans;
        }
    };

Ques-2 --> (Spiral Order Matrix II)

# Problem Description -
    Given an integer A, generate a square matrix filled with elements from 1 to A2 in spiral order and return the generated square matrix.

# Problem Constraints -
    1 <= A <= 1000

# Solution -
    module.exports = { 
    //param A : integer
    //return a array of array of integers
        generateMatrix : function(A){
            let ans = [];
            d=0;
            while(d<A) {
                ans[d] = [];
                d++;
            }

            let i=0, j=0, count=0;
            while(A>1) {
                for(let k=0;k<A-1;k++) {
                    count++;
                    ans[i][j] = count;
                    j++;
                }
                for(let k=0;k<A-1;k++) {
                    count++;
                    ans[i][j] = count;
                    i++;
                }
                for(let k=0;k<A-1;k++) {
                    count++;
                    ans[i][j] = count;
                    j--;
                }
                for(let k=0;k<A-1;k++) {
                    count++;
                    ans[i][j] = count;
                    i--;
                }
                i++;
                j++;
                A -=2;
            }
            if(A==1) {
                count++;
                ans[i][j] = count;
            }
            return ans;
        }
    };

Ques-3 --> (Row to Column Zero)

# Problem Description -
    You are given a 2D integer matrix A, make all the elements in a row or column zero if the A[i][j] = 0. Specifically, make entire ith row and jth column zero.

# Problem Constraints -
    1 <= A.size() <= 103
    1 <= A[i].size() <= 103
    0 <= A[i][j] <= 103

# Solution -
    module.exports = { 
    //param A : array of array of integers
    //return a array of array of integers
        solve : function(A){
            // Approach - 1
            let N = A.length;
            let M = A[0].length;
            for(let i=0;i<N;i++) {
                for(let k=0;k<M;k++) {
                    if(A[i][k] == 0) {
                        let j = k-1;
                        while(j>=0) {
                            A[i][j] = (A[i][j] == 0) ? 0: -1;
                            j--;
                        }
                        j=k+1;
                        while(j<M) {
                            A[i][j] = (A[i][j] == 0) ? 0: -1;
                            j++;
                        }
                        j=i-1;
                        while(j>=0) {
                            A[j][k] = (A[j][k] == 0) ? 0: -1;
                            j--;
                        }
                        j=i+1;
                        while(j<N) {
                            A[j][k] = (A[j][k] == 0) ? 0: -1;
                            j++;
                        }
                    }
                }
            }
            for(let m=0;m<N;m++) {
                for(let p=0;p<M;p++) {
                    if(A[m][p] === -1) {
                        A[m][p] = 0;
                    }
                }
            }
            return A;
            // Approach - 2
            let row = A.length;
            let col = A[0].length;
            let zeroRow = new Set();
            let zeroCol = new Set();

            for(let i=0;i<row;i++) {
                for(let j=0;j<col;j++) {
                    if(A[i][j] == 0) {
                        zeroRow.add(i);
                        zeroCol.add(j);
                    }
                }
            }

            for(let i=0;i<row;i++) {
                for(let j=0;j<col;j++) {
                    if(zeroRow.has(i) || zeroCol.has(j)) {
                        A[i][j] = 0;
                    }
                }
            }
            return A;
        }
    };

Ques-4 --> (Minimum Swaps)

# Problem Description -
    Given an array of integers A and an integer B, find and return the minimum number of swaps required to bring all the numbers less than or equal to B together.
    Note: It is possible to swap any two elements, not necessarily consecutive.

# Problem Constraints -
    1 <= length of the array <= 100000
    -109 <= A[i], B <= 109

# Solution -
    module.exports = { 
    //param A : array of integers
    //param B : integer
    //return an integer
        solve : function(A, B){
            let N = A.length;
            let i=0, j=N;
            let swapcount=0;

            if(N<=1) return 0;
            while(i<j) {
                if(A[i] <= B) swapcount++;
                i++;
            }
            let L = 0;
            let M = swapcount-1;
            let countR = 0;
            for(let Op = L;Op<=M;Op++) {
                if(A[Op] > B) countR++;
            }

            L++;
            M++;
            let ans = countR;
            while(M<N) {
                if(A[M] > B) countR++;
                if(A[L-1] > B) countR--;
                ans = Math.min(ans, countR);
                L++;
                M++;    
            }
            return ans;
        }
    };

Ques-5 --> (Row with maximum number of ones)

# Problem Description -
    Given a binary sorted matrix A of size N x N. Find the row with the maximum number of 1.
    NOTE:
    If two rows have the maximum number of 1 then return the row which has a lower index.
    Rows are numbered from top to bottom and columns are numbered from left to right.
    Assume 0-based indexing.
    Assume each row to be sorted by values.
    Expected time complexity is O(rows + columns).


# Problem Constraints -
    1 <= N <= 1000
    0 <= A[i] <= 1

# Solution -
    module.exports = { 
    //param A : array of array of integers
    //return an integer
        solve : function(A){
            let rows = A.length;
            let column = A[0].length;
            let i=0;
            let j=column-1;
            let index = -1;
            while(i<rows && j>=0) {
                while(A[i][j] == 1 && j>=0) {
                    index = i;
                    j--;
                }
                i++;
            }
            return index;
        }
    };
