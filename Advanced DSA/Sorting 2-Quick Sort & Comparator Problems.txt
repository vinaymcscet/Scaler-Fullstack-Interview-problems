Ques-1 -> (Factors sort)

# Problem Description -
    You are given an array A of N elements. Sort the given array in increasing order of number of distinct factors of each element, i.e., element having the least number of factors should be the first to be displayed and the number having highest number of factors should be the last one. If 2 elements have same number of factors, then number with less value should come first.
    Note: You cannot use any extra space

# Problem Constraints -
    1 <= N <= 104
    1 <= A[i] <= 104

# Solution -
    module.exports = { 
    //param A : array of integers
    //return a array of integers
        solve : function(A){
            function getFactors(number) {
                n = Number(number);
                let count = 0;
                for(let i = 1; i <= Math.sqrt(n); i++ ){
                    if(n % i == 0){
                        if(n/i == i){
                            count++;
                        } else{
                            count += 2;
                        }
                    }
                }
                return count;
            }
            A.sort(function(a,b){
                let c = getFactors(a);
                let d = getFactors(b);
                if(c == d){
                    if(a < b) return -1;
                    else if(a > b) return 1;
                    else return 0;
                }
                else if(c < d) return -1;
                else return 1;
            })
            return A;
        }
    };

Ques-2 -> (Largest Number)

# Problem Description -
    Given an array A of non-negative integers, arrange them such that they form the largest number.
    Note: The result may be very large, so you need to return a string instead of an integer.

# Problem Constraints -
    1 <= len(A) <= 100000
    0 <= A[i] <= 2*109

# Solution -
    module.exports = { 
    //param A : array of integers
    //return a strings
        largestNumber : function(A){
            A.sort((a, b) => {
                const num1 = `${a}${b}`;
                const num2 = `${b}${a}`;
                return num2.localeCompare(num1);
            });
            if(A[0] == 0) return 0;
            return A.join("");

            A.sort((a, b) => {
                if(a +""+ b > b +""+ a) return -1;
                else return 1; 
            });
            let str = "";
            A.forEach(elem => str += elem);
            if(A[0] == '0') return 0;
            return str;
        }
    };

Ques-3 -> (B Closest Points to Origin)

# Problem Description -
    We have a list A of points (x, y) on the plane. Find the B closest points to the origin (0, 0).
    Here, the distance between two points on a plane is the Euclidean distance.
    You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in.)
    NOTE: Euclidean distance between two points P1(x1, y1) and P2(x2, y2) is sqrt( (x1-x2)2 + (y1-y2)2 ).

# Problem Constraints -
    1 <= B <= length of the list A <= 105
    -105 <= A[i][0] <= 105
    -105 <= A[i][1] <= 105

# Solution -
    class Pair {
        constructor(first, second) {
            this.first = first;
            this.second = second;
        }
    }
    module.exports = { 
    //param A : array of array of integers
    //param B : integer
    //return a array of array of integers
        solve : function(A, B){
                A.sort((a,b) => ((a[0]**2)+(a[1]**2)) - ((b[0]**2)+(b[1]**2)))
                return A.slice(0, B);

                A.sort((a, b) => {
                    let x1 = a[0];
                    let x2 = a[1];
                    let y1 = b[0];
                    let y2 = b[1];

                    let dist1 = x1*x1 + x2*x2;
                    let dist2 = y1*y1 + y2*y2;
                    return dist1 - dist2;
                });
                let ans = [];
                for(let i=0;i<B;i++) {
                    ans.push(A[i]);
                }
                return ans;
                
                let N = A.length, pairObj;
                let pairs = [];
                for(let i=0;i<N;i++) {
                    pairObj = new Pair(A[i][0], A[i][1]);
                    pairs.push(pairObj);
                }
                pairs.sort((a, b) => {
                    let dist1 = a.first * a.first + a.second * a.second;
                    let dist2 = b.first * b.first + b.second  * b.second;
                    return dist1 - dist2;
                });
                let ans = [];
                for(let i=0;i<B;i++) {
                    ans.push([pairs[i].first, pairs[i].second]);
                }
                return ans;
        }
    };

Ques-4 -> (Wave Array)

# Problem Description -
    Given an array of integers A, sort the array into a wave-like array and return it.
    In other words, arrange the elements into a sequence such that
    a1 >= a2 <= a3 >= a4 <= a5..... 
    NOTE: If multiple answers are possible, return the lexicographically smallest one.

# Problem Constraints -
    1 <= len(A) <= 106
    0 <= A[i] <= 106

# Solution -
    module.exports = { 
    //param A : array of integers
    //return a array of integers
        wave : function(A){
            let N = A.length;
            A.sort((a, b) => a-b);

            // for wave like structure - just swap elements and increase ith count by 2.
            for(let i=0;i<N-1;i+=2) {
                let temp = A[i];
                A[i] = A[i+1];
                A[i+1] = temp;
            }
            return A;
        }
    };

Ques-5 -> (Tens Digit Sorting)

# Problem Description -
    Given an array A of N integers. Sort the array in increasing order of the value at the tens place digit of every number.
    If a number has no tens digit, we can assume value to be 0.
    If 2 numbers have same tens digit, in that case number with max value will come first
    Solution should be based on comparator.

# Problem Constraints -
    1 <= N <= 105
    1 <= A[i] <= 109

# Solution -
    module.exports = { 
    //param A : array of integers
    //return a array of integers
        solve : function(A){
                A.sort((a, b) => {
                    let tensOfA = Math.floor((Number(a)/10)%10);
                    let tensOfB = Math.floor((Number(b)/10)%10);
                    if(tensOfA == tensOfB) return Number(b) - Number(a)
                    return tensOfA - tensOfB;
                });
                return A;



            //let pairedArr = [];
            let N = A.length;
            let map = new Map();

            for(let i=0;i<N;i++) {
                let X = BigInt(A[i])/BigInt(10);
                if(map.has(A[i])) map.set(i+1, BigInt(X)%BigInt(10));
                else map.set(i, BigInt(X)%BigInt(10));
            }
            let arr = [];
            for(let [key, value] of map.entries()){
                arr.push([key, value]);
            }
            arr.sort((a, b) => {
                return Number(a[1] - b[1] || A[b[0]] - A[a[0]]);
            })
            const result = arr.map(item => A[item[0]]);
            return result;
        }
    };

Ques-6 -> (Sort by Color)

# Problem Description -
    Given an array with N objects colored red, white, or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
    We will represent the colors as,
    red -> 0
    white -> 1
    blue -> 2
    Note: Using the library sort function is not allowed.

# Problem Constraints -
    1 <= N <= 1000000
    0 <= A[i] <= 2

# Solution -
    module.exports = { 
    //param A : array of integers
    //return a array of integers
        sortColors : function(A){
            if(A.length == 1) return A;
            A.sort((a, b)=> {
                if(a == b) return 0;
                if(a>b) return 1;
                else return -1;
            });
            return A;
        }
    };

Ques-7 -> (complete quick sort question)

example => const arr = [5, 3, 7, 2, 8, 4, 1];
// quick_sort
function swap(arr, first, last) {
    let temp = arr[first];
    arr[first] = arr[last];
    arr[last] = temp;
}
function partition(arr, start, end) {
    let pivot = arr[start];
    let left = start+1;
    let right = end;
    while(left <= right) {
        while (left <= right && arr[left] <= pivot) left++;
        while(left <= right && arr[right] > pivot) right--;
        if (left < right) {
            swap(arr, left, right);
        }
    }
    swap(arr, start, right);
    return right;
}
function quick_sort(arr, start, end) {
    if(start < end) {
        let pivot_idx = partition(arr, start, end);
        let left = quick_sort(arr, start, pivot_idx - 1);
        let right = quick_sort(arr, pivot_idx+1, end);
    }
    return arr;
}
console.log(quick_sort(arr, 0 , arr.length-1));
