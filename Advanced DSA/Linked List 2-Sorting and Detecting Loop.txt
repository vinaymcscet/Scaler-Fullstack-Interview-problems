Ques-1 -> (Middle element of linked list) 

# Problem Description -
    Given a linked list of integers, find and return the middle element of the linked list.
    NOTE: If there are N nodes in the linked list and N is even then return the (N/2 + 1)th element.

# Problem Constraints -
    1 <= length of the linked list <= 100000
    1 <= Node value <= 109

# Solution - 
    // Definition for singly-linked list.
    //    function Node(data){
    //      this.data = data
    //      this.next = null
    //    }

    module.exports = { 
    //param A : head node of linked list
    //return an integer
        solve : function(A){
            // Approach - 1
            let temp = A;
            let N = 0;
            while(temp != null) {
                N++;
                temp = temp.next;
            }
            let midLen;
            if(N%2 == 0) midLen = Math.ceil((N+1)/2);
            else midLen = Math.ceil(N/2);

            // Reset temp to the head of the list
            temp = A;

            for(let i=0;i<midLen-1;i++) {
                temp = temp.next;
            }
            return temp.data;

            // // Approach - 2(using two-pointer - slow, fast pointer approach)
            if(A == null) return null;

            let slow = A;
            let fast = A;
            while (fast !== null && fast.next !== null) {
                slow = slow.next;
                fast = fast.next.next;
            }
            return slow.data;
        }
    };

Ques-2 -> (Merge Two Sorted Lists)

# Problem Description -
    Merge two sorted linked lists, A and B, and return it as a new list.
    The new list should be made by splicing together the nodes of the first two lists and should also be sorted.

# Problem Constraints -
    0 <= |A|, |B| <= 105

# Solution -
    // Definition for singly-linked list.
    //    function Node(data){
    //      this.data = data
    //      this.next = null
    //    }

    module.exports = { 
    //param A : head node of linked list
    //param B : head node of linked list
    //return the head node in the linked list
        mergeTwoLists : function(A, B){
            if(A == null) return B;
            if(B == null) return A;

            let head, temp;
            if(A.data < B.data) {
                head = A;
                temp = A;
                A = A.next;
            } else {
                head = B;
                temp = B;
                B = B.next;
            }
            while(A != null && B != null) {
                if(A.data < B.data){
                    temp.next = A;
                    A = A.next;
                    temp = temp.next;
                } else {
                    temp.next = B;
                    B = B.next;
                    temp = temp.next;
                }
            }
            if(A == null) temp.next = B;
            if(B == null) temp.next = A;
            return head;
        }
    };


Ques-3 -> (Sort List)

# Problem Description -
    Sort a linked list, A in O(n log n) time.

# Problem Constraints -
    0 <= |A| = 105

# Solution -
    // Definition for singly-linked list.
    //    function Node(data){
    //      this.data = data
    //      this.next = null
    //    }

    const middle = (A) => {
        //using two-pointer - slow, fast pointer approach.
        if(A == null) return null;

        let slow = A;
        let fast = A.next;
        while (fast !== null && fast.next !== null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    };

    const merge = (A, B) => {
        if(A == null) return B;
            if(B == null) return A;

            let head, temp;
            if(A.data < B.data) {
                head = A;
                temp = A;
                A = A.next;
            } else {
                head = B;
                temp = B;
                B = B.next;
            }
            while(A != null && B != null) {
                if(A.data < B.data){
                    temp.next = A;
                    A = A.next;
                    temp = temp.next;
                } else {
                    temp.next = B;
                    B = B.next;
                    temp = temp.next;
                }
            }
            if(A == null) temp.next = B;
            if(B == null) temp.next = A;
            return head;
    }

    module.exports = { 
    //param A : head node of linked list
    //return the head node in the linked list
        sortList : function(A){
        if(A == null || A.next == null) return A;
        let mid = middle(A);

        // break the list from exactly mid element
        let h1 = mid.next;
        mid.next = null;

        // sort the two divided part of list
        A = this.sortList(A);
        h1 = this.sortList(h1);

        // merge the two divided part of linked list
        let h3 = merge(A, h1);
        return h3;
        }
    };

Ques-4 -> (Remove Loop from Linked List)

# Problem Description -
    You are given a linked list that contains a loop.
    You need to find the node, which creates a loop and break it by making the node point to NULL.

# Prob -lem Constraints
    1 <= number of nodes <= 1000

# Solution -
    // Definition for singly-linked list.
    //    function Node(data){
    //      this.data = data
    //      this.next = null
    //    }

    module.exports = { 
    //param A : head node of linked list
    //return the head node in the linked list
        solve : function(A){
            let slow = A;
            let fast = A;
            let isCycle = false;

            while(fast != null && fast.next != null) {
                slow = slow.next;
                fast = fast.next.next;
                if(slow == fast) {
                    isCycle = true;
                    break;
                }
            }

            if(isCycle) {
                slow=A; // reseting the pointers, fast at intersection already
                while( slow != fast){
                    slow=slow.next;
                    fast=fast.next;
                }
                let temp = fast;
                while(temp.next != slow){
                    temp = temp.next;
                }
                temp.next = null;
            }
            return A;
        }
    };

Ques-5 -> (Swap List Nodes in pairs)

# Problem Description -
    Given a linked list A, swap every two adjacent nodes and return its head.
    NOTE: Your algorithm should use only constant space. You may not modify the values in the list; only nodes themselves can be changed.

# Problem Constraints -
    1 <= |A| <= 106

# Solution -
    // Definition for singly-linked list.
   function Node(data){
     this.data = data
     this.next = null
   }

    module.exports = { 
    //param A : head node of linked list
    //return the head node in the linked list
        swapPairs : function(A){
            let start = new Node();
            start.next = A;
            let current = start;
            while(current.next != null && current.next.next != null) {
                let firstNode = current.next;
                let secondNode = current.next.next;
                
                // Swapping the nodes
                firstNode.next = secondNode.next;
                secondNode.next = firstNode;
                current.next = secondNode;
                
                // Move current to the next pair of nodes
                current = current.next.next;
            }
            return start.next;
        }
    };

Ques-6 -> (Add Two Numbers as Lists)

# Problem Description -
    You are given two linked lists, A and B, representing two non-negative numbers.
    The digits are stored in reverse order, and each of their nodes contains a single digit.
    Add the two numbers and return it as a linked list.

# Problem Constraints -
    1 <= |A|, |B| <= 105

# Solution -
    // Definition for singly-linked list.
   function Node(data){
     this.data = data
     this.next = null
   }

    module.exports = { 
    //param A : head node of linked list
    //param B : head node of linked list
    //return the head node in the linked list
        addTwoNumbers : function(A, B){
            let dummyNode = new Node();
            let current = dummyNode;
            let carry = 0;

            let currentNodeA = A;
            let currentNodeB = B;
            while(currentNodeA != null || currentNodeB != null) {
                let valueA = currentNodeA != null ? currentNodeA.data : 0;
                let valueB = currentNodeB != null ? currentNodeB.data : 0;

                let sum = valueA + valueB + carry;
                let digit = sum % 10;
                carry = Math.floor(sum/10);

                current.next = new Node(digit);
                current = current.next;
                if(currentNodeA != null) currentNodeA = currentNodeA.next;
                if(currentNodeB != null) currentNodeB = currentNodeB.next;
            }
            if(carry > 0) current.next = new Node(carry);
            return dummyNode.next;
        }
    };

Ques-7 -> (Reorder List)

# Problem Description -
    Given a singly linked list A
    A: A0 → A1 → … → An-1 → An 
    reorder it to:
    A0 → An → A1 → An-1 → A2 → An-2 → … 
    You must do this in-place without altering the nodes' values.

# Problem Constraints -
    1 <= |A| <= 1066

# Solution -
    // Definition for singly-linked list.
   function Node(data){
     this.data = data
     this.next = null
   }
    function getMiddleofLinkedList(head) {
        let fast = head;
        let slow = head;
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    function reverseList(head) {
        let current = head;
        let prev = null;
        while(current != null) {
            let next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
    function merge(A, B) {
        let dummyNode = new Node();
        let current = dummyNode;
        while(A != null && B != null){
            current.next = A;
            A = A.next;
            current = current.next;

            current.next = B;
            B = B.next;
            current = current.next;
        }
        if(A != null) current.next = A;
        return dummyNode.next;
    }
    module.exports = { 
    //param A : head node of linked list
    //return the head node in the linked list
        reorderList : function(A){
            if (A === null || A.next === null) return A;
            let middle = getMiddleofLinkedList(A);
            let head1 = middle.next;
            middle.next = null;
            head1 = reverseList(head1);

            let temp1 = A;
            let temp2 = head1;
            let head2 = merge(temp1, temp2);
            return head2;
        }
    };
