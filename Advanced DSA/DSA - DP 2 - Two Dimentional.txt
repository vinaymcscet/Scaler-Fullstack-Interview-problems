Ques-1 -> ( N digit numbers)

# Problem Description -
    Find out the number of A digit positive numbers, whose digits on being added equals to a given number B.
    Note that a valid number starts from digits 1-9 except the number 0 itself. i.e. leading zeroes are not allowed.
    Since the answer can be large, output answer modulo 1000000007

# Problem Constraints -
    1 <= A <= 1000
    1 <= B <= 10000

# Solution -
    function check(dp, id, sum) {
        if(sum < 0) return 0;
        if(id == 0 && sum == 0) return 1;
        if(id == 0) return 0;
        if(dp[id][sum] != -1) return dp[id][sum];
        let ans = 0;

        for(let i=0;i<10;i++) {
            ans += check(dp, id-1, sum-i);
            ans %= 1000000007;
        }
        return dp[id][sum] = ans;

    }
    module.exports = { 
    //param A : integer
    //param B : integer
    //return an integer
        solve : function(A, B){
            // top-down approach
            let dp = Array.from(new Array(A+1), () => new Array(B+1).fill(-1));
            let ans = 0;
            for(let i=1;i<10;i++) {
                ans += check(dp, A-1, B-i);
                ans %= 1000000007;
            }
            return ans;

            // bottom-up approach
            let dp = Array.from(new Array(A+1), () => new Array(B+1).fill(0));
            for(let i=1; i<=9 && i<=B; i++) {
                dp[0][i] = 1;
            }
            for(let i=1;i<A;i++) {
                for(let j=1;j<=B;j++) {
                    for(let k=0;k<=9;k++) {
                        if(j-k >= 0) {
                            if(j == 0 && k == A-1) continue;
                            dp[i][j] += dp[i-1][j-k];
                            dp[i][j] %=  1000000007;
                        }
                    }
                }
            }
            return dp[A-1][B];
        }
    };

Ques-2 -> (Unique Paths in a Grid)

# Problem Description -
    Given a grid of size n * m, lets assume you are starting at (1,1) and your goal is to reach (n, m). 
    At any instance, if you are on (x, y), you can either go to (x, y + 1) or (x + 1, y).
    Now consider if some obstacles are added to the grids. 
    Return the total number unique paths from (1, 1) to (n, m).
        Note: 
        1. An obstacle is marked as 1 and empty space is marked 0 respectively in the grid.
        2. Given Source Point and Destination points are 1-based index.

# Problem Constraints -
    1 <= n, m <= 100
    A[i][j] = 0 or 1

# Solution -
    module.exports = { 
    //param A : array of array of integers
    //return an integer
        uniquePathsWithObstacles : function(A){
            let M = A.length;
            let N = A[0].length;
            let dp = Array.from(new Array(M), () => new Array(N).fill(0));

            // Initialize the first cell
            dp[0][0] = A[0][0] == 1? 0 : 1;

            // Initalize first row
            for(let j=1;j<N;j++) {
                if(A[0][j] == 1) dp[0][j] = 0;
                else dp[0][j] = dp[0][j-1];
            }

            // Initalize first column
            for(let i=1;i<M;i++) {
                if(A[i][0] == 1) dp[i][0] = 0;
                else dp[i][0] = dp[i-1][0];
            }

            for(let i=0;i<M;i++) {
                for(let j=0;j<N;j++) {
                    if(A[i][j] == 1) dp[i][j] = 0;
                    else {
                        dp[i][j] = dp[i-1][j] + dp[i][j-1];
                    }
                }
            }
            return dp[M-1][N-1];
        }
    };

Ques-3 -> (Dungeon Princess)

# Problem Description -
    The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.
    The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.
    Some of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms; other rooms are either empty (0's) or contain magic orbs that increase the knight's health (positive integers).
    In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.
    Given a 2D array of integers A of size M x N. Find and return the knight's minimum initial health so that he is able to rescue the princess.

# Problem Constraints -
    1 <= M, N <= 500
    -100 <= A[i] <= 100

# Solution -
    module.exports = { 
    //param A : array of array of integers
    //return an integer
        calculateMinimumHP : function(A){
            let m = A.length;
            let n = A[0].length;
            let dp = Array.from(new Array(m), () => new Array(n).fill(0));

            // start loop from bottom-right most column
            for(let i=m-1;i>=0;i--) {
                for(let j=n-1;j>=0;j--) {
                    if(i == m-1 && j == n-1) {
                        let healthReq = 1 - A[i][j] > 0 ? 1-A[i][j] : 1;
                        dp[i][j] = healthReq;
                    }
                    else if(i == m-1) {
                        let healthReq = dp[i][j+1] - A[i][j] > 0 ? dp[i][j+1] - A[i][j] : 1;
                        dp[i][j] = healthReq;
                    }
                    else if(j == n-1) {
                        let healthReq = dp[i+1][j] - A[i][j] > 0 ? dp[i+1][j] - A[i][j] : 1;
                        dp[i][j] = healthReq;
                    }
                    else {
                        let healthReq1 = dp[i+1][j] - A[i][j] > 0 ? dp[i+1][j] - A[i][j] : 1;
                        let healthReq2 = dp[i][j+1] - A[i][j] > 0 ? dp[i][j+1] - A[i][j] : 1;
                        dp[i][j] = Math.min(healthReq1, healthReq2);
                    }
                }
            }
            return dp[0][0];
        }
    };

Ques-4 -> (Unique Binary Search Trees II)

# Problem Description -
Given an integer A, how many structurally unique BST's (binary search trees) exist that can store values 1...A?

# Problem Constraints -
    1 <= A <=18

# Solution -
    module.exports = { 
    //param A : integer
    //return an integer
        numTrees : function(A){
            // Approach - 1
            let dp = new Array(A+1).fill(0);
            dp[0] = 1;
            dp[1] = 1;
            for(let i=2;i<=A;i++) {
                for(let j=1;j<=i;j++) {
                    dp[i] += dp[j-1] * dp[i-j];
                }
            }
            return dp[A];

            // Approach - 2
            let ans = 1;
            for(let i=0;i<A;i++) {
                ans *= (2*A-i);
                ans /= (i+1);
            }
            return ans = ans/(A+1);
        }
    };


Ques-5 -> (Min Sum Path in Matrix)

# Problem Description -
    Given a M x N grid A of integers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.
    Return the minimum sum of the path.
    NOTE: You can only move either down or right at any point in time.

# Problem Constraints -
    1 <= M, N <= 2000
    -1000 <= A[i][j] <= 1000

# Solution -
    module.exports = { 
    //param A : array of array of integers
    //return an integer
        minPathSum : function(A){
            // Top-down(memoization) approach
            let dp = Array.from(new Array(A.length), () => new Array(A[0].length).fill(-1));

            return minSum(A.length - 1, A[0].length - 1);

            function minSum(i, j) {
                if(i === 0 && j === 0) return A[i][j];
                if(i < 0 || j < 0) return Number.MAX_SAFE_INTEGER;
                if(dp[i][j] != -1) return dp[i][j];
                let up = A[i][j] + minSum(i - 1, j);
                let left = A[i][j] + minSum(i, j - 1);
                return dp[i][j] = Math.min(up, left);
            }

            // bottom - up(Tabulation) approach
            let m = A.length;
            let n = A[0].length;
            let dp = Array.from(new Array(m), () => new Array(n).fill(-1));

            for(let i=0;i<m;i++) {
                for(let j=0;j<n;j++) {
                    if(i==0 && j==0) dp[i][j] = A[i][j];
                    else {
                        let up = Number.MAX_SAFE_INTEGER, down = Number.MAX_SAFE_INTEGER;
                        if(i>0) up = A[i][j] + dp[i-1][j];
                        if(j>0) down = A[i][j] + dp[i][j-1];
                        dp[i][j] = Math.min(up, down);
                    }
                }
            }
            return dp[m-1][n-1];
        }
    };

Ques-6 -> (Max Rectangle in Binary Matrix)

# Problem Description -
    Given a 2-D binary matrix A of size N x M filled with 0's and 1's, find the largest rectangle containing only ones and return its area.

# Problem Constraints -
    1 <= N, M <= 100

# Solution -
    module.exports = { 
    //param A : array of array of integers
    //return an integer
        maximalRectangle : function(A){
            let N = A.length;
            let M = A[0].length;

            for(let i=0;i<N;i++) {
                for(let j=1;j<M;j++) {
                    if(A[i][j] == 0) continue;
                    else if(A[i][j] == 1) A[i][j] += A[i][j-1];
                }
            }
            let ans = 0;
            for(let i=0;i<N;i++) {
                for(let j=0;j<M;j++) {
                    if(A[i][j] == 0) continue;
                    let width = A[i][j];
                    let height = 1;
                    let area = width * height;
                    ans = Math.max(area, ans);
                    // Iterate over rows above the current row
                    for(let k=i-1;k>=0;k--) {
                        if(A[k][j] == 0) break;
                        width = Math.min(width, A[k][j]);
                        height++;
                        area = width * height;
                        ans = Math.max(area, ans);
                    }
                }
            }
            return ans;
        }
    };

Ques-7 -> (Min Sum Path in Triangle)

# Problem Description -
    Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.
    Adjacent numbers for jth column of ith row is jth and (j+1)th column of (i + 1)th row

# Problem Constraints -
    |A| <= 1000
    A[i] <= 1000

# Solution -
    module.exports = { 
        //param A : array of array of integers 
        //return an integer 
        minimumTotal : function(A){ 
            let N = A.length;
            let M = A[N-1].length;
            
            for(let i = N-2;i>=0;i--) {
                for(let j=0;j<A[i].length;j++) {
                    A[i][j] += Math.min(A[i+1][j], A[i+1][j+1]);
                }
            }
            return A[0];
        } 
    }; 

Ques-8 -> (Intersecting Chords in a Circle)

# Problem Description -
    Given a number A, return number of ways you can draw A chords in a circle with 2 x A points such that no 2 chords intersect.
    Two ways are different if there exists a chord which is present in one way and not in other.
    Return the answer modulo 109 + 7.

# Problem Constraints -
    1 <= A <= 103

# Solution -
    module.exports = { 
    //param A : integer
    //return an integer
        chordCnt : function(A){
            let dp = new Array(A+1).fill(BigInt(0));
            let mod = BigInt(10 ** 9) + BigInt(7);
            dp[0] = dp[1] = BigInt(1);

            for(let i=2;i<=A;i++) {
                for(let j=0;j<i;j++) {
                    dp[i] += (dp[j] * dp[i-j-1]) % mod;
                    dp[i] %= mod; 
                }
            }
            return Number(dp[A] % mod);
        }
    };
