Ques-1 -> ( Path in Directed Graph)

# Problem Description -
    Given an directed graph having A nodes labelled from 1 to A containing M edges given by matrix B of size M x 2such that there is a edge directed from node
    B[i][0] to node B[i][1].
    Find whether a path exists from node 1 to node A.
    Return 1 if path exists else return 0.
    NOTE:
    There are no self-loops in the graph.
    There are no multiple edges between two nodes.
    The graph may or may not be connected.
    Nodes are numbered from 1 to A.
    Your solution will run on multiple test cases. If you are using global variables make sure to clear them.

# Problem Constraints -
    2 <= A <= 105
    1 <= M <= min(200000,A*(A-1))
    1 <= B[i][0], B[i][1] <= A

# Solution -
    module.exports = { 
    //param A : integer
    //param B : array of array of integers
    //return an integer
        solve : function(A, B){
            // using BFS(Breadth first search)
            // A - nodes, B - edges
            // step.1 Create adjancency List - works on nodes 
            let adjancencyList = new Array(A+1).fill(null).map(() => []);
            for(let i=0;i<B.length;i++) {
                let u = B[i][0];
                let v = B[i][1];
                adjancencyList[u].push(v);
            }

            // step.2 Queue Implementation
            let visited = new Array(A+1).fill(false);
            let queue = [];
            // start Bfs from node 1.
            queue.push(1);
            visited[1] = true;

            while(queue.length > 0) {
                let currentNode = queue.shift();
                for(let neighbour of adjancencyList[currentNode]) {
                    if(!visited[neighbour]) {
                        if(neighbour == A) return 1;
                        else  {
                            visited[neighbour] = true;
                            queue.push(neighbour);
                        }
                    }
                }
            }
            return 0;

            // using DFS(Breadth first search)
            // A - nodes, B - edges
            // step. 1 Create adjancency List - works on nodes 
            let adjancencyList = new Array(A+1).fill(null).map(() => []);
            for(let i=0;i<B.length;i++) {
                let u = B[i][0];
                let v = B[i][1];
                adjancencyList[u].push(v);
            }
            let visited = new Array(A+1).fill(false);
            function DFS(node) {
                if(visited[node] == true) return;
                visited[node] = true;

                if(node == A) return true;
                for(let neighbour of adjancencyList[node]) {
                    if(!visited[neighbour]) {
                        if(DFS(neighbour)) return true;
                    }
                }
                return false;
            }
            return DFS(1) ? 1 : 0;
        }
    };

Ques-2 -> (Shortest Distance in a Maze)

# Problem Description -
    Given a matrix of integers A of size N x M describing a maze. The maze consists of empty locations and walls.
    1 represents a wall in a matrix and 0 represents an empty location in a wall.
    There is a ball trapped in a maze. The ball can go through empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall (maze boundary is also considered as a wall). When the ball stops, it could choose the next direction.
    Given two array of integers of size B and C of size 2 denoting the starting and destination position of the ball.
    Find the shortest distance for the ball to stop at the destination. The distance is defined by the number of empty spaces traveled by the ball from the starting position (excluded) to the destination (included). If the ball cannot stop at the destination, return -1.

# Problem Constraints -
    2 <= N, M <= 100
    0 <= A[i] <= 1
    0 <= B[i][0], C[i][0] < N
    0 <= B[i][1], C[i][1] < M

# Solution -
    const top = 0;
    const parent = i => ((i + 1) >>> 1) - 1;
    const left = i => (i << 1) + 1;
    const right = i => (i + 1) << 1;
    class PriorityQueue {
        constructor(comparator = (a, b) => a[0] < b[0]) {
            this._heap = [];
            this._comparator = comparator;
        }
        size() {
            return this._heap.length;
        }
        isEmpty() {
            return this.size() == 0;
        }
        peek() {
            return this._heap[top];
        }
        push(...values) {
            values.forEach(value => {
                this._heap.push(value);
                this._siftUp();
            });
            return this.size();
        }
        pop() {
            const poppedValue = this.peek();
            const bottom = this.size() - 1;
            if (bottom > top) {
                this._swap(top, bottom);
            }
            this._heap.pop();
            this._siftDown();
            return poppedValue;
        }
        replace(value) {
            const replacedValue = this.peek();
            this._heap[top] = value;
            this._siftDown();
            return replacedValue;
        }
        _greater(i, j) {
            return this._comparator(this._heap[i], this._heap[j]);
        }
        _swap(i, j) {
            [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];
        }
        _siftUp() {
            let node = this.size() - 1;
            while (node > top && this._greater(node, parent(node))) {
                this._swap(node, parent(node));
                node = parent(node);
            }
        }
        _siftDown() {
            let node = top;
            while (
                (left(node) < this.size() && this._greater(left(node), node)) ||
                (right(node) < this.size() && this._greater(right(node), node))
            ) {
                let maxChild = (right(node) < this.size() && this._greater(right(node), left(node))) ? right(node) : left(node);
                this._swap(node, maxChild);
                node = maxChild;
            }
        }
    }
    const dx = [-1, 1, 0, 0];
    const dy = [0, 0, -1, 1];
    function inside(x, y, n, m) {
        return (x >= 0 && x <= n - 1 && y >= 0 && y <= m - 1);
    }
    module.exports = {
        solve: function(maze, start, destination) {
            const n = maze.length;
            const m = maze[0].length;
            const sx = start[0];
            const sy = start[1];
            const ex = destination[0];
            const ey = destination[1];
            const v = new Array(n).fill(null).map(() => new Array(m).fill(Infinity));
            const pq = new PriorityQueue();
            pq.push([0, sx, sy]);
            while (!pq.isEmpty() && v[ex][ey] === Infinity) {
                const temp = pq.pop();
                const x = temp[1];
                const y = temp[2];
                const d = temp[0];
                if (v[x][y] !== Infinity) {
                    continue;
                } else {
                    v[x][y] = d;
                }
                for (let i = 0; i < 4; ++i) {
                    let x1 = x;
                    let y1 = y;
                    let d1 = 0;
                    while (true) {
                        const x2 = x1 + dx[i];
                        const y2 = y1 + dy[i];
                        if (inside(x2, y2, n, m) && maze[x2][y2] === 0) {
                            x1 = x2;
                            y1 = y2;
                            ++d1;
                        } else {
                            break;
                        }
                    }
                    if (d1 > 0 && v[x1][y1] === Infinity) {
                        pq.push([d + d1, x1, y1]);
                    }
                }
            }
            return v[ex][ey] !== Infinity ? v[ex][ey] : -1;
        }
    };

Ques-3 -> ( Cycle in Directed Graph)

# Problem Description -
    Given an directed graph having A nodes. A matrix B of size M x 2 is given which represents the M edges such that there is a edge directed from node B[i][0] to node B[i][1].
    Find whether the graph contains a cycle or not, return 1 if cycle is present else return 0.
    NOTE:
    The cycle must contain atleast two nodes.
    There are no self-loops in the graph.
    There are no multiple edges between two nodes.
    The graph may or may not be connected.
    Nodes are numbered from 1 to A.
    Your solution will run on multiple test cases. If you are using global variables make sure to clear them.

# Problem Constraints -
    2 <= A <= 105
    1 <= M <= min(200000,A*(A-1))
    1 <= B[i][0], B[i][1] <= A

# Solution -
    module.exports = { 
    //param A : integer
    //param B : array of array of integers
    //return an integer
        solve : function(A, B){
            // Adjencency List
            let adjencencyList = new Array(A+1).fill(null).map(() => []);
            for(let i=0;i<B.length;i++) {
                let u = B[i][0];
                let v = B[i][1];
                adjencencyList[u].push(v);
            }
            // DFS
            let visitedArr = new Array(A+1).fill(false);
            let recursionStackArr = new Array(A+1).fill(false);
            function isCycle(node) {
                if(!visitedArr[node]) {
                    visitedArr[node] = true;
                    recursionStackArr[node] = true;
                };

                for(let neighnour of adjencencyList[node]) {
                    if(!visitedArr[neighnour] && isCycle(neighnour)) return true;
                    else if(recursionStackArr[neighnour]) return true;
                }
                recursionStackArr[node] = false;
                return false;
            }
            for(let i=1;i<=A;i++) {
                if(!visitedArr[i]) {
                    if(isCycle(i)) return 1;
                }
            }
            return 0;
        }
    };

Ques-4 -> (Number of islands)

# Problem Description -
    Given a matrix of integers A of size N x M consisting of 0 and 1. A group of connected 1's forms an island. From a cell (i, j) such that A[i][j] = 1 you can visit any cell that shares a corner with (i, j) and value in that cell is 1.
    More formally, from any cell (i, j) if A[i][j] = 1 you can visit:
    (i-1, j) if (i-1, j) is inside the matrix and A[i-1][j] = 1.
    (i, j-1) if (i, j-1) is inside the matrix and A[i][j-1] = 1.
    (i+1, j) if (i+1, j) is inside the matrix and A[i+1][j] = 1.
    (i, j+1) if (i, j+1) is inside the matrix and A[i][j+1] = 1.
    (i-1, j-1) if (i-1, j-1) is inside the matrix and A[i-1][j-1] = 1.
    (i+1, j+1) if (i+1, j+1) is inside the matrix and A[i+1][j+1] = 1.
    (i-1, j+1) if (i-1, j+1) is inside the matrix and A[i-1][j+1] = 1.
    (i+1, j-1) if (i+1, j-1) is inside the matrix and A[i+1][j-1] = 1.
    Return the number of islands.
    NOTE: Rows are numbered from top to bottom and columns are numbered from left to right.

# Problem Constraints -
    1 <= N, M <= 100
    0 <= A[i] <= 1

# Solution -
    module.exports = { 
    //param A : array of array of integers
    //return an integer
        solve : function(A){
            
        const makeDFS = (arr, i, j) => {
            let N = arr.length;
            let M = arr[0].length;
            if(
                i < 0 || j < 0 ||
                i >= N || j >= M ||
                arr[i][j] == 0 
            ) return;
            arr[i][j] = 2;
            let directions = [
                [-1, 0], [1, 0], [0, -1], [0, 1], // up, down, left, right
                [-1, -1], [-1, 1], [1, -1], [1, 1] // diagonals
            ];
            for(let k=0; k<directions.length; k++){
                const rowindex = i + directions[k][0]; 
                const colindex = j + directions[k][1];
                if(rowindex < N && rowindex >= 0 && colindex >= 0 && colindex < M) {
                    if(arr[rowindex][colindex] === 1) makeDFS(arr, rowindex, colindex);
                }
            }
        }

        let count = 0;
        for(let i=0;i<A.length;i++) {
            for(let j=0;j<A[0].length;j++) {
                if(A[i][j] == 1) {
                    count += 1;
                    makeDFS(A, i, j);
                }
            }
        }
        return count;
        }
    };

Ques-5 -> (First Depth First Search)

# Problem Description -
    You are given N towns (1 to N). All towns are connected via unique directed path as mentioned in the input.
    Given 2 towns find whether you can reach the first town from the second without repeating any edge.
    B C : query to find whether B is reachable from C.
    Input contains an integer array A of size N and 2 integers B and C ( 1 <= B, C <= N ).
    There exist a directed edge from A[i] to i+1 for every 1 <= i < N. Also, it's guaranteed that A[i] <= i for every 1 <= i < N.
    NOTE: Array A is 0-indexed. A[0] = 1 which you can ignore as it doesn't represent any edge.

# Problem Constraints -
    1 <= N <= 100000

# Solution -
    module.exports = { 
    //param A : array of integers
    //param B : integer
    //param C : integer
    //return an integer
        solve : function(A, B, C){
            // adjencency List
            let adjencencyList = new Array(A.length+1).fill(null).map(() => []);
            let visitedArr = new Array(A.length+1).fill(false);
            for(let i=0;i<A.length;i++) {
                adjencencyList[A[i]].push(i+1);
            }
            // create DFS.
            function checkDFS(start, target) {
                if(start == target) return true;
                visitedArr[start] = true;
                for(let neighbour of adjencencyList[start]) {
                    if(!visitedArr[neighbour]) {
                        if(checkDFS(neighbour, target)) return true;
                    }
                }
                return false;
            }
            return checkDFS(C, B) ? 1 : 0;
        }
    };

Ques-6 -> (Clone Graph)

# Problem Description -
    Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.
    Note: The test cases are generated in the following format (use the following format to use See Expected Output option):
    First integer N is the number of nodes.
    Then, N intgers follow denoting the label (or hash) of the N nodes.
    Then, N2 integers following denoting the adjacency matrix of a graph, where Adj[i][j] = 1 denotes presence of an undirected edge between the ith and jth node, O otherwise.

# Problem Constraints -
    1 <= Number of nodes <= 105

# Solution -
    //  Definition for UndirectedGraphNode.
        function UndirectedGraphNode(data) {
            this.label = data;
            this.neighbors = [];
        }
    module.exports = { 
        //param A : root of the undirected graph.
        //Return the node denoting the root of the new clone graph.
        cloneGraph : function(A){
            let visited = new Map();
            return createClone(A, visited);
        }
    };

    function createClone(node, map) {
        if(!node) return node;  
        if(map.has(node)) return map.get(node);
        let clone = new UndirectedGraphNode(node.label);
        map.set(node, clone);

        if (node.neighbors) {
            for(let i=0;i<node.neighbors.length;i++) {
                clone.neighbors.push(createClone(node.neighbors[i], map));
            }
        }
        return clone;
    }

Ques-7 -> (Valid Path)

# Problem Description -
    There is a rectangle with left bottom as (0, 0) and right up as (x, y).
    There are N circles such that their centers are inside the rectangle.
    Radius of each circle is R. Now we need to find out if it is possible that we can move from (0, 0) to (x, y) without touching any circle.
    Note : We can move from any cell to any of its 8 adjecent neighbours and we cannot move outside the boundary of the rectangle at any point of time.

# Problem Constraints -
    0 <= x , y, R <= 100
    1 <= N <= 1000
    Center of each circle would lie within the grid

# Solution -
    module.exports = { 
    //param A : integer - x
    //param B : integer - y
    //param C : integer - N(no of circles)
    //param D : integer - R(radius of each circle)
    //param E : array of integers - [] - x-cordinate of each circle
    //param F : array of integers - [] - y-cordinate of each circle
    //return a strings
        solve : function(A, B, C, D, E, F){
            let x = A, y = B, N = C, R = D, cx = E, cy = F;
            // Create a grid with dimensions (x+1) by (y+1)
            const grid = Array.from({ length: x+1 }, () => Array(y+1).fill(false));
            // Mark cells inside each circle as true (inaccessible)
            
            for(let i=0;i<N;i++) {
                let circleX = cx[i];
                let circleY = cy[i];
                let radius = R * R;

                // Iterate over grid
                for(let dx = -R;dx <= R;dx++) {
                    for(let dy = -R;dy <= R;dy++) {
                        if(dx * dx + dy * dy <= radius) {
                            const nx = circleX + dx;
                            const ny = circleY + dy;
                            if(nx >= 0 && nx <= x && ny >= 0 && ny <= y) {
                                grid[nx][ny] = true;
                            }
                        }
                    }
                }
            }
            // BFS to check if (x, y) is reachable from (0, 0)
            let queue = [[0, 0]];
            let directions = [[-1, 0], [1, 0], [0 -1], [0, 1], [-1, -1], [-1,1], [1, -1], [1, 1]];
            // grid[0][0] = true;
            if(grid[0][0] == true || grid[x][y] == true) return "NO";

            while(queue.length > 0) {
                let [currentX, currentY] = queue.shift();
                if(currentX == x && currentY == y) return 'YES';

                // check it's neighbours
                for(const [dx, dy] of directions) {
                    let newX = currentX + dx;
                    let newY = currentY + dy;
                    if(newX >= 0 && newX <= x && newY >= 0 && newY <= y && !grid[newX][newY]) {
                        grid[newX][newY] = true;
                        queue.push([newX, newY]);
                    }
                }
            }
            return 'NO';
        }
    };

Ques-8 -> (Black Shapes)

# Problem Description -
    Given character matrix A of dimensions N×M consisting of O's and X's, where O = white, X = black.
    Return the number of black shapes. A black shape consists of one or more adjacent X's (diagonals not included)

# Problem Constraints -
    1 <= N, M <= 1000
    A[i][j] = 'X' or 'O'

# Solution -
    module.exports = { 
    //param A : array of strings
    //return an integer
        black : function(A){
            if(A.length == 0 || A[0].length == 0) return 0;

            let ans = 0;
            let N = A.length, M = A[0].length;
            let visited = Array.from({ length: N }, () => Array(M).fill(false));
            const directions = [
                [-1, 0], // up
                [1, 0],  // down
                [0, -1], // left
                [0, 1]   // right
            ];
            const BFS = (row, col) => {
                let queue = [[row, col]];
                visited[row][col] = true;

                while(queue.length > 0) {
                    let [currentRow, currentCol] = queue.shift();
                    for(let [nRow, nCol] of directions) {
                        let newRow = currentRow + nRow;
                        let newCol = currentCol + nCol;
                        if(
                            newRow >= 0 && newRow < N &&
                            newCol >= 0 && newCol < M &&
                            !visited[newRow][newCol] &&
                            A[newRow][newCol] == 'X'
                        ){
                            queue.push([newRow, newCol]);
                            visited[newRow][newCol] = true;
                        }
                    }
                }
            }

            for(let i=0;i < A.length;i++) {
                for(let j=0;j < A[0].length;j++) {
                    if(A[i][j] == 'X' && !visited[i][j]) {
                        ans += 1;
                        BFS(i, j);
                    }
                }
            }
            return ans;
        }
    };
