Ques-1 -> (Recursion Problem 1)

Find the output of the following recursive code.
    void Main(){
        Func(0,0,2,2);
        print(count);
    }

    int count = 0;
    void Func(int sr, int sc, int dr, int dc) {
        if(sr > dr || sc > dc){
            return;
        }
        if(sr == dr && sc == dc){
            count++;
            return;
        }
        Func(sr, sc + 1, dr, dc);
        Func(sr + 1, sc, dr, dc);
    }

# Solution - 6

Ques-2 -> (Primes and divisibility)

# Problem Description -
    In the small town of Numerica, there was a legendary math club called "The Prime Detectives." This club consisted of a group of brilliant young students who loved solving mathematical mysteries.
    One day, a mysterious message arrived at the club's headquarters. The message contained two numbers, A and B, and a cryptic challenge. The challenge stated that hidden within the range of numbers from A to B, there were 
    special prime numbers that held the key to unlocking a hidden treasure. Special Prime numbers are the prime numbers that end with 3.
    Given A and B can you find all prime numbers in the range whose last digit is 3.

# Problem Constraints -
    1 <= A, B <= 10

# Solution -
    module.exports = { 
    //param A : integer
    //param B : integer
    //return a array of integers
        solve : function(A, B){
            let result = [];
            function getAllPrime(A, B){
                const arr = [];
                for(let i=0;i<B+1;i++) {
                    arr.push(1);
                }
                arr[0] = arr[1] = 0;
                for(let i=2;i*i<=B;i++) {
                    if(arr[i] == 1) {
                        for(let j = i*i;j<=B;j=j+i) {
                            arr[j] = 0;
                        }
                    }
                }
                return arr;
            }
            let primevalues = getAllPrime(A, B);
            for(let i=A;i<=B;i++) {
                if(primevalues[i] == 1 && (i%10 == 3)) {
                result.push(i);
                }
            }
            return result;
        }
    };

Ques-3 -> (Count Pair Difference)

# Problem Description -

    You are given an array A of N integers and an integer B.
    Count the number of pairs (i,j) such that A[i] - A[j] = B and i â‰  j.
    Since the answer can be very large, return the remainder after dividing the count with 10^9+7.

#Problem Constraints -
    1 <= N <= 10^5
    1 <= A[i] <= 10^9
    1 <= B <= 10^9

# Solution -
    module.exports = { 
    //param A : array of integers
    //param B : integer
    //return an integer
        solve : function(A, B){
            let N = A.length;
            let sum = 0;
            let map = new Map();
            let mod = Math.pow(10,9) + 7;
            for(let i=0;i<N;i++) {
                // sum += A[i];
                let otherValue1 = A[i] - BigInt(B);
                let otherValue2 = A[i] + BigInt(B);
                
                if(map.has(otherValue1)) {
                    sum = sum + map.get(otherValue1);
                }
                if(map.has(otherValue2)) {
                    sum = sum + map.get(otherValue2);
                }
                
                if(map.has(A[i])) map.set(A[i], map.get(A[i]) + 1);
                else map.set(A[i], 1);
            }
            return sum % mod;
        }
    };
