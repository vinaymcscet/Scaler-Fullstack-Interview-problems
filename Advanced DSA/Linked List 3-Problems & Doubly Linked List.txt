Ques-1 -> (Copy List)

Problem Description
    You are given a linked list A
    Each node in the linked list contains two pointers: a next pointer and a random pointer
    The next pointer points to the next node in the list
    The random pointer can point to any node in the list, or it can be NULL
    Your task is to create a deep copy of the linked list A
    The copied list should be a completely separate linked list from the original list, but with the same node values and random pointer connections as the original list
    You should create a new linked list B, where each node in B has the same value as the corresponding node in A
    The next and random pointers of each node in B should point to the corresponding nodes in B (rather than A)


# Problem Constraints - 
    0 <= |A| <= 106

# Solution -
    // Definition for linked list.
    function RandomListNode(data){
        this.data = data
        this.next = null
        this.random = null
    }
    function createDuplicateNodeList(head) {
        let current = head;
        while(current != null) {
            let temp = current.next;
            let next = new RandomListNode(current.data);
            current.next = next;
            next.next = temp;
            current = temp;
        }
        return head;
    }
    module.exports = { 
        //param head : head node of linked list
        //return the head node in the linked list
        copyRandomList : function(head){
            if (head === null) return null;
            // create random linked list and attached to main linked list
            let current = createDuplicateNodeList(head);
            // assign original linked list random pointers to duplicate linked list same random pointers 
            // in duplicate linked list.
            current = head;
            while(current != null) {
                if(current.random != null) {
                    current.next.random = current.random != null ? current.random.next : null;
                } 
                current = current.next.next;           
            }
            // extract duplicate linked from original linked list.
            let original = head;
            let copy = head.next;
            let temp = copy;
            while(original != null) {
                original.next = original.next.next;
                if (copy.next !== null) copy.next = copy.next.next;
                original = original.next;
                copy = copy.next;
            }
            return temp;
        }
    };

Ques-2 -> (LRU Cache)

    Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.

    get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
    set(key, value) - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting the new item.
    The LRUCache will be initialized with an integer corresponding to its capacity. Capacity indicates the maximum number of unique keys it can hold at a time.

    Definition of "least recently used" : An access to an item is defined as a get or a set operation of the item. "Least recently used" item is the one with the oldest access time.

    NOTE: If you are using any global variables, make sure to clear them in the constructor.

    Example :

    Input : 
            capacity = 2
            set(1, 10)
            set(5, 12)
            get(5)        returns 12
            get(1)        returns 10
            get(10)       returns -1
            set(6, 14)    this pushes out key = 5 as LRU is full. 
            get(5)        returns -1 
    Expected Output
    Enter your input as per the following guideline:
    There are 1 lines in the input

    Line 1 ( Corresponds to arg 1 ) : The line starts with a pair of number numOperations, capacity. capacity is the number your constructor is initialized with. 
    Then numOperation operations follow. 
    Each operation is either : 
    * G  : This corresponds to a function call get()
    * S   : This corresponds to a function call set(num1, num2)
    Note that the function calls are made in order.  

# Solution -
    class Node {
        constructor(key, value) {
            this.key = key;
            this.value = value;
            this.prev = null;
            this.next = null;
        }
    }
    // Constructor : Initializes the LRUCache with capacity 
    module.exports = {
        LRUCache: function(capacity){
        let map = new Map();
        let size = 0;
        let head = new Node();
        let tail = new Node();
        head.next = tail;
        tail.prev = head;

        const addNode = (node) => {
            node.prev = head;
            node.next = head.next;
            head.next.prev = node;
            head.next = node;
        }
        const removeNode = (node) => {
            let prev = node.prev;
            let next = node.next;
            prev.next = next;
            next.prev = prev;
        }
        const moveToHead = (node) =>{
            removeNode(node);
            addNode(node);
        }
        const popTail = () => {
            let res = tail.prev;
            removeNode(res);
            return res;
        }
        return {
            // get function returns an integer
            get: function(key){
                let node = map.get(key);
                if(!node) return -1;
                moveToHead(node);
                return node.value;
            },
            // set returns nothing
            set: function(key, value){
                let node = map.get(key);
                if(!node) {
                    node = new Node(key, value);
                    map.set(key, node);
                    addNode(node);
                    size++;

                    if(size > capacity) {
                        let tail = popTail();
                        map.delete(tail.key);
                        size--;
                    }
                } else {
                    // Update the value of the existing node
                    node.value = value;
                    // Move the existing node to the head of the list
                    moveToHead(node);
                }
            }
        }
        }
    }

Ques-3 -> (Partition List)

# Problem Description -
    Given a linked list A and a value B, partition it such that all nodes less than B come before nodes greater than or equal to B.
    You should preserve the original relative order of the nodes in each of the two partitions.

# Problem Constraints -
    1 <= |A| <= 106
    1 <= A[i], B <= 109

# Solution -
    // Definition for singly-linked list.
    //    function Node(data){
    //      this.data = data
    //      this.next = null
    //    }

    module.exports = { 
    //param A : head node of linked list
    //param B : integer
    //return the head node in the linked list
        partition : function(A, B){
            let before_head = new Node(0);
            let after_head = new Node(0);
            let before = before_head;
            let after = after_head;

            let head = A;
            while(head) {
                if(head.data < B) {
                    before.next = head;
                    before = head;
                }
                else {
                    after.next = head;
                    after = head;
                }
                head = head.next;
            }
            before.next = after_head.next;
            after.next = null;
            return before_head.next;
        }
    };

Ques-4 -> (Flatten a linked list)

# Problem Description -
    Given a linked list where every node represents a linked list and contains two pointers of its type:
    Pointer to next node in the main list (right pointer)
    Pointer to a linked list where this node is head (down pointer). All linked lists are sorted.
    You are asked to flatten the linked list into a single list. Use down pointer to link nodes of the flattened list. The flattened linked list should also be sorted.

# Problem Constraints -
    1 <= Total nodes in the list <= 100000
    1 <= Value of node <= 109

# Solution -
    // Definition for the linked list.
    //			function Node(data){
    //				this.data = data
    //				this.right = null
    //              this.down = null
    //			}
    const getMid = (head) => {
        let fast = head;
        let slow = head;
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next; 
        }
        return slow;
    }
    const merge = (head1, head2) => {
        if(head1 == null) return head2;
        if(head2 == null) return head1;
        let newHead = null;

        if(head1.data <= head2.data) {
            newHead = head1;
            head1 = head1.down;
        } else {
            newHead = head2;
            head2 = head2.down;
        }
        let temp = newHead;
        while(head1 && head2) {
            if(head1.data <= head2.data) { 
                temp.down = head1;
                temp = temp.down;
                head1 = head1.down;
            } else {
                temp.down = head2;
                temp = temp.down;
                head2 = head2.down;
            }
        }
        if(!head1) temp.down = head2;
        if(!head2) temp.down = head1;
        return newHead;
    }

    function flatten(root) {
        if(root == null || root.right == null) return root;
        let headA = getMid(root);
        let headB = headA.right;
        headA.right = null;
        root = flatten(root);
        headB = flatten(headB);

        return merge(root, headB);
    }

Ques-5 -> (Intersection of Linked Lists)

# Problem Description -
    Write a program to find the node at which the intersection of two singly linked lists, A and B, begins. For example, the following two linked lists:

    A:          a1 → a2
                    ↘
                        c1 → c2 → c3
                    ↗
    B:     b1 → b2 → b3
    NOTE:
    If the two linked lists have no intersection at all, return null.
    The linked lists must retain their original structure after the function returns.
    You may assume there are no cycles anywhere in the entire linked structure.
    Your code should preferably run in O(n) time and use only O(1) memory.
    The custom input to be given is different than the one explained in the examples. Please be careful.

# Problem Constraints -
    0 <= |A|, |B| <= 106

# Solution -
    // Definition for singly-linked list.
    //    function Node(data){
    //      this.data = data
    //      this.next = null
    //    }
        function getLength(head) {
            let len = 0;
            while (head !== null) {
                len++;
                head = head.next;
            }
            return len;
        }
    module.exports = {
    //param A : head node of the first linked list
    //param B : head node of the second linked list
    //return the intersection node
    solve: function(A, B) {
        if (A === null || B === null) return null;

        let lenA = getLength(A);
        let lenB = getLength(B);

        let diff = Math.abs(lenA - lenB);
        let longer = lenA > lenB ? A : B;
        let shorter = lenA > lenB ? B : A;

        for (let i = 0; i < diff; i++) {
            longer = longer.next;
        }

        while (longer !== null && shorter !== null) {
            if (longer === shorter) return longer;
            longer = longer.next;
            shorter = shorter.next;
        }
        return null;
    }
    };