Ques-1 -> (Level Order)

# Problem Description -
    Given a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

# Problem Constraints -
    1 <= number of nodes <= 105

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //return a array of array of integers
        solve : function(A){
            if(A == null) return [];

            let queue = [];
            let resultArr = [];
            queue.unshift(A);

            while(queue.length > 0) {
                let levelSize = queue.length;
                let currentLevel = [];

                for (let i = 0; i < levelSize; i++) {
                    let front = queue[queue.length-1];
                    queue.pop();
                    currentLevel.push([front.data]);

                    if(front.left != null) queue.unshift(front.left);
                    if(front.right != null) queue.unshift(front.right);
                }
                resultArr.push(currentLevel);
            }
            return resultArr;
        }
    };

Ques-2 -> (Right View of Binary tree)

# Problem Description - 
    Given a binary tree of integers denoted by root A. Return an array of integers representing the right view of the Binary tree.
    Right view of a Binary Tree is a set of nodes visible when the tree is visited from Right side.

# Problem Constraints -
    1 <= Number of nodes in binary tree <= 100000
    0 <= node values <= 10^9

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //return a array of integers
        solve : function(A){
            let queue = [];
            let resultArr = [];

            queue.unshift(A);
            while(queue.length > 0) {
                let len = queue.length;
                let currentLevel = [];

                for(let i=1;i<=len;i++) {
                    let front = queue[queue.length - 1];
                    queue.pop();

                    if(i == len) currentLevel.push([front.data]);
                    if(front.left != null) queue.unshift(front.left);
                    if(front.right != null) queue.unshift(front.right);
                }
                resultArr.push(currentLevel);
            }
            return resultArr;
        }
    };

Ques-3 -> (Vertical Order traversal)

# Problem Description -
    Given a binary tree, return a 2-D array with vertical order traversal of it. Go through the example and image for more details.
    NOTE: If 2 Tree Nodes shares the same vertical level then the one with lesser depth will come first.

# Problem Constraints -
    0 <= number of nodes <= 105

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }
    class Pair {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
    }

    module.exports = { 
    //param A : root node of tree
    //return a array of array of integers
        verticalOrderTraversal : function(A){
            const hMap = {};
            let queue = [], resultArr = [];
            let minLevel = 0, maxLevel = 0;
            queue.push(new Pair(0, A));

            while(queue.length > 0) {
                let front = queue.shift();
                let level = front.x;
                let node = front.y;
                minLevel = Math.min(level, minLevel);
                maxLevel = Math.max(level, maxLevel);

                if(!hMap[level]) {
                    hMap[level] = [];
                    hMap[level].push(node.data);
                } else {
                    hMap[level].push(node.data);
                }
                if(node.left != null) queue.push(new Pair(level-1, node.left));
                if(node.right != null) queue.push(new Pair(level+1, node.right));
            }
            for(let i=minLevel;i<=maxLevel;i++) {
                resultArr.push(hMap[i]);
            }
            return resultArr;
        }
    };

Ques-4 -> (Vertical Order traversal)

# Problem Description -
Given a root of binary tree A, determine if it is height-balanced.
A height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

# Problem Constraints -
    1 <= size of tree <= 100000

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }
    const height = (root) => {
        if(root == null) return 0;
        let lh = height(root.left);
        let rh = height(root.right);
        return Math.max(lh, rh) + 1;
    }
    class Pair {
        constructor(height, isBalanced) {
            this.height = height;
            this.isBalanced = isBalanced;
        }
    }
    const helper = (A) => {
        if(A == null) return new Pair(0, true);
        let leftPair = helper(A.left); 
        let rightPair = helper(A.right); 

        if(leftPair.isBalanced == false || rightPair.isBalanced == false) return new Pair(-1, false);
        else if(Math.abs(leftPair.height - rightPair.height) > 1) return new Pair(-1, false);
        else return new Pair(Math.max(leftPair.height, rightPair.height) + 1, true);
    }
    module.exports = { 
    //param A : root node of tree
    //return an integer
        isBalanced : function(A){
            if(A == null) return 1;
            let lHeight = height(A.left);
            let rHeight = height(A.right);

            if(Math.abs(lHeight-rHeight) > 1) return 0;
            return this.isBalanced(A.left) && this.isBalanced(A.right); 
        
        //  Another Approach with pair class
            return helper(A).isBalanced == true ? 1 : 0;
        }
    };

Ques-5 -> (ZigZag Level Order Traversal BT)

# Problem Description -
    Given a binary tree, return the zigzag level order traversal of its nodes values. (ie, from left to right, then right to left for the next level and alternate between).

# Problem Constraints -
    1 <= number of nodes <= 105

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //return a array of array of integers
        zigzagLevelOrder : function(A){
            if(A == null) return [];

            let queue = [];
            let resultArr = [];
            queue.unshift(A);
            let zigzag = true;

            while(queue.length > 0) {
                let levelSize = queue.length;
                let currentLevel = [];

                for (let i = 0; i < levelSize; i++) {
                    let front = queue[queue.length-1];
                    queue.pop();
                    if(zigzag) currentLevel.push([front.data]);
                    else currentLevel.unshift([front.data]);

                    if(front.left != null) queue.unshift(front.left);
                    if(front.right != null) queue.unshift(front.right);
                }
                resultArr.push(currentLevel);
                zigzag = !zigzag; // Toggle zigzag for the next level
            }
            return resultArr;
        }
    };

Ques-6 -> (Serialize Binary Tree)

# Problem Description -
    Given the root node of a Binary Tree denoted by A. You have to Serialize the given Binary Tree in the described format.
    Serialize means encode it into a integer array denoting the Level Order Traversal of the given Binary Tree.
    NOTE:
        In the array, the NULL/None child is denoted by -1.
        For more clarification check the Example Input.

# Problem Constraints -
    1 <= number of nodes <= 105

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //return a array of integers
        solve : function(A){
            if(A == null) return [];
            
            let queue = [];
            let resultArr = [];
            queue.unshift(A);

            while(queue.length > 0) {
                    let front = queue[queue.length-1];
                    queue.pop();
                    if (front == null) {
                        resultArr.push(-1);
                        continue;
                    }
                    else {
                        resultArr.push(front.data);
                    }
                    queue.unshift(front.left);
                    queue.unshift(front.right);
            }
            return resultArr;
        }
    };

Ques-7 -> (Deserialize Binary Tree)

# Problem Description -
    You are given an integer array A denoting the Level Order Traversal of the Binary Tree.
    You have to Deserialize the given Traversal in the Binary Tree and return the root of the Binary Tree.
    NOTE:
        In the array, the NULL/None child is denoted by -1.
        For more clarification check the Example Input.

# Problem Constraints -
    1 <= number of nodes <= 105
    -1 <= A[i] <= 105

# Solution -
    // Definition for a  binary tree node
   function TreeNode(data){
     this.data = data
     this.left = null
     this.right = null
   }

    module.exports = { 
    //param A : array of integers
    //return the root node in the tree
        solve : function(A){
            let root = new TreeNode(A[0]);
            let queue = [];
            queue.push(root);
            let i = 1;
            while(queue.length > 0) {
                let front = queue.shift();
                if(A[i] != -1) {
                    front.left = new TreeNode(A[i]);
                    queue.push(front.left);
                }
                if( A[i+1] != -1) {
                    front.right = new TreeNode(A[i+1]);
                    queue.push(front.right);
                }
                i=i+2;
            }
            return root;

        }
    };

Ques-8 -> (Top View of Binary tree)

# Problem Description -
    Given a binary tree of integers denoted by root A. Return an array of integers representing the top view of the Binary tree.
    The top view of a Binary Tree is a set of nodes visible when the tree is visited from the top.
    Return the nodes in any order.

# Problem Constraints -
    1 <= Number of nodes in binary tree <= 100000
    0 <= node values <= 10^9

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }
    class Pair {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
    }
    module.exports = { 
    //param A : root node of tree
    //return a array of integers
        solve : function(A){
            const hMap = {};
            let queue = [], resultArr = [];
            let minLevel = 0, maxLevel = 0;
            queue.push(new Pair(0, A));

            while(queue.length > 0) {
                let front = queue.shift();
                let level = front.x;
                let node = front.y;
                minLevel = Math.min(level, minLevel);
                maxLevel = Math.max(level, maxLevel);

                if(!hMap[level]) {
                    hMap[level] = [];
                    hMap[level].push(node.data);
                } else {
                    hMap[level].push(node.data);
                }
                if(node.left != null) queue.push(new Pair(level-1, node.left));
                if(node.right != null) queue.push(new Pair(level+1, node.right));
            }
            for(let i=minLevel;i<=maxLevel;i++) {
                resultArr.push(hMap[i][0]);
            }
            return resultArr;
        }
    };
