Ques-1 -> (Possibility of Finishing) 

# Problem Description -
    There are a total of A courses you have to take, labeled from 1 to A.
    Some courses may have prerequisites, for example to take course 2 you have to first take course 1, which is expressed as a pair: [1,2].
    So you are given two integer array B and C of same size where for each i (B[i], C[i]) denotes a pair.
    Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?
    Return 1 if it is possible to finish all the courses, or 0 if it is not possible to finish all the courses.

# Problem Constraints -
    1 <= A <= 6*104
    1 <= length(B) = length(C) <= 105
    1 <= B[i], C[i] <= A

# Solution -
    module.exports = { 
    //param A : integer
    //param B : array of integers
    //param C : array of integers
    //return an integer
        solve : function(A, B, C){
            let adjancencyList = new Array(A+1).fill(null).map(() => []);
            for(let i=0;i<B.length;i++) {
                let prerequisite = B[i];
                let course = C[i];
                adjancencyList[prerequisite].push(course);
            }
            let visited  = new Array(A+1).fill(false);
            let recStack = new Array(A+1).fill(false);

            const dfs = (node, visited, recStack) => {
                if(!visited[node]) {
                    visited[node] = true;
                    recStack[node] = true;
                }
                for(let neighbour of adjancencyList[node]) {
                    if(!visited[neighbour] && dfs(neighbour, visited, recStack)) return true;
                    else if(recStack[neighbour]) return true; // cycle detected.
                }
                recStack[node] = false;
                return false;
            }
            for(let i=1;i<=A;i++) {
                if(!visited[i]) {
                    if(dfs(i, visited, recStack)) return 0;
                }
            }
            return 1;
        }
    };

Ques-2 -> (Shortest Distance in a Maze) 

# Problem Description -
    Given a matrix of integers A of size N x M describing a maze. The maze consists of empty locations and walls.
    1 represents a wall in a matrix and 0 represents an empty location in a wall.
    There is a ball trapped in a maze. The ball can go through empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall (maze boundary is also considered as a wall). When the ball stops, it could choose the next direction.
    Given two array of integers of size B and C of size 2 denoting the starting and destination position of the ball.
    Find the shortest distance for the ball to stop at the destination. The distance is defined by the number of empty spaces traveled by the ball from the starting position (excluded) to the destination (included). If the ball cannot stop at the destination, return -1.

# Problem Constraints -
    2 <= N, M <= 100
    0 <= A[i] <= 1
    0 <= B[i][0], C[i][0] < N
    0 <= B[i][1], C[i][1] < M

# Solution -
    const top = 0;
    const parent = i => ((i + 1) >> 1) - 1;
    const left = i => (i << 1) + 1;
    const right = i => (i + 1) << 1;
    class PriorityQueue {
        constructor(comparator = (a, b) => a[0] < b[0]) {
            this._heap = [];
            this._comparator = comparator;
        }
        size() {
            return this._heap.length;
        }
        isEmpty() {
            return this.size() == 0;
        }
        peek() {
            return this._heap[top];
        }
        push(...values) {
            values.forEach(value => {
                this._heap.push(value);
                this._siftUp();
            });
            return this.size();
        }
        pop() {
            const poppedValue = this.peek();
            const bottom = this.size() - 1;
            if (bottom > top) {
                this._swap(top, bottom);
            }
            this._heap.pop();
            this._siftDown();
            return poppedValue;
        }
        replace(value) {
            const replacedValue = this.peek();
            this._heap[top] = value;
            this._siftDown();
            return replacedValue;
        }
        _greater(i, j) {
            return this._comparator(this._heap[i], this._heap[j]);
        }
        _swap(i, j) {
            [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];
        }
        _siftUp() {
            let node = this.size() - 1;
            while (node > top && this._greater(node, parent(node))) {
                this._swap(node, parent(node));
                node = parent(node);
            }
        }
        _siftDown() {
            let node = top;
            while (
                (left(node) < this.size() && this._greater(left(node), node)) ||
                (right(node) < this.size() && this._greater(right(node), node))
            ) {
                let maxChild = (right(node) < this.size() && this._greater(right(node), left(node))) ? right(node) : left(node);
                this._swap(node, maxChild);
                node = maxChild;
            }
        }
    }
    const dx = [-1, 1, 0, 0];
    const dy = [0, 0, -1, 1];
    function inside(x, y, n, m) {
        return (x >= 0 && x <= n - 1 && y >= 0 && y <= m - 1);
    }
    module.exports = {
        solve: function(maze, start, destination) {
            const n = maze.length;
            const m = maze[0].length;
            const sx = start[0];
            const sy = start[1];
            const ex = destination[0];
            const ey = destination[1];
            const v = new Array(n).fill(null).map(() => new Array(m).fill(Infinity));
            const pq = new PriorityQueue();
            pq.push([0, sx, sy]);
            while (!pq.isEmpty() && v[ex][ey] === Infinity) {
                const temp = pq.pop();
                const x = temp[1];
                const y = temp[2];
                const d = temp[0];
                if (v[x][y] !== Infinity) {
                    continue;
                } else {
                    v[x][y] = d;
                }
                for (let i = 0; i < 4; ++i) {
                    let x1 = x;
                    let y1 = y;
                    let d1 = 0;
                    while (true) {
                        const x2 = x1 + dx[i];
                        const y2 = y1 + dy[i];
                        if (inside(x2, y2, n, m) && maze[x2][y2] === 0) {
                            x1 = x2;
                            y1 = y2;
                            ++d1;
                        } else {
                            break;
                        }
                    }
                    if (d1 > 0 && v[x1][y1] === Infinity) {
                        pq.push([d + d1, x1, y1]);
                    }
                }
            }
            return v[ex][ey] !== Infinity ? v[ex][ey] : -1;
        }
    };

Ques-3 -> (Rotten Oranges)

# Problem Description -
    Given a matrix of integers A of size N x M consisting of 0, 1 or 2.
    Each cell can have three values:
    The value 0 representing an empty cell.
    The value 1 representing a fresh orange.
    The value 2 representing a rotten orange.
    Every minute, any fresh orange that is adjacent (Left, Right, Top, or Bottom) to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1 instead.
    Note: Your solution will run on multiple test cases. If you are using global variables, make sure to clear them.

# Problem Constraints -
    1 <= N, M <= 1000
    0 <= A[i][j] <= 2

# Solution -
    module.exports = { 
    //param A : array of array of integers
    //return an integer
        solve : function(A){
            let N = A.length;
            let M = A[0].length;
            let rottenQueue = [];
            let Count = 0;
            let time = 0;

            // A = [   [2, 1, 1]
            //         [1, 1, 0]
            //         [0, 1, 1]   
            // ]; rottenQueue = [[0,0]] count = 6

            for(let i=0;i<N;i++) {
                for(let j=0;j<M;j++) {
                    if(A[i][j] == 2)rottenQueue.push([i, j]);
                    else if(A[i][j] == 1) Count++
                }
            }
            if(rottenQueue.length == 0) return -1;
            let start = 0;

            while(rottenQueue.length > start) {
                let len = rottenQueue.length - start;
                while(len--) {
                    let rottenOrange = rottenQueue[start++];
                    let dx = [-1,0,1,0];
                    let dy = [0,-1,0,1];
                    let cx = rottenOrange[0];
                    let cy = rottenOrange[1];

                    for(let i=0;i<4;i++) {
                        let newX = cx + dx[i];
                        let newY = cy + dy[i];
                        if(newX >= 0 && newX < N && newY >= 0 && newY < M) {
                            if(A[newX][newY] == 1) {
                                rottenQueue.push([newX, newY]);
                                Count--;
                                A[newX][newY] = 2;
                            }
                        }
                    }
                }
                time++;
            } 
            if(Count != 0) return -1;
            else return time-1;
        }
    };

Ques-4 -> (Another BFS)

# Problem Description - 
    Given a weighted undirected graph having A nodes, a source node C and destination node D.
    Find the shortest distance from C to D and if it is impossible to reach node D from C then return -1.
    You are expected to do it in Time Complexity of O(A + M).
    Note:
    There are no self-loops in the graph.
    No multiple edges between two pair of vertices.
    The graph may or may not be connected.
    Nodes are Numbered from 0 to A-1.
    Your solution will run on multiple testcases. If you are using global variables make sure to clear them.

# Problem Constraints -
    1 <= A <= 105
    0 <= B[i][0], B[i][1] < A
    1 <= B[i][2] <= 2
    0 <= C < A
    0 <= D < A

# Solution -
    const top = 0;
    const parent = i => ((i + 1) >> 1) - 1;
    const left = i => (i << 1) + 1;
    const right = i => (i + 1) << 1;

    module.exports = { 
    //param A : integer
    //param B : array of array of integers
    //param C : integer
    //param D : integer
    //return an integer
        solve : function(A, B, C, D){
            const N = 200005;
            let adjencencyList = new Array(N);
            let visitdArr = new Array(N);
            for(let i=0;i<= A+A;i++) {
                adjencencyList[i] = [];
                visitdArr[i] = 0;
            }
            for(let i=0;i<B.length;i++) {
                let u = B[i][0];
                let v = B[i][1];
                let weight = B[i][2]; // weight
                if(weight == 1) {
                    adjencencyList[u].push(v);
                    adjencencyList[v].push(u);
                }
                else {
                    adjencencyList[u].push(u+A);
                    adjencencyList[u+A].push(v);
                    adjencencyList[v].push(v+A);
                    adjencencyList[v+A].push(u);
                }
            }
            visitdArr[C] = 1;
            let queue = [];
            queue.push([C, 0]);

            while(queue.length > 0) {
                let currentX = queue[0][0];
                let w = queue[0][1];
                queue.shift();
                if(currentX == D) return w;

                for(let neighbour of adjencencyList[currentX]) {
                    if(visitdArr[neighbour] == 0) {
                        visitdArr[neighbour] = 1;
                        queue.push([neighbour, w+1]);
                    }
                }
            }
            return -1;
        }
    };

Ques-5 -> (Topological Sort)

# Problem Description -
    Given an directed acyclic graph having A nodes. A matrix B of size M x 2 is given which represents the M edges such that there is a edge directed from node B[i][0] to node B[i][1].
    Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge uv, vertex u comes before v in the ordering. Topological Sorting for a graph is not possible if the graph is not a DAG.
    Return the topological ordering of the graph and if it doesn't exist then return an empty array.
    If there is a solution return the correct ordering. If there are multiple solutions print the lexographically smallest one.
    Ordering (a, b, c) is said to be lexographically smaller than ordering (e, f, g) if a < e or if(a==e) then b < f and so on.
    NOTE:

        There are no self-loops in the graph.
        The graph may or may not be connected.
        Nodes are numbered from 1 to A.
        Your solution will run on multiple test cases. If you are using global variables make sure to clear them.

# Problem Constraints -
    2 <= A <= 104
    1 <= M <= min(100000,A*(A-1))
    1 <= B[i][0], B[i][1] <= A

# Solution -

    class PriorityQueue {
    constructor(fct) {
        this.heap = [];
        this.fct = fct;
    }
    top() {
        if (this.heap.length == 0) return undefined;
        return this.heap[0] * this.fct;
    }
    push(node) {
        this.heap.push(node * this.fct);
        let id = this.heap.length - 1;
        let par = Math.floor((id - 1) / 2);

        while (id > 0 && this.heap[id] < this.heap[par]) {
        [this.heap[id], this.heap[par]] = [this.heap[par], this.heap[id]];
        id = Math.floor((id - 1) / 2);
        par = Math.floor((id - 1) / 2);
        }
    }
        pop() {
            let ret = this.heap[0];
            this.heap[0] = this.heap[this.heap.length - 1];
            this.heap.pop();
            this.recurDown(0);
            return ret * this.fct;
        }
        recurDown(node) {
            let l = node * 2 + 1;
            let r = node * 2 + 2;

            let cur = node;
            if (l < this.heap.length && this.heap[cur] > this.heap[l]) cur = l;
            if (r < this.heap.length && this.heap[cur] > this.heap[r]) cur = r;
            if (cur != node) {
            [this.heap[node], this.heap[cur]] = [this.heap[cur], this.heap[node]];
            this.recurDown(cur);
            }
        }
        size() {
            return this.heap.length;
        }
        empty() {
            return this.heap.length == 0;
        }
    }
    module.exports = { 
    //param A : integer
    //param B : array of array of integers
    //return a array of integers
        solve : function(A, B){
            let adjecentArr = new Map();
            let visited =  new Array(A+1).fill(0);
            for(let i=1;i<=A;i++) {
                adjecentArr.set(i, []);
            }
            for(let i=0;i<B.length;i++) {
                let u = B[i][0];
                let v = B[i][1];
                //if (!adjecentArr[u]) adjecentArr[u] = [];
                adjecentArr.get(u).push(v);
                visited[v]++;
            }
            // BFS - priority Queue
            let pq = new PriorityQueue(1);
            for(let i=1;i<=A;i++) {
                if(visited[i] == 0) {
                pq.push(i);
                }
            }
            let ans = [];
            while(!pq.empty()) {
                let  temp = pq.pop();
                ans.push(temp);
                for (let i = 0; i < adjecentArr.get(temp).length; i++) {
                    visited[adjecentArr.get(temp)[i]]--;
                    if (visited[adjecentArr.get(temp)[i]] == 0) pq.push(adjecentArr.get(temp)[i]);
                }
            }
            if(ans.length != A) ans = [];
            return ans;
        }
    };

Ques-6 -> (Knight On Chess Board)

# Problem Description -
    Given any source point, (C, D) and destination point, (E, F) on a chess board of size A x B, we need to find whether Knight can move to the destination or not.
    The above figure details the movements for a knight ( 8 possibilities ).
    If yes, then what would be the minimum number of steps for the knight to move to the said point. If knight can not move from the source point to the destination point, then return -1.
    NOTE: A knight cannot go out of the board.

# Problem Constraints -
    1 <= A, B <= 500

# Solution -
    module.exports = { 
    //param A : integer
    //param B : integer
    //param C : integer
    //param D : integer
    //param E : integer
    //param F : integer
    //return an integer
        knight : function(A, B, C, D, E, F){
            // Check if the destination is out of bounds
            if(E > A || F > B || E < 1 || F < 1) return -1;

            // Knight's possible moves
            let dx = [2, 2, -2, -2, 1, 1, -1, -1];
            let dy = [-1, 1, 1, -1, 2, -2, 2, -2];
            
            let visited = new Array(A+1).fill(null).map(() => new Array(B+1).fill(false));
            visited[C][D] = true;

            let queue = [];
            queue.push([C, D, 0]);

            while(queue.length > 0) {
                let [u, v, distance] = queue.shift();
                if(u == E && v == F) return distance;
                for(let i=0;i<8;i++) {
                    let currentX = u + dx[i];
                    let currentY = v + dy[i];

                    if(
                        currentX > 0 && currentX <= A &&
                        currentY > 0 && currentY <= B &&
                        !visited[currentX][currentY]
                    ) {
                        queue.push([currentX, currentY, distance + 1]);
                        visited[currentX][currentY] = true;
                    }
                }
            }
            return -1;
            
        }
    };

Ques-7 -> (Largest Distance between nodes of a Tree) 

# Problem Description -
    Find largest distance Given an arbitrary unweighted rooted tree which consists of N (2 <= N <= 40000) nodes.
    The goal of the problem is to find largest distance between two nodes in a tree. Distance between two nodes is a number of edges on a path between the nodes (there will be a unique path between any pair of nodes since it is a tree).
    The nodes will be numbered 0 through N - 1.
    The tree is given as an array A, there is an edge between nodes A[i] and i (0 <= i < N). Exactly one of the i's will have A[i] equal to -1, it will be root node.

# Problem Constraints -
    2 <= |A| <= 40000

# Solution -
    class Pair {
        constructor(distance, node) {
            this.distance = distance;
            this.node = node;
        }
    }
    module.exports = { 
    //param A : array of integers
    //return an integer
        solve : function(A){
            function makeDFScall(node, depth, visited, maxDepthNode) {
                visited[node] = true;
                if(depth > maxDepthNode.distance) {
                    maxDepthNode.distance = depth;
                    maxDepthNode.node = node;
                }
                for(let neighbour of adjancencyList[node]) {
                    if(!visited[neighbour]) makeDFScall(neighbour, depth+1, visited, maxDepthNode);
                }
            }
            let adjancencyList = new Array(A.length).fill(null).map(() => []); 
            for(let i=0;i<A.length;i++) {
                if(A[i] != -1){
                    adjancencyList[i].push(A[i]);
                    adjancencyList[A[i]].push(i);
                }
            }
            let visited = new Array(A.length).fill(false);
            let maxDepthNode = new Pair(0,0);
            makeDFScall(0,0,visited, maxDepthNode);

            visited.fill(false);
            makeDFScall(maxDepthNode.node, 0, visited, maxDepthNode);
            return maxDepthNode.distance;
        }
    };

Ques-8 -> (Valid Path)

# Problem Description -
    There is a rectangle with left bottom as (0, 0) and right up as (x, y).
    There are N circles such that their centers are inside the rectangle.
    Radius of each circle is R. Now we need to find out if it is possible that we can move from (0, 0) to (x, y) without touching any circle.
    Note : We can move from any cell to any of its 8 adjecent neighbours and we cannot move outside the boundary of the rectangle at any point of time.

# Problem Constraints -
    0 <= x , y, R <= 100
    1 <= N <= 1000
    Center of each circle would lie within the grid

# Solution -
    module.exports = { 
    //param A : integer
    //param B : integer
    //param C : integer
    //param D : integer
    //param E : array of integers
    //param F : array of integers
    //return a strings
        solve : function(A, B, C, D, E, F){
            let X = A, Y = B, N = C, R = D, Cx = E, Cy = F;
            const grid = Array.from({ length: X+1 }, () => Array(Y+1).fill(false));

            for(let i=0;i<N;i++) {
                let circleX = Cx[i];
                let circleY = Cy[i];
                let radius = R * R;

                // Iterate over grid
                for(let dx = -R;dx <= R;dx++) {
                    for(let dy = -R;dy <= R;dy++) {
                        if( dx * dx + dy * dy <= radius) {
                            const nx = circleX + dx;
                            const ny = circleY + dy;
                            if(nx >= 0 && nx <= X && ny >= 0 && ny <= Y) grid[nx][ny] = true;
                        } 
                    }
                }
            }
            // start BFS to check can (x, y) we reach from (0,0)
            let queue = [[0,0]];
            let directions = [[-1, 0], [1, 0], [0 -1], [0, 1], [-1, -1], [-1,1], [1, -1], [1, 1]];
            if(grid[0][0] == true || grid[X][Y] == true) return 'NO';

            while(queue.length > 0) {
                let [currentX, currentY] = queue.shift();
                if(currentX == X && currentY == Y) return 'YES';

                for(let [Dx, Dy] of directions) {
                    let nX = currentX + Dx;
                    let nY = currentY + Dy;
                    if(nX >= 0 && nX <= X && nY >= 0 && nY <= Y && !grid[nX][nY]) {
                        grid[nX][nY] = true;
                        queue.push([nX, nY]);
                    }
                }
            }
            return 'NO';
        }
    };
