Ques-1 -> (Single Number)

# Problem Description -
    Given an array of integers A, every element appears twice except for one. Find that integer that occurs once.
    NOTE: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

# Problem Constraints
    1 <= |A| <= 2000000
    0 <= A[i] <= INTMAX

# Solution - 
    module.exports = { 
    //param A : array of integers
    //return an integer
        // Approach - 1
        let map = new Map();
        for(let i=0;i<A.length;i++){
            if(map.has(A[i])) map.set(A[i], (map.get(A[i] || 0) + 1));
            else map.set(A[i], 1);
        }
        for(let [item, value] of map.entries()) {
            if(value == 1) return Number(item);
        }
        //Approach - 2 
        singleNumber : function(A){
        let ans = 0, N= A.length;
        for(let i=0;i<N;i++){
            ans = ans ^ Number(A[i]);
        }
        return Number(ans);
        
        //Approach - 3 
            function checkBit(A, B) {
                if((BigInt(A) & BigInt(1 << B)) == 0) return 0 
                    else return 1;
                }
            
            let ans = 0, N = A.length;
            for(let i=0;i<31;i++) {
                let count = 0;
                for(let j=0;j<N;j++) {
                    if(checkBit(A[j], i)) {
                        count++;
                    }
                }
                if(count & 1) { // means count is odd
                    ans = ans | (1<<i); // adding ith bit in ans.(set a bit through this operation)
                }
            }
            return ans;
        }
    };

Ques-2 -> (Single Number II)

# Problem Description -
    Given an array of integers, every element appears thrice except for one, which occurs once.
    Find that element that does not appear thrice.
    NOTE: Your algorithm should have a linear runtime complexity.
    Could you implement it without using extra memory?

# Problem Constraints -
    2 <= A <= 5*106
    0 <= A <= INTMAX

# Solution - 
    module.exports = { 
    //param A : array of integers
    //return an integer
        singleNumber : function(A){
            // Approach - 1
            let map = new Map();
            for(let i=0;i<A.length;i++){
                if(map.has(A[i])) map.set(A[i], (map.get(A[i] || 0) + 1));
                else map.set(A[i], 1);
            }
            for(let [item, value] of map.entries()) {
                if(value == 1) return Number(item);
            }
            // Approach - 2
            function checkBit(a, b) {
                if((a & (1<<b)) != 0) {
                    return true;
                }
                return false;
            }
            let ans = 0;
            let N = A.length;
            for(let i=0;i<31;i++) {
                let count = 0;
                for(let j=0;j<N;j++) {
                    if(checkBit(A[j], i)) {
                        count++;
                    }
                }
                if(count%3 == 1) {
                    ans = ans | (1<<i);
                }
            }
            return ans;
        }
    };

Ques-3 -> (Single Number III)

# Problem Description -
    Given an array of positive integers A, two integers appear only once, and all the other integers appear twice.
    Find the two integers that appear only once.
    Note: Return the two numbers in ascending order.

# Problem Constraints -
    2 <= |A| <= 100000
    1 <= A[i] <= 109

# Solution - 
    module.exports = { 
    //param A : array of integers
    //return a array of integers
        solve : function(A){
            // Approach - 1
            let map = new Map();
            let ans = [];

            for(let i=0;i<A.length;i++){
                if(map.has(A[i])) map.set(A[i], (map.get(A[i] || 0) + 1));
                else map.set(A[i], 1);
            }
            for(let [item, value] of map.entries()) {
                if(value == 1) ans.push(item);
            }
            return ans.sort((a, b) => a-b);

            // Approach - 2
            function checkBit(a, b) {
                if((a & (1<<b)) != 0) {
                    return true;
                }
                return false;
            }
            
            let ans = 0, N = A.length, pos = 0, set = 0, unset = 0;
            // Getting xor value of two unique numbers
            for(let i=0;i<N;i++) {
                ans = ans ^ A[i];
            }
            
            // Finding the right most set bit
            for(let i=0;i<31;i++) {
                if(checkBit(ans, i)) {
                    pos = i;
                    break;
                }
            }

            // Splitting an array according to set and unset bits
            for(let i=0;i<N;i++) {
                if(checkBit(A[i], pos)) {
                    set = set ^ A[i];
                } else {
                    unset = unset ^ A[i];
                }
            }
            return [Math.min(set, unset), Math.max(set, unset)];
        }
    };

Ques-4 -> (Find Two Missing Numbers)

# Problem Description -
    Given an array A of length N where all the elements are distinct and are in the range [1, N+2].
    Two numbers from the range [1, N+2] are missing from the array A. Find the two missing numbers.

# Problem Constraints -
    1 <= N <= 105
    1 <= A[i] <= N+2
    The elements of array A are distinct

# Solution -
    module.exports = { 
    //param A : array of integers
    //return a array of integers
        solve : function(A){
            let N = A.length + 2;
            let res = [];
            
            for(let i=1;i<=N;i++) {
                if(A.indexOf(i) == -1) {
                    res.push(i);
                }
            }
            return res;
        }
    };

Ques-5 -> (Maximum AND Pair)

# Problem Description -
    Given an array A. For every pair of indices i and j (i != j), find the maximum A[i] & A[j].

# Problem Constraints -
    1 <= len(A) <= 105
    1 <= A[i] <= 109

# Solution -
    module.exports = { 
    //param A : array of integers
    //return an integer
        solve : function(A){
            function checkBit(A, B) {
                if((BigInt(A) & BigInt(1 << B)) == 0) return 0 
                    else return 1;
            }

            let ans = 0, N = A.length;
            for(let i=30;i>=0;i--) {
                let count = 0;
                for(let j=0;j<N;j++) {
                    if(checkBit(A[j], i)) {
                        count++;
                    }
                }
                if(count>=2) {
                    ans = ans | (1<<i);
                    for(let j=0;j<N;j++) {
                        if(checkBit(A[j], i) == 0) {
                            A[j] = 0;
                        }
                    }
                }
            }
            return ans;
        }
    };

Ques-6 -> (Strange Equality)

# Problem Description -
    Given an integer A.
    Two numbers, X and Y, are defined as follows:
    X is the greatest number smaller than A such that the XOR sum of X and A is the same as the sum of X and A.
    Y is the smallest number greater than A, such that the XOR sum of Y and A is the same as the sum of Y and A.
    Find and return the XOR of X and Y.
    NOTE 1: XOR of X and Y is defined as X ^ Y where '^' is the BITWISE XOR operator.
    NOTE 2: Your code will be run against a maximum of 100000 Test Cases.

# Problem Constraints -
    1 <= A <= 109

# Solution -
    module.exports = { 
    //param A : integer
    //return an integer
        solve : function(A){
            // A+B = (A^B) + 2*(A&B)
            let ans = 0;
            for(let i=0;i<32;i++) {
                if((A & (1<<i)) == 0 & ans < A){
                    ans = ans | (1<<i);
                }
            }
            return ans;
        }
    };

Ques-7 -> (SUBARRAY OR)

# Problem Description -
    You are given an array of integers A of size N.
    The value of a subarray is defined as BITWISE OR of all elements in it
    Return the sum of value of all subarrays of A % 109 + 7.

# Problem Constraints -
    1 <= N <= 105
    1 <= A[i] <= 108

# Solution -
    module.exports = { 
    //param A : array of integers
    //return an integer
        solve : function(A){
            // Approach - 1(hard test case failed in that case)
            let result = 0, mod = Math.pow(10,9)+7;
            for(let i=0;i<A.length;i++) {
                let bitOR = 0;
                for(let j=i;j<A.length;j++) {
                    bitOR = bitOR | A[j];
                    result = (result + bitOR)%mod;
                }
            }
            return result;

            // Approach - 2
            let mod = Math.pow(10, 9)+7, result = 0;
            let arr = new Array(32).fill(0);

            for(let i=0;i<A.length;i++) {
                for(let j=0;j<32;j++) {
                    let psum = (1<<j);
                    if(A[i] & psum) {
                        result = (result + ((i+1) * (psum % mod)))% mod;
                        arr[j] = i+1;
                    }
                    else result = (result + (arr[j] * (psum % mod)))% mod;
                }
            }
            return result;
        }
    };

Ques-8 -> (Min XOR value)

# Problem Description -
    Given an integer array A of N integers, find the pair of integers in the array which have minimum XOR value. Report the minimum XOR value.

# Problem Constraints -
    2 <= length of the array <= 100000
    0 <= A[i] <= 109

# Solution -
    module.exports = { 
    //param A : array of integers
    //return an integer
        findMinXor : function(A){
            A.sort((a,b) => a-b);
        let ans = Infinity;
            for(let i=0;i<A.length;i++) {
                let temp = A[i] ^ A[i+1];
                ans = Math.min(ans, temp);
            }
            return ans;
        }
    };

Ques-9 -> (Sum of Xor of all Pairs)

# Problem Description -
    Given an array A of N integers. Find the sum of bitwise XOR all pairs of numbers in the array.
    Since the answer can be large, return the remainder after the dividing the answer by 109+7.

# Problem Constraints -
    1 <= N <= 105
    1 <= A[i] < 109

# Solution -
    module.exports = { 
    //param A : array of integers
    //return an integer
        solve : function(A){
            let N = A.length, mod = Math.pow(10, 9) + 7, ans = 0n;

            for(let i=0;i<32;i++) {
                let set = 0, unset = 0;
            for(let j=0;j<N;j++) {
                if((A[j] & (1<<i)) != 0) set++;
                else unset++;
            }
            let count = set * unset;
            ans += BigInt(count) * BigInt((1<<i)); 
            }
            return Number(ans % BigInt(mod));
        }
    };
