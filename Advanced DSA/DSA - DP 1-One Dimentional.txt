Ques-1 -> (Stairs)

# Problem Description -
    You are climbing a staircase and it takes A steps to reach the top.
    Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
    Return the number of distinct ways modulo 1000000007

# Problem Constraints - 
    1 <= A <= 105

# Solution -
    module.exports = { 
    //param A : integer
    //return an integer
        climbStairs : function(A){
            // top-down approach
            let mod = 1000000007;
            let dP = new Array(A+1).fill(-1);

            dP[0] = Number(1);
            dP[1] = Number(1);

            for(let i=2;i<=A;i++) {
                dP[i] = Number(dP[i-1]) % mod + Number(dP[i-2]) % mod;
            }
            return Number(dP[A]) % mod;

            // bottom-up approach
            if (A === 1) return 1;
            let a = 1, b = 1;
            let c;
            for (let i = 2; i <= A; i++) {
                c = (Number(a) + Number(b)) % mod;
                a = b;
                b = c;
            }
            return Number(c) % mod;
        }
    };


Ques-2 -> (Fibonacci Number)

# Problem Description -
    Given a positive integer A, write a program to find the Ath Fibonacci number.
    In a Fibonacci series, each term is the sum of the previous two terms and the first two terms of the series are 0 and 1. i.e. f(0) = 0 and f(1) = 1. Hence, f(2) = 1, f(3) = 2, f(4) = 3 and so on.
    NOTE: 0th term is 0. 1th term is 1 and so on.

# Problem Constraints -
    0 <= A <= 44

# Solution -
    // YOUR CODE GOES HERE
    // Please take input and print output to standard input/output (stdin/stdout)
    // DO NOT USE ARGUMENTS FOR INPUTS

    process.stdin.resume();
    process.stdin.setEncoding('utf-8');

    let input = '';

    process.stdin.on('data', function(inputStdin) {
        input += inputStdin;
    });

    process.stdin.on('end', function() {
        let A = parseInt(input.trim());
        console.log(fibonacci(A));
    });

    // Approach - 1
     const fibonacci = (n) => {
         if(n<=1) return n;
         return fibonacci(n-1) + fibonacci(n-2);
     }

    // Approach - 2
    const fibonacci = (n) => {
        // Top-down approach(recursive approach) = TC -> O(N), SC -> O(N)
         const dP = new Array(n+1).fill(-1);

         const fib = (n, dP) => {
             if(n <= 1) return n;
             if(dP[n] != -1) return dP[n];
             return dP[n] = fib(n-1, dP) + fib(n-2, dP);
         }
         return fib(n, dP);

         const fib = (n) => {
             dP[0] = 0;
             dP[1] = 1;
             for(let i=2;i<=n;i++) {
                 dP[i] = dP[i-1] + dP[i-2];
             }
             return dP[n];
         }
         return fib(n);

        // Approach -3
        // bottom-up approach(Tablular approach) = TC -> O(N), SC -> O(1)
        const fib = (n) =>  {
            if(n == 1) return 1;
            let a=0, b=1;
            let c;
            for(let i=2;i<=n;i++) {
                c = a+b;
                a = b;
                b = c;
            }
            return c;
        }
        return fib(n);
    }

Ques-3 -> (Minimum Number of Squares)

# Problem Description -
    Given an integer A. Return minimum count of numbers, sum of whose squares is equal to A.

# Problem Constraints -
    1 <= A <= 105

# Solution -
    module.exports = { 
    //param A : integer
    //return an integer
        countMinSquares : function(A){
            // Top-down approach
            let dP = new Array(A+1).fill(-1);

            const helper = (n) => {
                if(n == 0) return 0;
                if(dP[n] !== -1) return dP[n];
                let ans = Infinity;
                for(let i=1;i*i<=n;i++) {
                    ans = Math.min(ans, helper(n-i*i)+1);
                }
                dP[n] = ans;
                return ans;
            } 

            return helper(A);

            // bottom-up approach
            let dP = new Array(A+1).fill(Infinity);
            dP[0] = 0;

            for(let i=1;i<=A;i++) {
                for(let x=1;x*x<=i;x++) {
                    dP[i] = Math.min(dP[i], dP[i-x*x]+1);
                }
            }
            return dP[A];
        }
    };

Ques-4 -> (Max Sum Without Adjacent Elements)

# Problem Description - 
Given a 2 x N grid of integers, A, your task is to choose numbers from the grid such that sum of these numbers is maximized. 
However, you cannot choose two numbers that are adjacent horizontally, vertically, or diagonally. 
Return the maximum possible sum.
Note: You are allowed to choose more than 2 numbers from the grid.

# Problem Constraints -
    1 <= N <= 20000
    1 <= A[i] <= 2000

# Solution -
    module.exports = { 
    //param A : array of array of integers
    //return an integer
        adjacent : function(A){
            let dP = new Array(A[0].length+1).fill(-1);

            // Top-down approach(memoization)
            const maxSum = (A, end, dP) => {
                if(end == 0) return Math.max(A[0][end], A[1][end]);
                if(end < 0) return 0;
                if(dP[end] !== -1) return dP[end];
                let include = Math.max(A[0][end], A[1][end]) + maxSum(A, end-2, dP);
                let exclude = maxSum(A, end-1, dP);
                dP[end] = Math.max(include, exclude);
                return dP[end];
            }
            return maxSum(A, A[0].length-1, dP);

            // Bottom-Up(Tabulation - iterative)
            const maxSum = (A) => {
                let N = A[0].length;
                for(let i=0;i<N;i++) {
                    dP[i] = Math.max(A[0][i], A[1][i]);
                }
                dP[1] = Math.max(dP[0], dP[1]);

                for(let i=2;i<N;i++) {
                    dP[i] = Math.max(dP[i-1], dP[i] + dP[i-2]);
                }
                return dP[N-1];
            }
            return maxSum(A);
        }
    };

Ques-5 -> (Maximum Sum Value)

# Problem Description -
    You are given an array A of N integers and three integers B, C, and D.
    You have to find the maximum value of A[i]*B + A[j]*C + A[k]*D, where 1 <= i <= j <= k <= N.

# Problem Constraints -
    1 <= N <= 105
    -10000 <= A[i], B, C, D <= 10000

# Solution -
    module.exports = { 
    //param A : array of integers
    //param B : integer
    //param C : integer
    //param D : integer
    //return an integer
        maxArray : function(A,B, C, D, i, max1, max2, max3) {
            // base case
            if(i == A.length) return max3;

            max1 = Math.max(max1, A[i]*B);
            max2 = Math.max(max2, A[i]*C + max1);
            max3 = Math.max(max3, A[i]*D + max2);

            return this.maxArray(A,B,C,D,i+1, max1, max2, max3);
        },
        solve : function(A, B, C, D){
            // top-down approach
            let max1 = Number.MIN_SAFE_INTEGER; 
            let max2 = Number.MIN_SAFE_INTEGER; 
            let max3 = Number.MIN_SAFE_INTEGER;

            return this.maxArray(A,B,C,D, 0, max1, max2, max3);

            // Bottom -up approach
            let max1 = Number.MIN_SAFE_INTEGER; 
            let max2 = Number.MIN_SAFE_INTEGER; 
            let max3 = Number.MIN_SAFE_INTEGER;

            for(let i=0;i<A.length;i++) {
                max1 = Math.max(max1, A[i]*B);
                max2 = Math.max(max2, A[i]*C + max1);
                max3 = Math.max(max3, A[i]*D + max2);
            }
            return max3;
        }
    };

Ques-6 -> (Max Product Subarray)

# Problem Description -
    Given an integer array A of size N. Find the contiguous subarray within the given array (containing at least one number) which has the largest product.
    Return an integer corresponding to the maximum product possible.
    NOTE: Answer will fit in 32-bit integer value.

# Problem Constraints -
    1 <= N <= 5 * 105
    -100 <= A[i] <= 100

# Solution -
    module.exports = { 
    //param A : array of integers
    //return an integer
        maxProduct : function(A){
            // Brute-force(easy test case passed only - TC - O(N^2), SC - O(1))
            let max = 0;
            if(A.length == 1) max = A[0];
            for(let i=0;i<A.length;i++) {
                let current = A[i];
                max = Math.max(max, current);
                for(let j=i+1;j<A.length;j++) {
                    current *= A[j];
                    max = Math.max(max, current);
                }
            }
            return max;

            // Top down approach
            const maxProductRecursive = (A, i , maxProd, minProd, result) => {
                if(i == 0) {
                    maxProd = A[0];
                    minProd = A[0];
                    result = A[0];
                    return maxProductRecursive(A, i+1, maxProd, minProd, result);
                }
                if(i == A.length) return result;
                let current = A[i];
                let temp = Math.max(current, maxProd*current, minProd*current);
                minProd = Math.min(current, maxProd*current, minProd*current);

                maxProd = temp;
                result = Math.max(result, maxProd);
                return maxProductRecursive(A, i+1, maxProd, minProd, result)

            }
            return maxProductRecursive(A, 0, 0, 0, 0);
            // bottom-up approach
            let maxProd = A[0];
            let minProd = A[0];
            let result = A[0];

            for(let i=1;i<A.length;i++) {
                let current = A[i];
                let temp = Math.max(current, maxProd*current, minProd*current);
                minProd = Math.min(current, maxProd*current, minProd*current);

                maxProd = temp;
                result = Math.max(result, maxProd);
            }
            return result;

        }
    };

Ques-7 -> (Ways to Decode)

# Problem Description -
    A message containing letters from A-Z is being encoded to numbers using the following mapping:
    'A' -> 1
    'B' -> 2
    ...
    'Z' -> 26
    Given an encoded message denoted by string A containing digits, determine the total number of ways to decode it modulo 109 + 7.

# Problem Constraints -
    1 <= length(A) <= 105

# Solution -
    module.exports = { 
    //param A : string
    //return an integer
        numDecodings : function(A){
            if(A.length == 0 || A[0] == 0) return 0;
            
            const mod = 1000000007;
            let dp = new Array(A.length+1).fill(0);
            dp[0] = 1;
            for(let i=1;i<=A.length;i++) {
                if(A[i-1] >= '1' && A[i-1] <= '9') dp[i] += dp[i-1] % mod;
                if(A[i-2] == '1') dp[i] += dp[i-2] % mod;
                else if(A[i-2] == '2' && A[i-1] >= '0' && A[i-1] <= '6') dp[i] += dp[i-2] % mod; 
            }
            return dp[A.length] % mod;
        }
    };
