Ques-1 -> (Preorder Traversal)

# Problem Description -
    Given a binary tree, return the preorder traversal of its nodes values.

# Problem Constraints -
    1 <= number of nodes <= 105

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //return a array of integers
        preorderTraversal : function(A){
            let resultArr = [];

            const preTraversal = (node) => {
                if(node == null) return;
                resultArr.push(node.data);
                preTraversal(node.left);
                preTraversal(node.right);
            }
            preTraversal(A);
            return resultArr;

            //second - using iteration method
            const stack = [];
            const result = [];
            let current = A;

            while(current || stack.length > 0) {
                while(current) {
                    result.push(current.data);
                    stack.push(current);
                    current = current.left;
                }
                current = stack.pop();
                current = current.right;
            }
            return result;
        }
    };


Ques-2 -> (Inorder Traversal)

# Problem Description -
    Given a binary tree, return the inorder traversal of its nodes' values.

# Problem Constraints -
    1 <= number of nodes <= 105

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //return a array of integers
        
        inorderTraversal : function(A){
            let resultArr = [];

            const inTraversal = (node) => {
                if(node == null) return;
                inTraversal(node.left);
                resultArr.push(node.data);
                inTraversal(node.right);
            }
            inTraversal(A);
            return resultArr;

            //second - using iteration method
            const stack = [];
            const result = [];
            let current = A;

            while(current || stack.length > 0) {
                while(current) {
                    stack.push(current);
                    current = current.left;
                }

                current = stack.pop();
                result.push(current.data);

                current = current.right;
            }
            return result;
        }
    };

Ques-3 -> (Binary Tree From Inorder And Postorder)

# Problem Description -
    Given the inorder and postorder traversal of a tree, construct the binary tree.
    NOTE: You may assume that duplicates do not exist in the tree.

# Problem Constraints -
    1 <= number of nodes <= 105

# Solution -
    // Definition for a  binary tree node
   function TreeNode(data){
     this.data = data
     this.left = null
     this.right = null
   }    

module.exports = {
    // param A : array of integers
    // param B : array of integers
    // return the root node in the tree
    buildTree: function (A, B) {
        if (A.length === 0 || B.length === 0) return null;

        let rootNodeValue = B.pop();
        let rootNode = new TreeNode(rootNodeValue);

        let rootIndex = A.indexOf(rootNodeValue); 

        rootNode.right = this.buildTree(A.slice(rootIndex + 1), B);
        rootNode.left = this.buildTree(A.slice(0, rootIndex), B);

        return rootNode;

    //Another method to solve
        function create(ps, pe, is, ie)  {
            if(ps>pe || is > ie) return null;

            let rootData = B[pe];
            let root = new TreeNode(rootData);

            let rootIndex = A.indexOf(rootData);
            let elementLST = rootIndex - is;

            root.left = create(ps, ps + elementLST-1, is, rootIndex-1);
            root.right = create(ps + elementLST, pe-1, rootIndex+1, ie);

            return root;
        }
        let N = A.length;
        return create(0, N-1, 0, N-1);
    },
};

Ques-4 -> (Postorder Traversal)

# Problem Description -
    Given a binary tree, return the Postorder traversal of its nodes values.

# Problem Constraints -
    1 <= number of nodes <= 105

# Solution -
    // Definition for a  binary tree node
    //    function TreeNode(data){
    //      this.data = data
    //      this.left = null
    //      this.right = null
    //    }

    module.exports = { 
    //param A : root node of tree
    //return a array of integers
        postorderTraversal : function(A){
        let resultArr = [];

            const postTraversal = (node) => {
                if(node == null) return;
                postTraversal(node.left);
                postTraversal(node.right);
                resultArr.push(node.data);
            }
            postTraversal(A);
            return resultArr;

        //second - using iteration method
            const stack = [];
            const result = [];
            let current = A;

            while(current || stack.length > 0) {
                while(current) {
                    stack.push(current);
                    result.unshift(current.data);
                    current = current.right;
                }
                current = stack.pop();
                current = current.left;
            }
            return result;
        }
    };

Ques-5 -> (Binary Tree From Inorder And Preorder)

# Problem Description -
    Given preorder and inorder traversal of a tree, construct the binary tree.
    NOTE: You may assume that duplicates do not exist in the tree.

# Problem Constraints -
    1 <= number of nodes <= 105

# Solution -
    // Definition for a  binary tree node
   function TreeNode(data){
     this.data = data
     this.left = null
     this.right = null
   }

module.exports = { 
 //param A : array of integers
 //param B : array of integers
 //return the root node in the tree
	buildTree : function(A, B){
        if (A.length === 0 || B.length === 0) return null;

        let rootNodeValue = A.shift();
        let rootNode = new TreeNode(rootNodeValue);

        let rootIndex = B.indexOf(rootNodeValue);

        rootNode.left = this.buildTree(A, B.slice(0, rootIndex));
        rootNode.right = this.buildTree(A, B.slice(rootIndex + 1));

        return rootNode;

        //Another method to solve
        function create(ps, pe, is, ie)  {
            if(ps>pe || is > ie) return null;

            let rootData = A[ps];
            let root = new TreeNode(rootData);

            let rootIndex = B.indexOf(rootData);
            let elementLST = rootIndex - is;

            root.left = create(ps+1, ps + elementLST, is, rootIndex-1);
            root.right = create(ps + elementLST + 1, pe, rootIndex+1, ie);

            return root;
        }
        let N = A.length;
        return create(0, N-1, 0, N-1);
	}
};
