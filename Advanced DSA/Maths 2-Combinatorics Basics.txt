Ques-1 -> (Excel Column Title)

# Problem Description -
    Given a positive integer A, return its corresponding column title as it appears in an Excel sheet.
    For example:
        1 -> A
        2 -> B
        3 -> C
        ...
        26 -> Z
        27 -> AA
        28 -> AB 

# Problem Constraints -
    1 <= A <= 10^9

# Solution -
    module.exports = { 
    //param A : integer
    //return a strings
        convertToTitle : function(A){
            let N = A;
            let ans = "";
            while(N>0) {
                let remainder = (N-1) % 26;
                ans = String.fromCharCode(remainder + 65) + ans;
                N = Math.floor((N-1)/26);
            }
            return ans;
        }
    };

Ques-2 -> (Pascal Triangle)

# Problem Description -

    Write a program to print the pascal triangle up to A rows.

# Problem Constraints -
    1 <= A <= 25

# Solution -
    module.exports = { 
    //param A : integer
    //return a array of array of integers
        solve : function(A){
            
            //create a 2D array.
            let arr = [];
            for(let i=0;i<A;i++) {
                let dummyArr = [];
                for(let j=0;j<A;j++) {
                    if(j<=i) {
                        if(j==0 || j==i) {
                            dummyArr.push(1);
                        } else {
                            let val = arr[i-1][j] + arr[i-1][j-1];
                            dummyArr.push(val);
                        }
                    } else {
                        dummyArr.push(0);
                    }
                }
                arr.push(dummyArr);
            }
            return arr;
        }
    };

Ques-3 -> (Excel Column Number)

# Problem Description -
    Given a column title as appears in an Excel sheet, return its corresponding column number.

# Problem Constraints -
    1 <= length of the column title <= 5

# Solution -
    module.exports = { 
    //param A : string
    //return an integer
        titleToNumber : function(A){
            let ans = 0;
            let mul = 1;
            for(let i=A.length-1;i>=0;i--) {
                ans += mul * (A[i].charCodeAt(0) - 'A'.charCodeAt(0) + 1);
                mul *= 26; 
            }
            return ans;
        }
    };

Ques-4 -> (Compute nCr % m)

# Problem Description -
    Given three integers A, B, and C, where A represents n, B represents r, and C represents m, find and return the value of nCr % m where nCr % m = (n!/((n-r)!*r!))% m.
    x! means factorial of x i.e. x! = 1 * 2 * 3... * x.

# Problem Constraints -
    1 <= A * B <= 10^6
    1 <= B <= A
    1 <= C <= 10^6

# Solution -
    module.exports = { 
 //param A : integer
     //param B : integer
    //param C : integer
    //return an integer
        solve : function(A, B, C){
            // Approach - 1(Brute Force Idea - Hard test case failed)

            function factorial(N) {
                if(N==0) return 1;
                return factorial(N-1) * N;
            }
            return Math.ceil((factorial(A)/(factorial(A-B)*factorial(B))) % C);

            // Approach - 2
            function generateArray(A, B, C) {
                // const twoDArray = new Array(A + 1).fill(0).map(() => new Array(A + 1).fill(0));
                const twoDArray = new Array(A + 1).fill(0).map(() => new Array(B+1).fill(0));

                for(let i=0;i<=A;i++) {
                    for(let j=0;j<=Math.min(i, B);j++) {
                        if(j==0 || j==i) {
                            twoDArray[i][j] = 1;
                        } else {
                            twoDArray[i][j] = (twoDArray[i-1][j] + twoDArray[i-1][j-1]) % C;
                        }
                    }
                }
                return twoDArray;
            }

            function generateModM(A, B, C) {
                if(B == 0) return 1;
                if(A<B) return 0;

                let result = generateArray(A, B, C);
                return result[A][B];
            }
            return generateModM(A, B, C);
        }
    };

Ques-5 -> (Sorted Permutation Rank)

# Problem Description -
    Given a string A. Find the rank of the string amongst its permutations sorted lexicographically.
    Assume that no characters are repeated.
    Note: The answer might not fit in an integer, so return your answer % 1000003

# Problem Constraints -
    1 <= |A| <= 1000

# Solution -
    module.exports = { 
    //param A : string
    //return an integer
        findRank : function(A){
            let mod = 1000003;
            const getFact = (n) => {
                let factorial = 1;
                if(n == 0 || n == 1) return 1;
                for(let i=1;i<=n;i++) {
                    factorial = (factorial * i) % mod;
                }
                return factorial;
            }

            let ans= 0, N = A.length;
            for(let i=0;i<N-1;i++) {
                let count = 0;
                for(let j=i+1;j<N;j++) {
                    if(A[j] < A[i]) {
                        count++;
                    }
                }
                ans = (ans + (count * getFact(N - i - 1)) % mod) % mod;
            }
            return ans+1;
        }
    };
