Ques-1 -> (Queue Using Stacks)

# Problem Description -
    Implement a First In First Out (FIFO) queue using stacks only.
    The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).
    Implement the UserQueue class:
    void push(int X) : Pushes element X to the back of the queue.
    int pop() : Removes the element from the front of the queue and returns it.
    int peek() : Returns the element at the front of the queue.
    boolean empty() : Returns true if the queue is empty, false otherwise.
    NOTES:
    You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.
    Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.

# Problem Constraints -
    1 <= X <= 109
    At most 1000 calls will be made to push, pop, peek, and empty function.
    All the calls to pop and peek are valid. i.e. pop and peek are called only when the queue is non-empty.

# Solution -
    class UserQueue {
        constructor() {
            // Initialize your data structure here.t
            this.s1 = [];
            this.s2 = [];
        }
        
        push(X) {
            // Push element X to the back of queue.
            this.s1.push(X);
        }
        
        pop() {
            // Removes the element from in front of queue and returns that element.
            if(this.s2.length == 0) {
                while(this.s1.length > 0) {
                    let temp = this.s1.pop();
                    this.s2.push(temp);
                }
            }
            return this.s2.pop();
        }
        
        peek() {
            // Get the front element of the queue.
            if(this.s2.length == 0) {
                while(this.s1.length > 0) {
                    let temp = this.s1.pop();
                    this.s2.push(temp);
                }
            }
            return this.s2[this.s2.length - 1];
        }
        
        empty() {
            // Returns whether the queue is empty.
            return this.s1.length == 0 && this.s2.length == 0;
        }
    }

    /**
    * Your UserQueue object will be instantiated and called as such:
    * const obj = new UserQueue();
    * obj.push(X);
    * const param2 = obj.pop();
    * const param3 = obj.peek();
    * const param4 = obj.empty();
    */

Ques-2 -> (Perfect Numbers)

# Problem Description -
    Given an integer A, you have to find the Ath Perfect Number.
    A Perfect Number has the following properties:
    It comprises only 1 and 2.
    The number of digits in a Perfect number is even.
    It is a palindrome number.
    For example, 11, 22, 112211 are Perfect numbers, where 123, 121, 782, 1 are not.

# Problem Constraints -
    1 <= A <= 100000

# Solution -
    module.exports = { 
    //param A : integer
    //return a strings
        solve : function(A){
            let queue = [];
            queue.unshift('2');
            queue.unshift('1');
            for(let i=0;i<A;i++) {
                queue.push(queue[i] + '1');
                queue.push(queue[i] + '2');
            }
            return queue[A-1] + (queue[A - 1].split("").reverse().join(""));
        }
    };

Ques-3 -> (Parking Ice Cream Truck)

# Problem Description -
    Imagine you're an ice cream truck driver in a beachside town. The beach is divided into several sections, and each section has varying numbers of beachgoers wanting ice cream given by the array of integers A.
    For simplicity, let's say the beach is divided into 8 sections. One day, you note down the number of potential customers in each section: [5, 12, 3, 4, 8, 10, 2, 7]. This means there are 5 people in the first section, 12 in the second, and so on.
    You can only stop your truck in B consecutive sections at a time because of parking restrictions. To maximize sales, you want to park where the most customers are clustered together.
    For all B consecutive sections, identify the busiest stretch to park your ice cream truck and serve the most customers. Return an array C, where C[i] is the busiest section in each of the B consecutive sections. Refer to the given example for clarity.
    NOTE: If B > length of the array, return 1 element with the max of the array.

# Problem Constraints -
    1 <= |A|, B <= 106

# Solution -
    module.exports = { 
    //param A : array of integers
    //param B : integer
    //return a array of integers
        slidingMaximum : function(A, B){
            

            const queue = [];
            const result = [];
            let N = A.length;

        // Process the first window separately
            for(let i=0;i<B;i++) {
                while(queue.length > 0 && A[i] >= A[queue[queue.length-1]]) {
                    queue.pop();
                }
                queue.push(i);
            }
            
            // Process the remaining windows
            for(let i=B;i<N;i++) {
                result.push(A[queue[0]]);
                while(queue.length > 0 && queue[0] <= i-B) {
                    queue.shift();
                }
                while(queue.length > 0 && A[i] >= A[queue[queue.length-1]]) {
                    queue.pop();
                }
                queue.push(i);
            }
            // Add the maximum value of the last window
            result.push(A[queue[0]]);
        
            return result;
        }
    };

Ques-4 -> (Reversing Elements Of Queue)

# Problem Description -
    Given an array of integers A and an integer B, we need to reverse the order of the first B elements of the array, 
    leaving the other elements in the same relative order. 
    NOTE: You are required to the first insert elements into an auxiliary queue then perform Reversal of first B elements.

# Problem Constraints -
    1 <= B <= length of the array <= 500000
    1 <= A[i] <= 100000

# Solution -
    module.exports = { 
    //param A : array of integers
    //param B : integer
    //return a array of integers
        solve : function(A, B){
            let queue = [];

            for(let i=0;i<B;i++) {
                queue.unshift(A[i]);
            }
            for(let i=0;i<B;i++) {
                A[i] = queue.shift();
            }
            return A;
        }
    };

Ques-5 -> (N integers containing only 1, 2 & 3)

# Problem Description -
    Given an integer, A. Find and Return first positive A integers in ascending order containing only digits 1, 2, and 3.
    NOTE: All the A integers will fit in 32-bit integers.

# Problem Constraints -
    1 <= A <= 29500

# Solution -
    module.exports = { 
    //param A : integer
    //return a array of integers
        solve : function(A){
            let queue = [];
            let ans = [];

            queue.unshift('3');
            queue.unshift('2');
            queue.unshift('1');
            for(let i=0;i<A;i++) {
                queue.push(queue[i] + '1');
                queue.push(queue[i] + '2');
                queue.push(queue[i] + '3');
            }
            for(let i=0;i<A;i++) {
                ans.push(queue[i]);
            }
            return ans;
        }
    };

Ques-6 -> (Sum of min and max)

# Problem Description -
    Given an array A of both positive and negative integers.
    Your task is to compute the sum of minimum and maximum elements of all sub-array of size B.
    NOTE: Since the answer can be very large, you are required to return the sum modulo 109 + 7.

# Problem Constraints -
    1 <= size of array A <= 105
    -109 <= A[i] <= 109
    1 <= B <= size of array

# Solution -
    module.exports = {
    //param A : array of integers
    //param B : integer
    //return an integer
    calculateMinMaxSum: function (A,minIndex, maxIndex, mod) {
        const max = A[minIndex];
        const min = A[maxIndex];
        const result = (max + min) % mod;
        return result;
    },
    solve: function (A, B) {
        // Approach - 1(Brute Force - Easy testcase passed only)
         let totalSum = 0, mod = Math.pow(10, 9) + 7;
         for(let i=0;i<=A.length-B;i++) {
             let min = Infinity;
             let max = -Infinity;
             for(let j=i;j<i+B;j++) {
                 max = Math.max(max, A[j]);
                 min = Math.min(min, A[j]);
             }
             totalSum += (max + min) % mod;
         }
         return totalSum;


        let sum = 0;
        let mod = Math.pow(10, 9) + 7;
        let deque = [];
        let maxDeque = [];
        let N = A.length;

        for (let i = 0; i < N; i++) {
            while (deque.length > 0 && deque[0] < i-B+1) deque.shift();
            while (maxDeque.length > 0 && maxDeque[0] < i-B+1) maxDeque.shift();

            // Remove all elements smaller than the current from deque
            while (deque.length > 0 && A[deque[deque.length-1]] >= A[i]) {
                deque.pop();
            }
            // Remove all elements larger than the current from deque
            while (maxDeque.length > 0 && A[maxDeque[maxDeque.length-1]] <= A[i]) {
                maxDeque.pop();
            }
            deque.push(i);
            maxDeque.push(i);
            // When the first window is reached
            if(i>=B-1) {
                sum = (sum + this.calculateMinMaxSum(A,deque[0],maxDeque[0], mod) + mod) % mod;
            }
        }
        return sum;
    },
};

Ques-7 -> (Unique Letter)

# Problem Description -
    Imagine you're a teacher. You ask students to call out a letter one by one. After each letter, you jot down the very first letter that's only been called out once. If all letters have been repeated, you write "#".
    Here's a scenario:
        A student says "a". It's the first letter. You write "a".
        Next, a student says "b", "a" is still unique, so you add "a". Now it's "aa".
        A student says "a" again. Now, "b" is the unique one. You add "b", making it "aab".
        A student says "b". All letters so far are repeated. You add "#". It becomes "aab#".
        A student says "c". "c" is unique. You add "c". The final is "aab#c".
        Your task? Given the sequence the students call out A, determine the string on the board.

# Problem Constraints -
    1 <= |A| <= 100000

# Solution -
    module.exports = { 
    //param A : string
    //return a strings
        solve : function(A){
            let map = new Map();
            let queue = [], ans = [];
            for(let i=0;i<A.length;i++) {
                if(!map.has(A[i])) {
                    queue.push(A[i]);
                    map.set(A[i], 1);
                }
                else map.set(A[i], map.get(A[i])+1);

                while(queue.length > 0 && map.get(queue[0]) > 1) queue.shift();
                if(queue.length != 0) ans.push(queue[0]);
                else ans.push('#');
            }
            return ans.join("").toString();
        }
    };
