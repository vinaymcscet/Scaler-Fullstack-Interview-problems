Ques-1 -> (Machine Coding: Q4 Star Component)

    Raw Problem

    Problem Description:

    Write a JS program to make the star rating component work.

    star-gif

    Read the entire problem description carefully to understand the necessary details.

    The HTML code that is provided holds the following components and functions:
    1. div#star-container => Containing 5 span.star inside it.
    2. span.star => Individual star symbol with default grey color.
    3. span#count => Containing the Rating Count, set as default number of '0'

    You have to a JS program such that:
    1. Whenever mouse hovers over any span.star:
    1.1. All the stars till the target span.star, change color to yellow.
    1.2. To do this you need to add class of 'star-filled' to stars that need to be yellow.
    1.3. and remove the class of 'star-filled' from all the stars that need to be of default color. (grey)

    2. Whenever any span.star is clicked on:
    2.1. You need to repeat step 1 to color the stars yellow till the target span.star
    2.2. Update the Rating Count (span#count) with the star points. (Ex: If third star is clicked, rating count becomes 3)
    2.3. Store the value of star points globally, to update the colors when the mouse hovers over or leaves any span.star

    3. Whenever mouse leaves any span.star after hover:
    3.1. Remove the class of 'star-filled' from all the stars beyond the selected star points global value. (set to 0 by default)


    You can refer to the HTML code to understand the specificity of the selectors.
    Please don't make any changes to the HTML and CSS code and structure.

    Use the above information to write the entire JS program in the script.js file or script tag.
    Refer to the test cases to further understand the criteria to submit the problem successfully.

    Feel free to access hints to get help/assistance.


# Solution - 
    <!DOCTYPE html>
    <html lang="en">
    <!-- Please NOTE that the link to assets (like images) need to be set in global context.
    For example:
    To access an image from assets folder correct way to set src attribute is 

    src = 'profile.png'

    instead of 

    src = './assets/profile.png'
    -->

    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Ticket Management App</title>

        <link rel="stylesheet" href="style.css">


    </head>

    <body>
        <div class="container">
            <h1>Star Rating Component</h1>
            <div id="star-container" class="star-container">
                <span class="star" data-index="1">&#9733;</span>
                <span class="star" data-index="2">&#9733;</span>
                <span class="star" data-index="3">&#9733;</span>
                <span class="star" data-index="4">&#9733;</span>
                <span class="star" data-index="5">&#9733;</span>
            </div>
            <h2>Rating Count:
                <span id="count">0</span>
            </h2>
        </div>
        <script>
            // WRITE SOLUTION HERE

            const starContainer = document.querySelector('#star-container');
            const stars = document.querySelectorAll('.star');
            const starCount = document.querySelector('#count');
            let currentRating = 0;

            starContainer.addEventListener('mouseover', function(ev) {
                const currentTarget = ev.target;
                const targetIndex = currentTarget.getAttribute('data-index');
                
                for (let i = 0; i < targetIndex; i++) {
                        stars[i].classList.add("star-filled");
                }
                for (let i = targetIndex; i < stars.length; i++) {
                        starElements[i].classList.remove("star-filled");
                }
            })

            starContainer.addEventListener('click', function(ev) {
                const currentTarget = ev.target;
                const starNumber = currentTarget.getAttribute('data-index');
                currentRating = starNumber;
                starCount.textContent = currentRating;

                for (let i = 0; i < starNumber; i++) {
                        stars[i].classList.add("star-filled");
                }
                
                for (let i = starNumber; i < stars.length; i++) {
                        stars[i].classList.remove("star-filled");
                }
            })

            starContainer.addEventListener('mouseout', function(ev) {
                const currentTarget = ev.target;
                const targetIndex = currentTarget.getAttribute('data-index');

                for (let i = 0; i < currentRating; i++) {
                        stars[i].classList.add("star-filled");
                }
                for (let i = currentRating; i < stars.length; i++) {
                        stars[i].classList.remove("star-filled");
                }
            })
        </script>
    </body>

    </html>

Ques-2 -> (Collapsible Sidebar)

    Designers and developers often incorporate collapsible sidebars in web applications to make efficient use of screen real estate. This feature is particularly useful for applications with numerous options or tools that users don't need to access all the time.

    Your Task
    Your task is to implement a collapsible sidebar for a web application.

    Here is an example of what it should look like:



    Requirements
    You have two main div elements provided in the HTML: a sidebar (#sidebar) and a main content area (#main-content).
    The sidebar should start fully expanded with a width of 250px. The main content should be displayed to the right, filling the rest of the viewport width.
    Include a button (#toggle-button) within the sidebar that will toggle its expanded and collapsed states.
    The sidebar should collapse to a width of 80px when the toggle button is clicked and expand back to 250px when clicked again.
    The main content area should adjust its position so it's always visible and using the available space next to the sidebar (it should have a padding of 80px).
    Apply CSS to enhance the visual appearance according to the specifications given.
    Specifications
    The sidebar should have a background color of #34495e and contain white text. It should also have a padding of 15px 30px
    The toggle button should have a background color of #e74c3c, which changes to #c0392b when hovered over.
    The main content area should have a background color of #f1c40f.
    Instructions for Implementation
    Write JavaScript code in script.js to add the toggle functionality to the sidebar.
    Write CSS in style.css to style the sidebar, the toggle button, and the main content area according to the given specifications.
    Ensure the main content area adjusts its position dynamically when the sidebar is toggled.
    Example Behavior
    Initially, the sidebar is fully expanded with a width of 250px.
    Clicking the #toggle-button collapses the sidebar to 80px, allowing the main content area to use the additional space.
    Clicking the #toggle-button again expands the sidebar back to 250px.

# Solution - 
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 0;
            }

            /* Write CSS Code here */
            * {
                box-sizing: border-box;
            }
            #sidebar {
                width: 250px;
                display: inline-block;
                background-color: #34495e;
                padding: 15px 30px;
                color: #fff;
                height: 100vh;
                position: fixed;
                top: 0;
                left: 0;
            }
            #toggle-button {
                background-color: #e74c3c;
                padding: 10px;
                border: 0;
                font-size: 14px;
                font-weight: 500;
                transition: all 0.3s ease-in-out;
            }
            #toggle-button:hover {
                background-color: #c0392b;
            }
            #main-content {
                width: calc(100vw - 250px);
                margin-left: 250px;
                display: inline-block;
                background-color: #f1c40f;
                height: 100vh;
                padding: 80px;
                transition: all 0.3s ease-in-out;
            }

            #sidebar.active {
                width: 80px;
            }
            #main-content.active {
                width: calc(100vw - 80px);
                margin-left: 80px;
            }
        </style>
        <title>Collapsible Sidebar Challenge</title>
    </head>
    <body>
        <div id="sidebar">
            <button id="toggle-button">Toggle Sidebar</button>
            <p>Sidebar Content</p>
        </div>
        <div id="main-content">Main Content</div>
        <script>
            // Write JS to toggle sidebar functionality here
            const toggleSidebar = document.querySelector('#toggle-button');
            const mainContent = document.querySelector('#main-content');

            toggleSidebar.addEventListener('click', function(ev) {
                const currenTarget = ev.target;
                const parent = currenTarget.parentElement;
                parent.classList.toggle('active');
                mainContent.classList.toggle('active');
            })
        </script>
    </body>
    </html>


Ques-3 -> (JS Accordion)

    Create an interactive accordion component using HTML, CSS, and JavaScript. An accordion is a vertically stacked list of items, each with a header and a content section. When a user clicks on the header, the associated content section should either collapse or expand.
    Your task is to implement the JavaScript functionality to make the accordion work as expected. Each accordion header is a button that, when clicked, should toggle the display of the content section. Initially, all content sections should be hidden.
    NOTE:
    You have to make the accordion-content visible using the display: block property and hidden using the display: none property.

# Solution - 

    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="style.css">
        <title>Accordion Example</title>
    </head>

    <body>
        <div class="accordion">
            <div class="accordion-item">
                <button class="accordion-button">Section 1</button>
                <div class="accordion-content">
                    <p>This is the content for section 1.</p>
                </div>
            </div>
            <div class="accordion-item">
                <button class="accordion-button">Section 2</button>
                <div class="accordion-content">
                    <p>This is the content for section 2.</p>
                </div>
            </div>
            <div class="accordion-item">
                <button class="accordion-button">Section 3</button>
                <div class="accordion-content">
                    <p>This is the content for section 3.</p>
                </div>
            </div>
            <!-- Add more sections as needed -->
        </div>
        <script>
            // Write JS code for accordion here
            const accordians = document.querySelector('.accordion')
            accordians.addEventListener('click', function(ev) {
                
                const currentTarget = ev.target;
                if(currentTarget.classList.contains('accordion-button')) {
                    const parent = currentTarget.parentElement;
                    const accContent = parent.querySelector('.accordion-content')

                    if(accContent.style.display === 'block') accContent.style.display = 'none';
                    else accContent.style.display = 'block';
                }
            })
        </script>
    </body>

    </html>