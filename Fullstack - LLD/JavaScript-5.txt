Ques-1 -> (JS Core - Delayed Sum)

    Write a function delayedSum that takes two integers, a and b, and a callback function callback. The function should use setTimeout to delay calling the callback for 1000 milliseconds and then pass the sum of a and b as an argument to the callback.
    You need to implement the delayedSum function, which will introduce a delay of 1000 milliseconds using setTimeout. After the delay, it should call the provided callback function with the sum of a and b.

    function delayedSum(a, b, callback)
    Example

    delayedSum(3, 5, result => {
        console.log(result); // Expected output after 1000ms: 8
    });

# Solution - 
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
    </head>


    <body>
        <!-- Write your code solution here, inside the main function -->
        <!-- WARNING:
            Don't make any changes outside the given function. (would fail test cases)
            Write the required code and return the correct answer. -->
        <script id='solution' defer>
            function delayedSum(a, b, callback) {
                // write solution here ============
                const sum = a + b;
                setTimeout(() => {
                    callback(sum)
                }, 1000)
            }
        </script>
    </body>

    </html>

Ques-2 -> (JS Core - Periodic Printer)

    Write a function periodicPrinter that takes a callback function and an interval timeInterval in milliseconds. The function should use setInterval to call the callback function every timeInterval milliseconds until explicitly stopped.
    You need to implement the periodicPrinter function, which will use setInterval to repeatedly print the provided message at the specified time interval until stopped.

    Note: Please make sure to return the intervalId from the function, or else the code would never terminate from backend, resulting in failed testcase.

    function periodicPrinter(callback, timeInterval)
    Example

    periodicPrinter(() => {
        console.log("This is callback");
    }, 1000);

    Output:
    Prints "This is callback" at every 1000ms until terminated by backend using clearInterval. (please reutn intervalID from the function)

# Solution - 
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
    </head>


    <body>
        <!-- Write your code solution here, inside the main function -->
        <!-- WARNING:
            Don't make any changes outside the given function. (would fail test cases)
            Write the required code and return the correct answer. -->
        <script id='solution' defer>
            function periodicPrinter(callback, timeInterval) {
                // write solution here ============
                setInterval(() => {
                    callback();
                }, timeInterval)
            }
        </script>
    </body>
    </html>

Ques-3 -> (Arrange Cubes)

    A man has two cubes on his desk. Every day, he arranges the two cubes, so that their front faces display the current day of the month. What numbers should be on the faces of the cubes to achieve this?

    To find the answer:

    Arrange the digits on each cube in ascending order
    then concatenate them together.
    For Example, if the first cube has digits 1, 2, 3, 4, 5, 6 and the second cube has digits 3, 1, 9, 8, 2, 4.

    After sorting:

    First cube: 1, 2, 3, 4, 5, 6
    Second cube: 1, 2, 3, 4, 8, 9
    Then concatenate them together, the answer would be "123456123489"

# Solution - 012345012678

Ques-4 -> (Javascript equality)

    What is the difference between '==' and '===' operator in Javascript.


# Solution - '==' only checks for the value and coerce type while '===' checks for both type and value.