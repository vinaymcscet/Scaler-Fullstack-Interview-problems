Ques-1 -> (JS Core - Make Apply Polyfill)

    Raw Problem

    Write a polyfill for the apply method in JavaScript.

    You need to complete the function applyPolyfill which takes three inputs:
    1. fn - A function on which apply method needs to be polyfilled.
    2. context - The value of this to be used when calling the function.
    3. args - An array of arguments to be passed to the function.

    The function applyPolyfill(fn, context, args), when called, should behave in a similar fashion as the inbuilt Function.prototype.apply() function in JavaScript.
    Refrain from using the inbuilt Function.protoype.apply() function in JS, trivial test case would check for that.


    Example:

    function greet(country) {

    return 'Hello, ' + this.name + ' from '+ country;
    }

    const person = {
    name: 'John',
    };

    const result = applyPolyfill(greet, person, ['India']);
    console.log(result);


    Output:
    Hello, John! from India

# Solution - 
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="utf-8">
        <title>JS</title>
    </head>

    <body>
        <!-- Write your code solution here, inside the applyPolyfill function -->
        <!-- WARNING:
            Don't make any changes outside the given function. (would fail test cases)
            Write the required code and return the correct answer. -->
        <script id='solution' defer>
            function applyPolyfill(fn, context, args) {
                // Write your solution here ========================
                context.fn = fn;

                let result;
                if(args !== undefined && Array.isArray(args)) result = context.fn(...args);
                else result = context.fn()
                delete context.fn;
                return result;
            }
        </script>
    </body>

    </html>

Ques-2 -> (JS Core - Make Call Polyfill)

    Raw Problem

    Write a polyfill for the call method in JavaScript.

    You need to create a polyfill for the call method, which allows you to invoke a function with a specified context and any number of arguments.

    Your task is to implement a function customCall on the Function.prototype object. This function should accept two or more arguments: obj, which represents the context (the value of this) to be used when calling the function, and ...args, which represents the arguments to be passed to the function.

    When the customCall method is called on a function, it should execute the original function with the specified context (obj) and the provided arguments (args).

    Your implementation should not rely on the inbuilt call method in JavaScript.

    Note: Avoid using the inbuilt call method in JavaScript, as trivial test cases will check for that.



    Example:
    function greet() {
    return 'Hello, ' + this.name + '!';
    }

    const person = {
    name: 'John',
    };

    const result = greet.customCall(person);
    console.log(result);

    Output:
    Hello, John!

# Solution - 
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="utf-8">
        <title>JS</title>
    </head>

    <body>
        <!-- Write your code solution here, inside the applyPolyfill function -->
        <!-- WARNING:
            Don't make any changes outside the given function. (would fail test cases)
            Write the required code and return the correct answer. -->
        <script id='solution' defer>
            Function.prototype.customCall = function (obj, ...args) {
                // Write your solution here ========================
                obj.fn = this 
                const res = obj.fn(...args); 
                delete obj.fn 
                return res 
            }
        </script>
    </body>

    </html>


Ques-3 -> (JS Core - Make Bind Polyfill)

    Raw Problem

    Write a polyfill for the bind method in JavaScript.

    You need to create a polyfill for the bind method, which allows you to set the context (the value of this) for a function and optionally preset some initial arguments.

    You should implement a function customBind on the Function.prototype object. This function should accept a single argument obj, which represents the context (the value of this) to be used when calling the function.

    When the customBind method is called on a function, it should return a new function that, when invoked, executes the original function with the specified context (obj) and any additional arguments passed to the bound function.

    Your task is to complete the implementation of the customBind function.

    Example:
    function greet() {
    return 'Hello, ' + this.name + '!';
    }

    const person = {
    name: 'John',
    };

    const boundFunction = greet.customBind(person);
    const result = boundFunction()
    console.log(result);

    Output:
    Hello, John!

# Solution - 
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="utf-8">
        <title>JS</title>
    </head>

    <body>
        <!-- Write your code solution here, inside the applyPolyfill function -->
        <!-- WARNING:
            Don't make any changes outside the given function. (would fail test cases)
            Write the required code and return the correct answer. -->
        <script id='solution' defer>
             Function.prototype.customBind = function (obj) {
                // Write your solution here ========================
                let targetFunction = this;
                return function() {
                    return targetFunction.call(obj)
                }
            }
        </script>
    </body>

    </html>