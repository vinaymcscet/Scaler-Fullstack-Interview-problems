Ques-1 -> (Kanban Q6: Filter with colors)

    Raw Problem
    Write a JavaScript program to:

    Implement the filter feature for the tickets based on the priority colors. (lightpink, lightgreen, lightblue, black)

    color-filter-gif

    Task 1:
    Whenever a particular color is clicked from the toolbox =>
    1.1 Remove all the existing tickets from Document.
    1.2 Only the tickets with the assigned priority colors should be added to the Document.

    Task 2:
    Whenever any of the color is double clicked =>
    1.1 Remove all the existing tickets from Document.
    1.2 All the tickets (regardless of color) should be added to the Document.

    Important information and algorithms:

    1. How to add a ticket to the document?
    createTicket(ticket-task, ticket-color, ticket-id) function has been provided in the script.js,
    this function creates and adds a ticket to the Document with below structure.

    Ticket structure :
    <div class="ticket-cont">
    <div class="ticket-color"></div>
    <div class="ticket-id">id 1</div>
    <div class="task-area"> this is task 1</div>
    <div class="ticket-lock">
    <i class="fa-solid fa-lock"></i>
    </div>


    2. How to access the ticket information (ticket-task, ticket-color, ticket-id)?
    To create the tickets, you would utilise createTicket(ticket-task, ticket-color, ticket-id) function,
    this function requires several parameters as input.
    To access these ticket values, you are provided a global variable ticketsArr
    which is an Array of Objects holding objects containing individual values (ticketTask, ticketColor, ticketID) of 4 tickets.

    3. How to remove all the tickets from the document?
    To remove unwanted tickets from the Document, utilise DOM function Element.remove()
    To select a ticket element to, use class 'ticket-cont', as descibed on the ticket structure above.

    Below are the algorithms that need to be followed for both the tasks,

    Algorithm for Task 1:
    Step 1. After removing every ticket from the Document.
    Step 2. You can access 'ticketsArr' array,
    Step 3. filter it on the basis of the selected color from the toolBox (don't overwrite global array 'ticketsArr')
    Step 4. and create individual tickets for the filtered ticket objects.

    Algorithm for Task 2:
    Step 1. After removing every ticket from the Document.
    Step 2. You can access 'ticketsArr' array,
    Step 3. and create individual tickets for all the ticket objects.

    Further, please focus on passing testcases to submit the problem successfully.


# Solution - 
    <!DOCTYPE html>
    <html lang="en">
    <!-- Please NOTE that the link to assets (like images) need to be set in global context.
    For example:
    To access an image from assets folder correct way to set src attribute is 

    src = 'profile.png'

    instead of 

    src = './assets/profile.png'
    -->

    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Ticket Management App</title>

        <link rel="stylesheet" href="style.css">


    </head>

    <body>
        <!-- TOOL BOX ELEMENTS -->
        <div class="toolbox-cont">
            <div class="toolbox-priority-cont">
                <div class="lightpink color"></div>
                <div class="lightgreen color"></div>
                <div class="lightblue color"></div>
                <div class="black color"></div>
            </div>


        </div>

        <!-- MAIN CONTAINER - Tickets holder -->
        <div class="main-cont">
            <!-- <div class="ticket-cont">
                <div class="ticket-color"></div>
                <div class="ticket-id">id 1</div>
                <div class="task-area"> this  is task 1</div>
                <div class="ticket-lock">
                <i class="fa-solid fa-lock"></i>
            </div> -->
        </div>
        </div>

        <!-- MODAL - Ticket generator window -->
        <div class="modal-cont">

            <textarea class="textArea-cont" placeholder="Enter Your Task" spellcheck="false">

        </textarea>


            <div class="priority-colors-container">
                <div class="lightpink priority-color"></div>
                <div class="lightgreen priority-color"></div>
                <div class="lightblue priority-color"></div>
                <div class="black priority-color active"></div>
            </div>

        </div>

        <script>
            // DUMMY DATA FOR THE COLORS
            let ticketsArr = [
            {
                ticketTask: "This is task 1 (lightgreen)",
                ticketColor: "lightgreen",
                ticketID: "dGSUFjfiq",
            },
            {
                ticketTask: "This is task 2 (black)",
                ticketColor: "black",
                ticketID: "ay8dQS0o1",
            },
            {
                ticketTask: "This is task 3 (lightblue)",
                ticketColor: "lightblue",
                ticketID: "fOqBFgQtx",
            },
            {
                ticketTask: "This is task 4 (lightpink)",
                ticketColor: "lightpink",
                ticketID: "fOqBFgQtx",
            },
            ];

            // CALLING createTicket() function for each value in ticketsArr
            ticketsArr.forEach(function (ticket) {
            createTicket(ticket.ticketTask, ticket.ticketColor, ticket.ticketID);
            });

            // ADDING TICKET TO DOM
            function createTicket(ticketTask, ticketColor, ticketID) {
            let id = ticketID || shortid();
            let ticketCont = document.createElement("div");
            ticketCont.setAttribute("class", "ticket-cont");

            ticketCont.innerHTML = `<div class="ticket-color ${ticketColor}"></div>
                <div class="ticket-id">#${id}</div>
                <div class="task-area">${ticketTask}</div>
                <div class="ticket-lock">
                    <i class="fa-solid fa-lock"></i>
                </div>`;

            let mainCont = document.querySelector(".main-cont");
            mainCont.append(ticketCont);

            if (!ticketID) {
                ticketsArr.push({ ticketTask, ticketColor, ticketID: id });
                localStorage.setItem("tickets", JSON.stringify(ticketsArr));
            }

            console.log(ticketsArr);
            }

        </script>

        <script>
            // Write your solution here =====================================================
            const ticketColors = document.querySelectorAll('.color');
            const mainContainer = document.querySelector('.main-cont');
            ticketColors.forEach(function(ticket) {
                ticket.addEventListener('click', function() {
                    const filter_color = ticket.classList[0];
                    mainContainer.innerHTML = "";
                    addTasks(filter_color);
                })
                ticket.addEventListener('dblclick', function() {
                    mainContainer.innerHTML = "";
                    addAllTasks();
                })
            })

            function addTasks(color) {
                ticketsArr.forEach(function(ticket) {
                    if(ticket.ticketColor  === color) {
                        createTicket(ticket.ticketTask, ticket.ticketColor, ticket.ticketID);
                    }
                })
            }

            function addAllTasks() {
                ticketsArr.forEach(function (ticket) {
                    createTicket(ticket.ticketTask, ticket.ticketColor, ticket.ticketID);
                });

            }
        </script>
    </body>
    </html>

Ques-2 -> (Kanban Q7: Locking Mechanism)

    Raw Problem
    Problem Description:
    Write a JavaScript program in the <script> tag to:

    Implement the locking mechanism feature for all the tickets present.
    locking-mechanism-gif

    The feature works under two different states of locked and unlocked.

    State 1. When the ticket is locked and clicked:

    1. locked button changes to unlocked button.
    2. task-area is set to editable.

    State 2. When the ticket is unlocked and clicked:

    1. unlocked button changes to locked button.
    2. task-area is set to uneditable.

    Important information and algorithms:

    1. How to change the buttons, editability of tasks and keep an account of the state?
    You are provided a single button inside the div.ticket-lock,
    and the structure of the ticket is as follows:

    <div class="ticket-color ${ticketColor}"></div>
    <div class="ticket-id">${id}</div>
    <div class="task-area">${ticketTask}</div>
    <div class="ticket-lock">
    <button>Locked</button>
    </div>

    Based on these, below is the algorithm to be followed.

    Algorithm:
    You can to utilise the class (will be ticket-lock or ticket-unlock) of the parent div of button to find the current state, if its state 1 (locked) or state 2 (unlocked).
    Then whenever the button is clicked:
    In state 1, you need to:
    1. change the class of 'ticket-lock' to 'ticket-unlock'
    2. change the innerText of button from 'Locked' to 'Unlocked'
    3. set the contenteditable attribute of task-area to true

    In state 2, you need to:
    1. change the class of 'ticket-unlock' to 'ticket-lock'
    2. change the innerText of button from 'Unlocked' to 'Locked'
    3. set the contenteditable attribute of task-area to false

    After performing the above steps, it is also important to update the global ticketArr array with the new ticketTask.

    Further, please focus on passing test cases to submit the problem successfully.

# Solution - 
    <!DOCTYPE html>
    <html lang="en">
    <!-- Please NOTE that the link to assets (like images) need to be set in global context.
    For example:
    To access an image from assets folder correct way to set src attribute is 

    src = 'profile.png'

    instead of 

    src = './assets/profile.png'
    -->

    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Ticket Management App</title>

        <link rel="stylesheet" href="style.css">


    </head>

    <body>
        <!-- TOOL BOX ELEMENTS -->
        <div class="toolbox-cont">
            <div class="toolbox-priority-cont">
                <div class="lightpink color"></div>
                <div class="lightgreen color"></div>
                <div class="lightblue color"></div>
                <div class="black color"></div>
            </div>


        </div>

        <!-- MAIN CONTAINER - Tickets holder -->
        <div class="main-cont">
            <!-- <div class="ticket-color ${ticketColor}"></div>
        <div class="ticket-id">${id}</div>
        <div class="task-area">${ticketTask}</div>
        <div class="ticket-lock">
        <button>Locked</button>
        </div> -->
        </div>
        </div>

        <!-- MODAL - Ticket generator window -->
        <div class="modal-cont">

            <textarea class="textArea-cont" placeholder="Enter Your Task" spellcheck="false">

        </textarea>


            <div class="priority-colors-container">
                <div class="lightpink priority-color"></div>
                <div class="lightgreen priority-color"></div>
                <div class="lightblue priority-color"></div>
                <div class="black priority-color active"></div>
            </div>

        </div>

        <script>
        // WARNING: DO NOT EDIT THE BELOW CODE OR DATA

        // DUMMY DATA FOR THE COLORS
            let ticketsArr = [
            {
                ticketTask: "This is task 1 (lightgreen)",
                ticketColor: "lightgreen",
                ticketID: "dGSUFjfiq",
            },
            {
                ticketTask: "This is task 2 (black)",
                ticketColor: "black",
                ticketID: "ay8dQS0o1",
            },
            {
                ticketTask: "This is task 3 (lightblue)",
                ticketColor: "lightblue",
                ticketID: "fOqBFgQtx",
            },
            {
                ticketTask: "This is task 4 (lightpink)",
                ticketColor: "lightpink",
                ticketID: "fOqBFgQtx",
            },
            ];

            // CALLING createTicket() function for each value in ticketsArr
            ticketsArr.forEach(function (ticket) {
            createTicket(ticket.ticketTask, ticket.ticketColor, ticket.ticketID);
            });

            // ADDING TICKET TO DOM
            function createTicket(ticketTask, ticketColor, ticketID) {
                let id = ticketID || shortid();
                let ticketCont = document.createElement("div");
                ticketCont.setAttribute("class", "ticket-cont");

                ticketCont.innerHTML = `<div class="ticket-color ${ticketColor}"></div>
                    <div class="ticket-id">${id}</div>
                    <div class="task-area">${ticketTask}</div>
                    <div class="ticket-lock">
                    <button>Locked</button>
                    </div>`;

                let mainCont = document.querySelector(".main-cont");
                mainCont.append(ticketCont);

                if (!ticketID) {
                    ticketsArr.push({ ticketTask, ticketColor, ticketID: id });
                    localStorage.setItem("tickets", JSON.stringify(ticketsArr));
                }
            }
        </script>
        <script>
            // Write your solution here =====================================================
            const ticketCont = document.querySelectorAll('.ticket-cont');
            ticketCont.forEach(function(ticket) {
                const taskArea = ticket.querySelector('.task-area')
                const ticketLock = ticket.querySelector('.ticket-lock');
                const ticketBtn = ticketLock.children[0];

                ticketBtn.addEventListener('click', function() {
                    if(ticketBtn.innerText === 'Locked') {
                        ticketBtn.innerText = "Unlocked";
                        taskArea.setAttribute("contenteditable" , "true")
                    } else {
                        ticketBtn.innerText = "Locked";
                        taskArea.setAttribute("contenteditable" , "false")
                    }
                })
            })
        </script>
    </body>
    </html>

Ques-3 -> (Kanban Q8: Delete Button)

    Raw Problem
    Problem Description:
    Write a JavaScript program in the <script> tag to:

    Implement the delete feature for all the tickets present.

    delete-button-gif

    The feature should work as follows:
    1. When the Delete Button (div.remove-btn), which is a cross button in the tool bar, is clicked:
    1.1. It gives an alert that the 'delete button has been activated'
    1.2. This means that now if any ticket is clicked, it gets removed from the UI (User Interface)
    1.3. The background color of the div with class 'remove-btn' turns 'red' when the delete button is activated.
    2. When the Delete Button is clicked again:
    2.1. It deactivates the delete button
    2.2. This means now clicking on a ticket would no longer remove it from the UI.
    2.3. The background color of the div with class 'remove-btn' turns back to inherited bgcolor from parent.

    Important information and algorithms:

    1. How to keep an account of states associated with delete button?

    The delete button is in the following structure:
    <div class="action-btn-cont">
    <div class="remove-btn">
    <img src="cross-logo.png" alt="cross-logo" height="50%">
    </div>
    </div>

    Here, div.action-btn-cont is the toolbox containing div.remove-btn with an image of cross inscribed in it.
    So when the the div.remove-btn is clicked, it should make the delete feature work.

    To know whether the delete button is activated or not, you can utlise a global boolean variable working as a Flag.

    Algorithm 1 to set states:
    Whenever delete button is clicked:
    If the Flag says the delete button was inactive:
    1. negate the Flag value.
    2. create an Alert that says 'delete button has been activated'
    3. set the background color of div.remove-btn to 'red'

    If the Flag says the delete button was active:
    1. negate the Flag value.
    2. set the background color of div.remove-btn to 'inherit'

    2. How to remove a ticket from the UI?

    Algorithm 2 to remove a ticket:
    For each of the ticket, add an eventListener of 'click' such that whenever a ticket is clicked,
    it checks the Flag value determing the activation state of the delete button.
    If the Flag says the delete button is inactive:
    1. Don't do anything and return back.

    If the Flag says the delete button is active:
    1. Use the Element.remove() function to remove the ticket from the UI.

    As a bonus:
    After performing the above steps, you can try to update the global ticketArr array by removing the ticket data from it as well.

    Further, please focus on passing test cases to submit the problem successfully.

# Solution - 

    <!DOCTYPE html>
    <html lang="en">
    <!-- Please NOTE that the link to assets (like images) need to be set in global context.
    For example:
    To access an image from assets folder correct way to set src attribute is 

    src = 'profile.png'

    instead of 

    src = './assets/profile.png'
    -->

    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Ticket Management App</title>

        <link rel="stylesheet" href="style.css">

    </head>

    <body>
        <!-- TOOL BOX ELEMENTS -->
        <div class="toolbox-cont">
            <div class="toolbox-priority-cont">
                <div class="lightpink color"></div>
                <div class="lightgreen color"></div>
                <div class="lightblue color"></div>
                <div class="black color"></div>
            </div>

            <div class="action-btn-cont">
                <div class="remove-btn">
                    <img src="cross-logo.png" alt="color-logo" height="50%">
                </div>
            </div>
        </div>

        <!-- MAIN CONTAINER - Tickets holder -->
        <div class="main-cont">
            <!-- <div class="ticket-color ${ticketColor}"></div>
        <div class="ticket-id">${id}</div>
        <div class="task-area">${ticketTask}</div> -->
        </div>
        </div>

        <script>
            // WARNING: DO NOT EDIT THE BELOW CODE OR DATA

            // DUMMY DATA FOR THE COLORS
            let ticketsArr = [
            {
                ticketTask: "This is task 1 (lightgreen)",
                ticketColor: "lightgreen",
                ticketID: "dGSUFjfiq",
            },
            {
                ticketTask: "This is task 2 (black)",
                ticketColor: "black",
                ticketID: "ay8dQS0o1",
            },
            {
                ticketTask: "This is task 3 (lightblue)",
                ticketColor: "lightblue",
                ticketID: "fOqBFgQtx",
            },
            {
                ticketTask: "This is task 4 (lightpink)",
                ticketColor: "lightpink",
                ticketID: "fOqBFgQtx",
            },
            ];

            // CALLING createTicket() function for each value in ticketsArr
            ticketsArr.forEach(function (ticket) {
            createTicket(ticket.ticketTask, ticket.ticketColor, ticket.ticketID);
            });

            // ADDING TICKET TO DOM
            function createTicket(ticketTask, ticketColor, ticketID) {
                let id = ticketID || shortid();
                let ticketCont = document.createElement("div");
                ticketCont.setAttribute("class", "ticket-cont");

                ticketCont.innerHTML = `<div class="ticket-color ${ticketColor}"></div>
                    <div class="ticket-id">${id}</div>
                    <div class="task-area">${ticketTask}</div>`;

                let mainCont = document.querySelector(".main-cont");
                mainCont.append(ticketCont);

                if (!ticketID) {
                    ticketsArr.push({ ticketTask, ticketColor, ticketID: id });
                    localStorage.setItem("tickets", JSON.stringify(ticketsArr));
                }
            }

        </script>
        <script>
            // Write your solution here ====================================================
            const removeBtn = document.querySelector('.remove-btn');
            const ticketCont = document.querySelectorAll('.ticket-cont');
            let removeFlag = false;
            removeBtn.addEventListener('click', function() {
                removeFlag = !removeFlag;
                if(removeFlag) {
                    alert('delete button has been activated');
                    removeBtn.style.background = "red"
                    
                } else {
                    removeBtn.style.background = "inherit";
                }
            })
            ticketCont.forEach(function(ticket) {
                ticket.addEventListener('click', function() {
                    if(removeFlag) {
                            ticket.remove();
                    }
                })
            })
        </script>

    </body>
    </html>

Ques-4 -> (Kanban Q9: Clicking and Changing Ticket Colors)

    Raw Problem
    You need to write JS program, so that

    When the ticket color band (div.ticket-color) is clicked:
    1. It changes the color.
    2. The new color should be picked from 'colors' Array.
    3. The new color should be the next color mentioned in the 'colors' Array.

    For example:

    let colors = ["lightpink", "lightgreen", "lightblue", "black"];

    According to the colors array if the color of the ticket-band is 'lightpink',
    Then after clicking on it, the new color should be 'lightgreen'

    4. To change the color you just need to add the color name as a class to the div.ticket-color element.
    5. Make sure to remove the previous color class from the element.

    For example:

    <div class="ticket-color lightpink"></div>

    after clicking, should become:

    <div class="ticket-color lightgreen"></div>

    Write the code in the script.js file, you have been provided some boilerplate code to help.

# Solution - 

    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Ticket Management App</title>

        <link rel="stylesheet" href="boilerplate.css">

    </head>

    <body>
        <div class="toolbox-cont">
            <div class="toolbox-priority-cont">
                <div class="lightpink color"></div>
                <div class="lightgreen color"></div>
                <div class="lightblue color"></div>
                <div class="black color"></div>
            </div>

            <div class="action-btn-cont">
                <div class="add-btn">
                    <img src="plus-logo.png" alt="color-logo" height="50%">
                </div>
                <div class="remove-btn">
                    <img src="cross-logo.png" alt="color-logo" height="50%">
                </div>
            </div>
        </div>


        <div class="main-cont">
            <div class="ticket-cont">
                <div class="ticket-color lightpink"></div>
                <div class="ticket-id">#0</div>
                <div class="task-area"> this is task 1</div>
                <div class="ticket-lock">
                    <i class="fa-solid fa-lock"></i>
                </div>
            </div>
        </div>



        <!-- Modal -->
        <div class="modal-cont">
            <textarea class="textArea-cont" placeholder="Enter Your Task" spellcheck="false">
        </textarea>


            <div class="priority-colors-container">
                <div class="lightpink priority-color"></div>
                <div class="lightgreen priority-color"></div>
                <div class="lightblue priority-color"></div>
                <div class="black priority-color active"></div>
            </div>

        </div>

        <script>
            let ticket = document.querySelector(".ticket-cont");
            let colors = ["lightpink", "lightgreen", "lightblue", "black"];

            handleColor(ticket)

            function handleColor(ticket) {
                let ticketColorBand = ticket.querySelector(".ticket-color");
            
                ticketColorBand.addEventListener("click", function () {
                // Write code to select the next color from the colors array here--
                const currentTicketColor = ticketColorBand.classList[1];
                const currenColorIndex = colors.findIndex(function (color) {
                    return color === currentTicketColor
                })
                    const newColorIndex = (currenColorIndex + 1) % colors.length;
                    const newColor = colors[newColorIndex];

                    ticketColorBand.classList.remove(currentTicketColor);
                    ticketColorBand.classList.add(newColor);
                });
            }
        </script>
    </body>
    </html>

Ques-5 -> (Kanban Q10: Creating ticketsDB in localstorage)

    You need to write JS program to
    Create a Storage Object names 'ticketsDB' in Browser's localstorage.

    The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin; the stored data is saved across browser sessions. 
    The following snippet accesses the current domain's local Storage object and adds a data item to it using Storage.setItem().

    localStorage.setItem("myCat", "Tom");
    You need to use stringify the Array of Objects 'ticketsArr' provided to you in script.js file
    You can use JSON.stringify() method to acheive this.

# Solution - 

    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Ticket Management App</title>

        <link rel="stylesheet" href="boilerplate.css">

    </head>

    <body>
        <div class="toolbox-cont">
            <div class="toolbox-priority-cont">
                <div class="lightpink color"></div>
                <div class="lightgreen color"></div>
                <div class="lightblue color"></div>
                <div class="black color"></div>
            </div>

            <div class="action-btn-cont">
                <div class="add-btn">
                    <img src="plus-logo.png" alt="color-logo" height="50%">
                </div>
                <div class="remove-btn">
                    <img src="cross-logo.png" alt="color-logo" height="50%">
                </div>
            </div>
        </div>


        <div class="main-cont">
            <div class="ticket-cont">
                <div class="ticket-color lightpink"></div>
                <div class="ticket-id">#0</div>
                <div class="task-area"> this is task 1</div>
                <div class="ticket-lock">
                    <i class="fa-solid fa-lock"></i>
                </div>
            </div>
        </div>



        <!-- Modal -->
        <div class="modal-cont">

            <textarea class="textArea-cont" placeholder="Enter Your Task" spellcheck="false">

        </textarea>


            <div class="priority-colors-container">
                <div class="lightpink priority-color"></div>
                <div class="lightgreen priority-color"></div>
                <div class="lightblue priority-color"></div>
                <div class="black priority-color active"></div>
            </div>

        </div>

        <script>
            let ticketsArr = [
                {
                    ticketTask: "Task 1",
                    ticketColor: "lightpink",
                    ticketID: 0,
                },
            ];

            // Write Code Here =====================
            localStorage.setItem('ticketsDB', JSON.stringify(ticketsArr));
        </script>
    </body>

    </html>