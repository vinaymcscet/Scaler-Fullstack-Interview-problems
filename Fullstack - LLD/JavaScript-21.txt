Ques-1 -> (JS Core - Make Reduce Polyfill)

    Raw Problem

    Write a polyfill of 'reduce'

    You need to complete the function reduce, which receives 2 inputs:
    1. 'arr'
    1.1. An array of numbers
    2. 'reducer'
    2.1. A function that does some mathematical operation on 2 input numbers and returns the resultant.
    2.2. reducer(num1, num2) returns a resultant.

    The function reduce(arr, reducer), when called, should behave in a similar fashion as the inbuilt Array.prototype.reduce() function in JavaScript.
    Refrain from using the inbuilt Array.prototype.reduce() function in JS, a trivial test case would check for that.

    Input :
    arr = [2, 3, 4, 5]
    reducer = fn(a,b){ return a+b }

    reduce(arr, reducer)

    Output :
    14

    Input :
    arr = [2, 3, 4]
    reducer = fn(a,b){ return a-b }

    reduce(arr, reducer)

    Output :
    -5

# Solution - 
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="utf-8">
        <title>JS</title>
    </head>

    <body>
        <!-- Write your code solution here, inside the reduce function -->
        <!-- WARNING:
            Don't make any changes outside the given function. (would fail test cases)
            Write the required code and return the correct answer. -->
        <script id='solution' defer>
            function reduce(arr, reducer) {
                // Write your solution here ========================
                let result = arr[0];
                for (let i = 1; i < arr.length; i++) {
                    result = reducer(result, arr[i]);
                }
                return result;
            }   
        </script>
    </body>

    </html>

Ques-2 -> (JS Core - Make Map Polyfill)

    Raw Problem

    Write a polyfill of 'map'

    You need to complete the function reduce, which receives 2 inputs:
    1. 'arr'
    1.1. An array of numbers
    2. 'callback'
    2.1. A function that takes a number as input, performs some mathematical operation on that number and returns the end value.
    2.2. callback(num) returns a new number.
    2.3. For each element of the input arr, you need to store the returned number in the answer. (mapped array)

    The function map(arr, callback), when called, should behave in similar fashion as inbuilt Array.prototype.map() function in JavaScript.
    Refrain from using the inbuilt Array.protoype.map() function in JS, trivial test case would check for that.


    Example 1:
    arr = [1, 2, 3, 4, 5];
    callback = fn(num) => num * num;

    Output:
    [1, 4, 9, 16, 25]

    Example 2:
    arr = [1, 2, 3, 4, 5];
    callback = fn(num) => num * 2;

    Output:
    [2, 4, 6, 8, 10]

# Solution - 
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="utf-8">
        <title>JS</title>
    </head>

    <body>
        <!-- Write your code solution here, inside the map function -->
        <!-- WARNING:
            Don't make any changes outside the given function. (would fail test cases)
            Write the required code and return the correct answer. -->
        <script id='solution' defer>
            function map(arr, callback) {
                // Write your solution here ========================
                let targetArr = new Array(arr.length);
                for(let i=0;i<arr.length;i++) {
                    targetArr[i] = callback(targetArr, arr[i],i);
                }
                return targetArr;
            }
        </script>
    </body>
    </html>


Ques-3 -> (JS Core - Make Filter Polyfill)

    Raw Problem

    Write a polyfill of 'filter'

    You need to complete the function reduce, which receives 2 inputs:
    1. 'arr'
    1.1. An array of numbers
    2. 'callback'
    2.1. A function that does takes a number as input and returns a true or false value in return.
    2.2. callback(num) returns a boolean.
    2.3. For each element of the array, if returned boolean is:
    2.3.1. True: The element will be in the filtered array.
    2.3.2. False: The element will not be in the filtered array.

    The function filter(arr, callback), when called, should behave in similar fashion as inbuilt Array.prototype.filter() function in JavaScript.
    Refrain from using the inbuilt Array.protoype.filter() function in JS, trivial test case would check for that.


    Example 1:
    arr = [1, 2, 3, 4, 5];
    callback = fn(num) => num % 2 === 0;

    Output:
    [2, 4]

    Example 2:
    arr = [1, 2, 3, 4, 5];
    callback = fn(num) => num < 4;

    Output:
    [1, 2, 3]

# Solution - 
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="utf-8">
        <title>JS</title>
    </head>

    <body>
        <!-- Write your code solution here, inside the filter function -->
        <!-- WARNING:
            Don't make any changes outside the given function. (would fail test cases)
            Write the required code and return the correct answer. -->
        <script id='solution' defer>
            function filter(arr, callback) {
                // Write your solution here ========================
                let resultArr = [];
                for(let i=0;i<arr.length;i++) {
                    if(callback(arr[i])) resultArr.push(arr[i]);
                }
                return resultArr;
            }
        </script>
    </body>

    </html>