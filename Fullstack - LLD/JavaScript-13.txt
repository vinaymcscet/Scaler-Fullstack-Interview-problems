Ques-1 -> (Kanban Q11: Add a new ticket to ticketsDB in localstorage)

    Raw Problem
    You need to write JS program to
    Add a new ticekt to Storage Object of name 'ticketsDB' in Browser's localstorage.

    ```
    The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin; the stored data is saved across browser sessions.
    ```

    The following snippet accesses the current domain's local Storage object and adds a data item to it using Storage.setItem().

    ```
    localStorage.setItem("myCat", "Tom");
    ```

    You are provided with boilerplate code to add a new ticket in the UI from Input in script.js file.
    Inside the exisiting code you need to write your code solution. Marking has been done of the same as a hint.

    You need to make sure that whenever the Input is made in the modal,
    1. ticketsArr is updated with the new ticket information. { ticketTask, ticketColor, ticketID: id }
    2. And then ticketsArr is used as a value and Storage Object ticketsDB is updated with it.

    You need to use stringify the Array of Objects 'ticketsArr' provided to you in script.js file
    You can use JSON.stringify() method to acheive this.

# Solution - 
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Ticket Management App</title>

        <link rel="stylesheet" href="boilerplate.css">

    </head>

    <body>
        <div class="toolbox-cont">
            <div class="toolbox-priority-cont">
                <div class="lightpink color"></div>
                <div class="lightgreen color"></div>
                <div class="lightblue color"></div>
                <div class="black color"></div>
            </div>

            <div class="action-btn-cont">
                <div class="add-btn">
                    <img src="plus-logo.png" alt="color-logo" height="50%">
                </div>
                <div class="remove-btn">
                    <img src="cross-logo.png" alt="color-logo" height="50%">
                </div>
            </div>
        </div>


        <div class="main-cont">
            <!-- <div class="ticket-cont">
                <div class="ticket-color lightpink"></div>
                <div class="ticket-id">#0</div>
                <div class="task-area"> this is task 1</div>
                <div class="ticket-lock">
                    <i class="fa-solid fa-lock"></i>
                </div>
            </div> -->
        </div>



        <!-- Modal -->
        <div class="modal-cont">

            <textarea class="textArea-cont" placeholder="Enter Your Task" spellcheck="false">

        </textarea>


            <div class="priority-colors-container">
                <div class="lightpink priority-color"></div>
                <div class="lightgreen priority-color"></div>
                <div class="lightblue priority-color"></div>
                <div class="black priority-color active"></div>
            </div>

        </div>

        <script defer>
            localStorage.removeItem("ticketsDB");
        </script>
        <script>
            let ticketsArr = [];

            let modalCont = document.querySelector(".modal-cont");
            let mainCont = document.querySelector(".main-cont");
            let taskArea = document.querySelector(".textArea-cont");

            let colors = ["lightpink", "lightgreen", "lightblue", "black"];
            let allPriorityColors = document.querySelectorAll(".priority-color");

            let modalPriorityColor = colors[colors.length - 1];
            let ticketID = 0;

            // fn to add to ticket to the UI
            function createTicket(ticketTask, ticketColor) {
            let id = ticketID++;
            let ticketCont = document.createElement("div");
            ticketCont.setAttribute("class", "ticket-cont");

            ticketCont.innerHTML = `<div class="ticket-color ${ticketColor}"></div>
            <div class="ticket-id">#${id}</div>
            <div class="task-area">${ticketTask}</div>
            <div class="ticket-lock">
            <i class="fa-solid fa-lock"></i>
            </div>`;
            mainCont.append(ticketCont);

            // WRITE CODE HERE=============================================
            ticketsArr.push({ ticketTask, ticketColor, ticketID: id });
            localStorage.setItem('ticketsDB', JSON.stringify(ticketsArr));
            }

            // TICKET IS CREATED WHEN SHIFT IS PRESSED
            modalCont.addEventListener("keydown", function (e) {
            let key = e.key;

            if (key == "Shift") {
                createTicket(taskArea.value, modalPriorityColor);
                modalCont.style.display = "none";
                addFlag = false;
                taskArea.value = "";
            }
            });

            let addBtn = document.querySelector(".add-btn");
            let addFlag = true;

            addBtn.addEventListener("click", function () {
            addFlag = !addFlag;

            if (addFlag == true) {
                modalCont.style.display = "flex";
            } else {
                modalCont.style.display = "none";
            }
            });

        </script>
    </body>

    </html>

Ques-2 -> (Kanban Q12: Deleting a ticket from ticketsDB in localstorage)

    Raw Problem
    Write a JavaScript program in the script.js file to:

    To update the ticketsArr and ticketsDB Storage Object in the localstorage.

    This question is a succession to the question, "Kanban Q8: Button to Delete Ticket from UI"

    You have been provided the boilerplate code that handles the deletion of the ticket from UI,
    you need to add new code to the area marked in the script.js file to ensure the task to update ticketsDB in localstorage.

    Hint:
    You need to write a function first to get the index of the ticket being deleted by matching the ids,
    then use this index to delete the item from the ticketArr and then update the ticketsDB with the updated array after stringifying it.

    You can visit the "Kanban Q8: Button to Delete Ticket from UI" question again to get better idea of the boilerplate code.
    Further, please focus on passing testcases to submit the problem successfully.

# Solution - 
    <!DOCTYPE html>
    <html lang="en">
    <!-- Please NOTE that the link to assets (like images) need to be set in global context.
    For example:
    To access an image from assets folder correct way to set src attribute is 

    src = 'profile.png'

    instead of 

    src = './assets/profile.png'
    -->

    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Ticket Management App</title>

        <link rel="stylesheet" href="style.css">

    </head>

    <body>
        <!-- TOOL BOX ELEMENTS -->
        <div class="toolbox-cont">
            <div class="toolbox-priority-cont">
                <div class="lightpink color"></div>
                <div class="lightgreen color"></div>
                <div class="lightblue color"></div>
                <div class="black color"></div>
            </div>

            <div class="action-btn-cont">
                <div class="remove-btn">
                    <img src="cross-logo.png" alt="color-logo" height="50%">
                </div>
            </div>
        </div>

        <!-- MAIN CONTAINER - Tickets holder -->
        <div class="main-cont">
            <!-- <div class="ticket-color ${ticketColor}"></div>
        <div class="ticket-id">${id}</div>
        <div class="task-area">${ticketTask}</div> -->
        </div>
        </div>

        <script src="ticketGeneration.js"></script>
        <script>
            // FETCHING ALL THE TICKET CONTAINERS IN AN ARRAY
            let ticketContArr = document.querySelectorAll(".ticket-cont");
            let removeBtn = document.querySelector(".remove-btn");

            let removeFlag = false;

            // REMOVE BUTTON HANDLES removeFlag and creates ALERT
            removeBtn.addEventListener("click", function () {
            removeFlag = !removeFlag;

            if (removeFlag === true) {
                alert("delete button has been activated");
                removeBtn.style.backgroundColor = "red";
            } else {
                removeBtn.style.backgroundColor = "inherit";
            }
            });

            // TRAVERSING THROUGH THAT ARRAY
            for (let i = 0; i < ticketContArr.length; i++) {
            // ADDING CLICK EVENTLISTENER TO THE ICON
            ticketContArr[i].addEventListener("click", (e) => {
                if (!removeFlag) return;

                ticketContArr[i].remove(); // ui Removal
                

                // WRITE SOLUTION HERE ============================================
                const ticketId = ticketContArr[i].querySelector('.ticket-id');
                const ticketIDText = ticketId.textContent;
                const storageTicket = JSON.parse(localStorage.getItem('ticketsDB')) || [];
                const currentStorage =  storageTicket.filter(item => item.ticketID != ticketIDText);
                localStorage.setItem('ticketsDB', JSON.stringify(currentStorage));
            });
            }
        </script>
    </body>
    </html>

Ques-3 -> (Kanban Q13: Create tickets UI from the ticketsDB in localstorage)

    Raw Problem
    Write a JavaScript program in the script.js file to:

    Create all the ticket's UI, based on the data present in ticketsDB in localstorage

    This question is a succession to the question, "Kanban Q5: Automate Ticket Creation from Input"

    You have been provided the boilerplate code that handles the creation of a ticket in UI,
    you need to add new code to the area marked in the script.js file to ensure that a ticket is created for all the data present in ticketsDB.

    Hint:
    You need to store the values in Storage Object in an array, with the help of getItem() and JSON.parse() methods.
    For each value (object) in the array, create a corresponding ticket in the UI.

    You can visit the "Kanban Q5: Automate Ticket Creation from Input" question again to get better idea of the boilerplate code.
    Further, please focus on passing testcases to submit the problem successfully.

# Solution - 

    <!DOCTYPE html>
    <html lang="en">
    <!-- Please NOTE that the link to assets (like images) need to be set in global context.
    For example:
    To access an image from assets folder correct way to set src attribute is 

    src = 'profile.png'

    instead of 

    src = './assets/profile.png'
    -->

    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Ticket Management App</title>

        <link rel="stylesheet" href="style.css">

    </head>

    <body>
        <!-- TOOL BOX ELEMENTS -->
        <div class="toolbox-cont">
            <div class="toolbox-priority-cont">
                <div class="lightpink color"></div>
                <div class="lightgreen color"></div>
                <div class="lightblue color"></div>
                <div class="black color"></div>
            </div>

            <div class="action-btn-cont">
                <div class="remove-btn">
                    <img src="cross-logo.png" alt="color-logo" height="50%">
                </div>
            </div>
        </div>

        <!-- MAIN CONTAINER - Tickets holder -->
        <div class="main-cont">
            <!-- <div class="ticket-color ${ticketColor}"></div>
        <div class="ticket-id">${id}</div>
        <div class="task-area">${ticketTask}</div> -->
        </div>
        </div>
        <script defer>
            let ticket = [{
                    ticketTask: "This is task 1 (lightgreen)",
                    ticketColor: "lightgreen",
                    ticketID: "dGSUFjfiq",
                },
                {
                    ticketTask: "This is task 2 (black)",
                    ticketColor: "black",
                    ticketID: "ay8dQS0o1",
                },
                {
                    ticketTask: "This is task 3 (lightblue)",
                    ticketColor: "lightblue",
                    ticketID: "fOqBFgQtx",
                },
                {
                    ticketTask: "This is task 4 (lightpink)",
                    ticketColor: "lightpink",
                    ticketID: "fOqBFgQtx",
                },
            ];

            localStorage.setItem("ticketsDB", JSON.stringify(ticket));
        </script>
        <script>
            // WRITE CODE HERE ===========================================
            const storageTicket = localStorage.getItem("ticketsDB");
            const storageParseTicket = JSON.parse(storageTicket);
            for(let i=0;i<storageParseTicket.length;i++) {
                createTicket(
                    storageParseTicket[i].ticketTask, 
                    storageParseTicket[i].ticketColor, 
                    storageParseTicket[i].ticketID
                );
            }

        // ADDING TICKET TO DOM
        function createTicket(ticketTask, ticketColor, ticketID) {
            let id = ticketID || shortid();
            let ticketCont = document.createElement("div");
            ticketCont.setAttribute("class", "ticket-cont");

            ticketCont.innerHTML = `<div class="ticket-color ${ticketColor}"></div>
                <div class="ticket-id">${id}</div>
                <div class="task-area">${ticketTask}</div>`;

            let mainCont = document.querySelector(".main-cont");
            mainCont.append(ticketCont);
        }
        </script>

    </body>

    </html>