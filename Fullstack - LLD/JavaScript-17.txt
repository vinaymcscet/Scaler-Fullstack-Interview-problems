Ques-1 -> (JS Core - Understanding this in Object Methods)

    You are given an object user with a method getFullName that needs to return the full name of the user.
    Use the 'this' keyword to access the object properties inside the method.

    Test Cases -

    const user = {
        firstName: "John",
        lastName: "Doe",
        getFullName: 'Function code goes here'
    };

    console.log(user.getFullName());  // Output: John Doe

# Solution - 
    const user = {
        firstName: "John",
        lastName: "Doe",
        getFullName: function() {
            return this.firstName + " " + this.lastName;
        }
    };

Ques-2 -> (JS Core - this in Constructor Functions)

    Create a constructor function Person that takes name as a parameter and initializes the object with the provided name. Use the this keyword inside the constructor.

    Test Cases

    const person1 = new Person("Alice");
    console.log(person1.name);  // Output: Alice

# Solution - 
    function Person(name) {
        // Write Code here ====
        this.name = name;
    }

Ques-3 -> (JS Core - this in Nested Objects)

   You are given an object car with properties make and engine.
    You need to complete the engine property such that.
    The engine property should be another object with a method start that logs "Car started: [make]". Use the this keyword to access the make property.

    Test Case:

    const car = {
        make: "Toyota",
        engine: // Write code here 
    };

    car.engine.start();  // Output: 'Car started: Toyota'
    Note: Please pay attention to the whitespaces, since the output will be checked using string matching.

# Solution - 
    const car = {
        make: "Toyota",
        engine: {
            start: function() {
                console.log(`Car started: ${car.make}`)
            }
        }
    };
