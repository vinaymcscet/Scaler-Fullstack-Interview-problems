Ques-1 --> (MCQ_12_1_MERN Security)

# Problem Description - 
    What is the Zero Trust Model?

# Solution - 
    A security model that verifies every request regardless of location

Ques-2 --> (MCQ_12_2_MERN Security)

# Problem Description - 
    Which principle advocates for providing users with the minimum level of access required to perform their job functions?

# Solution - 
    Principle of Least Privilege

Ques-3 --> (MCQ_12_3_MERN Security)

# Problem Description - 
    What does "Reduce Attack Surface" refer to?

# Solution - 
    Limiting the ways in which a system can be attacked

Ques-4 --> (MCQ_12_4_MERN Security)

# Problem Description - 
    Which of the following is an effective way to reduce the attack surface of a web application?

# Solution - 
    Regularly updating software

Ques-5 --> (MCQ_12_5_MERN Security)

# Problem Description - 
    What is password hashing?

# Solution - 
    Creating a unique string representation of a password

Ques-6 --> (MCQ_12_6_MERN Security)

# Problem Description - 
    Why is salting used in password hashing?

# Solution - 
   To protect against rainbow table attacks

Ques-7 --> (MCQ_12_7_MERN Security)

# Problem Description - 
    How does Node.js handle password hashing and salting?

# Solution - 
    Node.js has built-in functions for password hashing and salting

Ques-8 --> (MCQ_12_8_MERN Security)

# Problem Description - 
    Which of the following is a benefit of using bcrypt for password hashing in Node.js?

# Solution - 
    It is more secure than other hashing algorithms

Ques-9 --> (MCQ_12_9_MERN Security)

# Problem Description - 
    In a Node.js application, where should password hashing and salting typically be performed?

# Solution - 
    In the server-side code

Ques-10 --> (MCQ_12_7_MERN Security)

# Problem Description - 
    How does React contribute to the security of a web application?

# Solution - 
    By helping to prevent cross-site scripting (XSS) attacks