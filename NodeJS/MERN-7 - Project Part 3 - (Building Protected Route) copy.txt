Ques-1 --> (Node_express_bcrypt)

# Problem Description - 
    Problem Statement:
    In this coding challenge, you will create a secure user registration backend using Express.js and bcrypt. The goal is to safely store user passwords in a database by hashing them before storage. This ensures that even if the data is compromised, the actual passwords remain protected.
    Set up the Express server with the necessary middleware. Implement the /register endpoint to accept username and password from the request body. Validate the received data. Use bcrypt to hash the received password. Store the username and hashed password in the users array. Send a success response to the client if all steps are successful. Handle possible errors and send appropriate error responses.
    In case of success, the server should return an HTTP status code of 201 along with the message "User registered successfully". In case of failure, the server should return an HTTP status code of 400 along with the message "Username and password are required" if either the username or password is missing. If there is an internal server error during the registration process, the server should return an HTTP status code of 500 along with the message "Internal Server Error".
    Write your code in src/api.js

# Solution - 
    /*********************code to be  written in the stub*************************/
    const express = require("express");
    const bcrypt = require("bcrypt");
    const app = express();
    app.use(express.json());

    const users = []; // In-memory storage for users

    app.post("/register", async (req, res) => {
    /************************learner code ************************/
    // Here goes the learner's code
    const username = req.body.username;
    const password = req.body.password;
    try {
        if(!username || !password) {
        return res.status(400).send({ message: "Username and password are required"})
        }
        const salt = await bcrypt.genSalt(12)
        const hashPassword = await bcrypt.hash(password, salt);
        users.push({
        username,
        password: hashPassword
        })
        return res.status(201).send({ message: "User registered successfully"})
    } catch(err) {
        return res.status(500).send({ message: "Internal Server Error"})
    }
    });

    module.exports = app;
    /***********************code will be provided in stub*******************************/


Ques-2 --> (Node_express_RateLimiting)

# Problem Description - 
    Problem Statement: Implement a rate-limiting middleware for an Express application. The middleware should limit the number of requests from a single IP address to a specified rate, and return a 429 Too Many Requests status if the limit is exceeded.
    Utilize the express-rate-limit library to create a middleware that can keep track of the number of requests from each IP address over a fixed window of time. Configure the Middleware: Set the windowMs to 900000 milliseconds (15 minutes) and max to 100 requests, allowing up to 100 requests per IP per 15 minutes. Apply the Middleware Globally: Integrate the middleware into the application so that it affects all incoming requests, ensuring that every route is protected from excessive use. Handle Exceeded Limits: Customize the response when an IP exceeds the allowed number of requests to return a 429 HTTP status, informing the user that they have sent too many requests in a given amount of time. Handle possible errors and send appropriate error responses.
    Write your code in src/api.js

# Solution - 
    /*********************code to be  written in the stub*************************/
    const express = require('express');
    const rateLimit = require('express-rate-limit');
    const app = express();

    /**
    * Rate-limiting middleware for Express
    * @param {Object} req - Express request object
    * @param {Object} res - Express response object
    * @param {Function} next - Express next function
    */

    /************************learner code ************************/
    // Here goes the learner's code
    const limiter = rateLimit({
    // Configure the rate limiting middleware
    windowMs: 15*60*1000,
    max: 100,
    message: "Too many requests, please try again after 15 minutes!",
    statusCode: 429,
    headers: true,
    });

    // Apply the rate limiting middleware to all requests
    app.use(limiter);

    app.get('/', (req, res) => {
    res.send('Hello World!');
    });

    module.exports = app;
    /***********************code will be provided in stub*******************************/





