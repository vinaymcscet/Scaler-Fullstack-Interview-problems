Ques-1 --> (Node_express_book_crud)

# Problem Description - 
    You are tasked with creating a RESTful API for a simple book management system using the Express framework, middleware for authentication, and MongoDB Atlas as the database backend. Your solution should cover the following requirements:
    Routes and Endpoints:
        GET /books: Fetch a list of all books in the database.
        POST /books: Add a new book to the database. The request body should contain a JSON object with fields title, author, and year.
        GET /books/:id: Fetch a single book by its ID.
        PUT /books/:id: Update a book by its ID. The request body can contain any combination of title, author, and year fields.
        DELETE /books/:id: Delete a book by its ID and respond with ("Book deleted successfully") message.
    Middleware:
        Authentication: Implement an authentication middleware that verifies an API key passed in the Authorization header. If the key is invalid or missing, respond with a 401 Unauthorized status. The key can be hardcoded for simplicity (e.g., "mysecretkey").
        Error Handling: Use try-catch block within your route handling to catch and respond to errors with status 400. If the book is not found with the provided ID, respond with a status 404 with message ("Book not found").
    Write your code in src/api.js


# Solution - 
    const express = require("express");
    const mongoose = require("mongoose");
    const app = express();
    app.use(express.json());

    /** Do not change the connection string below */
    mongoose.connect("mongodb://localhost:27017/myApp", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    });
    /** connection ends */

    const bookSchema = new mongoose.Schema({
    title: String,
    author: String,
    year: Number,
    });

    const Book = mongoose.model("Book", bookSchema);

    // Middleware for authentication
    function authenticate(req, res, next) {
    // Implement authentication logic
    try{
        const token = req.headers["authorization"];
        if(token === "mysecretkey") {
            next();
        } else {
            res.status(401).send("Unauthorized");
        }
    } catch(err) {
        res.status(401).json({ message: "Unauthorized" })
    }
    }
    app.get('/books', authenticate, async(req, res) => {
    try{
        let allBooks = await Book.find();
        return res.send(allBooks);
    } catch(err) {
        res.status(404).send("Book not found");
    }
    });
    app.post('/books', authenticate, async(req, res) => {
    let payload = req.body;
    try {
        const allBooks = new Book(payload);
        const newBook = await allBooks.save();
        return res.send(newBook);
    } catch(err) {
        res.status(404).send("Book not found");
    }
    });
    app.get('/books/:id', authenticate, async(req, res) => {
    let payload = req.params.id;
    try{
        const getBookById = await Book.findById(payload);
        return res.send(getBookById);
    } catch(err) {
        res.status(404).send("Book not found");
    }
    });
    app.put('/books/:id', authenticate, async(req, res) => {
    let payload = req.params.id;
    try{
        const getBookById = await Book.findByIdAndUpdate(payload, req.body, { new: true });
        return res.send(getBookById);
    } catch(err) {
        res.status(404).send("Book not found");
    }
    });
    app.delete('/books/:id', authenticate, async(req, res) => {
    let payload = req.params.id;
    try{
        await Book.findByIdAndDelete(payload);
        return res.send({message: "Book deleted successfully" });
    } catch(err) {
        res.status(404).send("Book not found");
    }
    });
    // Your code goes here.


    module.exports = { app, Book };


Ques-2 --> (Node_express_account_management)

# Problem Description - 
    You are tasked with creating a RESTful API for managing user accounts in a web application. The solution will use the Express framework, middleware for input validation, and MongoDB Atlas as the database backend. The API should cover the following requirements:

    Routes and Endpoints:

    POST /users: Create a new user account. The request body should contain a JSON object with fields username, password, and email.
    GET /users: Fetch a list of all user accounts.
    GET /users/:id: Fetch a single user account by its ID. If user not found, respond with status 404 with message("User not found").
    PUT /users/:id: Update a user's account information. The request body can contain any combination of username, password, or email. If user not found, respond with status 404 with message("User not found").
    DELETE /users/:id: Delete a user's account by its ID and respond with ("User deleted successfully") message.


    Middleware for Input Validation: Check that the username, password, and email fields are valid in the POST and PUT requests:

    username: should be a non-empty string, If not respond with status 400 with message ("Invalid username").
    password: should be a string with at least 6 characters, If not respond with status 400 with message ("Password must be at least 6 characters long").
    email: should be in a valid email format (can use the validator library for this), If not respond with status 400 with message ("Invalid email format").
    If any field is missing, respond with status 400 with message ("Missing required fields").

    Write your code in src/api.js

# Solution - 
    /*********************code to be  written in the stub*************************/
    const express = require("express");
    const app = express();
    const mongoose = require("mongoose");
    app.use(express.json());
    const validator = require("validator");

    /** Do not change the connection string below */
    mongoose.connect(`mongodb+srv://vinaymcscet68:4M6nKb9PEhWAeAMU@cluster0.g0wxqiz.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0`, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    });
    /** connection ends */

    const userSchema = new mongoose.Schema({
    username: { type: String, unique: true },
    password: String,
    email: { type: String, unique: true },
    });

    const User = mongoose.model("User", userSchema);

    // Middleware for input validation
    function validateInput(req, res, next) {
    // Implement validation logic
    try {
        const { username, password, email } = req.body;
        if(!username || typeof username !== "string") res.status(400).send('Invalid username');
        if(!password || typeof password !== "string" || password.length < 6) res.status(400).send('Password must be at least 6 characters long');
        if(!email || !validator.isEmail(email)) res.status(400).send('Invalid email format');
        next();
    } catch(err) {
        res.status(400).send("Missing required fields");
    }
    }

    // Your code goes here.
    /** Routes */
    app.post("/users", validateInput, async(req, res) => {
    try {
        const user = new User(req.body);
        await user.save();
        return res.send(user);
    } catch(err) {
        return res.status(500).send(err);
    }
    })
    app.get("/users", async(req, res) =>{
    try {
        const findUser = await User.find();
        return res.json(findUser);
    } catch(err) {
        res.status(500).send(err);
    }
    })
    app.get("/users/:id", async(req, res) =>{
    try {
        const users = await User.findById(req.params.id);
        if (!users) {
        return res.status(404).send("User not found");
        }
        return res.send(users);
    } catch(err) {
        res.status(404).send("User not found");
    }
    })
    app.put("/users/:id", validateInput, async(req, res) =>{
    try {
        const { username, password, email } = req.body;
        const users = await User.findByIdAndUpdate(req.params.id, { username, password, email }, { new: true });
        if (!users) {
        return res.status(404).send("User not found");
        }
        return res.json(users);
    } catch(err) {
        res.status(404).send("User not found");
    }
    })
    app.delete("/users/:id", async(req, res) =>{
    try {
        const users = await User.findByIdAndDelete(req.params.id);
        if (!users) {
        return res.status(404).send("User not found");
        }
        return res.json("User deleted successfully");
    } catch(err) {
        res.status(404).send("User not found");
    }
    })
    module.exports = { app, User };
