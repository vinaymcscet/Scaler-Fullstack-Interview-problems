Ques-1 --> (Node_express_GET_route)

# Problem Description - 
    You need to create a GET route at the path "/movies" using Express.js. This route will be responsible for retrieving all movie records from a MongoDB database and responding with the result in JSON format. The database contains a collection of movies, each adhering to a specific schema (which is provided in the code stub). Your task is to implement the GET route so that it connects to the MongoDB database, retrieves all movie.
    Define a GET route at the path "/movies".
    The GET route should retrieve all movies from the MongoDB database and respond with the result.
    Initialize dependencies by importing and configuring necessary libraries (express, mongoose). Implement a GET route at "/movies" that queries all movies from the database using Movie.find(). Use try-catch blocks within your route handling to catch and respond to errors with status 500.
    Write your code in src/api.js

# Solution - 
    const express = require("express");
    const mongoose = require("mongoose");
    const app = express();
    app.use(express.json());

    /** Do not change the connection string below */
    mongoose.connect("mongodb://localhost:27017/myApp", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    });
    /** connection ends */

    const Movie = mongoose.model(
    "Movie",
    new mongoose.Schema({
        title: { type: String, required: true },
        description: { type: String, required: true },
        duration: { type: Number, required: true },
        genre: { type: String, required: true },
        language: { type: String, required: true },
        releaseDate: { type: Date, required: true },
        poster: { type: String, required: true },
    })
    );

    // Your code goes here.
    app.get('/movies', async(req, res) => {
    try {
        const allMovies = await Movie.find();
        return res.status(200).send(allMovies);
    } catch {
        return res.status(500)
    }
    })

    module.exports = { app, Movie };

Ques-2 --> ( Node_express_POST_route)

# Problem Description - 
    You need to create a POST route at the path "/movies" using Express.js. This route will be responsible for accepting JSON data to create a new movie in the MongoDB database and responding with the created movie. The database contains a collection of movies, each adhering to a specific schema (which is provided in the code stub). Your task is to implement the POST route so that it connects to the MongoDB database, creates a new movie record with the provided JSON data, and sends the created movie back.
    Define a POST route at the path "/movies".
    The POST route should accept JSON data, create a new movie in the MongoDB database, and respond with the created movie.
    Set up dependencies by importing necessary libraries (express, mongoose) and ensuring Express is set up to parse JSON bodies. Implement a POST route at "/movies" that accepts JSON data, creates a new Movie instance, saves it to the database, and returns the created movie document. Use try-catch blocks within your route handling to catch and respond to errors with status 500.
    Write your code in src/api.js

# Solution - 
    const express = require("express");
    const mongoose = require("mongoose");
    const app = express();
    app.use(express.json());

    /** Do not change the connection string below */
    mongoose.connect("mongodb://localhost:27017/myApp", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    });
    /** connection ends */

    const Movie = mongoose.model(
    "Movie",
    new mongoose.Schema({
        title: { type: String, required: true },
        description: { type: String, required: true },
        duration: { type: Number, required: true },
        genre: { type: String, required: true },
        language: { type: String, required: true },
        releaseDate: { type: Date, required: true },
        poster: { type: String, required: true },
    })
    );

    // Your code goes here.
    app.post("/movies", async(req, res) => {
    const body = req.body;
    try{
        const newMovie = await Movie.create({
        title: body.title,
        description: body.description,
        duration: body.duration,
        genre: body.genre,
        language: body.language,
        releaseDate: body.releaseDate,
        poster: body.poster,
        })
        await newMovie.save();
        return res.status(200).send(newMovie);
    } catch (err) {
        return res.status(500).send("internal server error");
    }
    })

    module.exports = { app, Movie };

Ques-3 --> (Node_express_PUT_route)

# Problem Description - 
    You are developing a web application using Express in Node.js. Create an Express route that handles PUT requests to the endpoint "/movies/". This route should update a movie by its ID in the MongoDB database and respond with the updated movie's data.
    Define a PUT route at the path "/movies/:id".
    The PUT route should update a movie by ID from the MongoDB database and respond with the updated movie's data.
    Set up dependencies by importing necessary libraries (express, mongoose) and ensuring Express is set up to parse JSON requests. Implement a PUT route at "/movies/:id" that uses Movie.findByIdAndUpdate to update the movie based on the provided ID and request body. Use the option { new: true } to return the updated document. If the movie is not found with the provided ID, respond with a 404 error("Movie not found"). Use try-catch block within your route handling to catch and respond to errors with status 500.
    Write your code in src/api.js

# Solution - 
    const express = require("express");
    const mongoose = require("mongoose");
    const app = express();
    app.use(express.json());

    /** Do not change the connection string below */
    mongoose.connect("mongodb://localhost:27017/myApp", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    });
    /** connection ends */

    const Movie = mongoose.model(
    "Movie",
    new mongoose.Schema({
        title: { type: String, required: true },
        description: { type: String, required: true },
        duration: { type: Number, required: true },
        genre: { type: String, required: true },
        language: { type: String, required: true },
        releaseDate: { type: Date, required: true },
        poster: { type: String, required: true },
    })
    );

    // Your code goes here.
    app.put('/movies/:id', async(req, res) => {
    const Id = req.params.id;
    try {
        const updatedMovie = await Movie.findByIdAndUpdate(Id, req.body, {new: true});
        if(!updatedMovie) return res.status(404).json({ message: "Movie not found" });
        res.json(updatedMovie)
    } catch (err) {
        return res.status(500).send("An error occurred while updating the movie");
    }
    })

    module.exports = app;


Ques-4 --> (Node_express_DELETE_route)

# Problem Description - 
    You are developing a web application using Express in Node.js. Create an Express route that handles DELETE requests to the endpoint "/movies/". This route should delete a movie by its ID from the MongoDB database and respond with a success message("successful element deleted").
    Define a DELETE route at the path "/movies/:id".
    The DELETE route should delete a movie by ID from the MongoDB database and respond with a success message.
    Set up dependencies and middleware by using express for server setup and mongoose for database interactions, and initialize middleware to parse JSON bodies. Implement a DELETE route at "/movies/:id" to handle the deletion of a movie by ID using Movie.findByIdAndDelete. Check if the movie exists before deletion; respond with a status 404 error("Movie not found") if not found. On successful deletion, return a success message("successful element deleted") with status 200. Use try-catch blocks within your route handling to catch and respond to errors with status 500.
    Write your code in src/api.js

# Solution - 
    const express = require("express");
    const mongoose = require("mongoose");
    const app = express();
    app.use(express.json());

    /** Do not change the connection string below */
    mongoose.connect("mongodb://localhost:27017/myApp", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    });
    /** connection ends */

    const Movie = mongoose.model(
    "Movie",
    new mongoose.Schema({
        title: { type: String, required: true },
        description: { type: String, required: true },
        duration: { type: Number, required: true },
        genre: { type: String, required: true },
        language: { type: String, required: true },
        releaseDate: { type: Date, required: true },
        poster: { type: String, required: true },
    })
    );

    // Your code goes here.
    app.delete('/movies/:id', async(req, res) => {
    try {
        const Id = req.params.id;
        const deletedMovie = await Movie.findByIdAndDelete(Id);
        if(!deletedMovie) return res.status(404).json({ message: "Movie not found" });
        return res.status(200).json({ message: 'successful element deleted' });
    } catch(err) {
        return res.status(500).send("An error occured while deleting a Movie");
    }
    })
    module.exports = app;



