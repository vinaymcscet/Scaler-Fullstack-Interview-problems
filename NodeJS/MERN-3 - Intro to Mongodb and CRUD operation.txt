Ques-1 --> (Node_express_mongodb_connection)

# Problem Description - 
    You are tasked with creating a basic Express.js application. The application should perform the following operations:
    Connect to a MongoDB database using the Mongoose ORM.
    Define a Mongoose model for a Product with fields for name, brand, price, and specs.
    Define two routes: a GET route at the path "/products" and a POST route at the path "/products".
    The GET route should retrieve all products from the MongoDB database and respond with the result.
    The POST route should accept JSON data in the format { "name": "Smartphone", "brand": "XYZ", "price": 699, "specs": { "display": "6.5 inches", "storage": "128GB", "camera": "Quad-camera setup" } }, create a new product in the MongoDB database, and respond with the created product.
    Use async/await syntax for handling asynchronous operations.
    Setup dependencies and middleware by importing necessary libraries (express, mongoose) and configuring Express to use middleware for JSON parsing.
    Implement routes by creating a GET route at "/products" to fetch all products from the database using Product.find() and return them in JSON format, and a POST route at "/products" to accept data in JSON format, create a new Product instance, save it to the database, and return the created product. Add error handling by including try-catch blocks in your async functions to handle and respond to errors appropriately. Set status to 200 in try block and 400 in catch block while sending response.
    Write your code in src/api.js

# Solution - 
    const express = require("express");
    const mongoose = require("mongoose");
    const app = express();
    app.use(express.json());

    /** Do not change the connection string below */
    mongoose.connect("mongodb://localhost:27017/myApp", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    });
    /** connection ends */

    const productSchema = mongoose.Schema({
    name: { type: String, required: true },
    brand: { type: String },
    price: { type: Number, min: 0 },
    specs: { type: Object },
    }, { timestamps: true });
    const Product = mongoose.model("product", productSchema);

    // Your code goes here
    app.post("/products", async(req, res) => {
    try{
        const body = req.body;
        const product = await Product.create({
        name: body.name,
        brand: body.brand,
        price: body.price,
        specs: body.specs,
        })
        return res.status(201).json(product);
    } catch(err) {
        return res.status(400).json({err});
    }
    })

    app.get("/products", async(req, res) => {
    try {
        const allProducts = await Product.find();
        return res.status(200).json(allProducts);
    } catch(err) {
        return res.status(400).json({err})
    }
    })

    module.exports = { app, Product };


Ques-2 --> (Node_express_mongodb_ID)

# Problem Description - 
    You are tasked with creating a basic Express.js application. The application should perform the following operations:

    Connect to a MongoDB database using the Mongoose ORM.
    Define a Mongoose model for a User with fields for name and email.
    Define a GET route at the path "/users/:id".
    The GET route should retrieve a user by ID from the MongoDB database and respond with the result. The ID should be provided as a parameter in the URL.
    Use async/await syntax for handling asynchronous operations.
    Setup dependencies by importing necessary libraries (express, mongoose). Implement the GET route at "/users/:id" to retrieve a user by their ID using User.findById() from Mongoose, passing the id parameter from the URL. Add error handling by checking if no user is found and responding with a 404 status. Use a try-catch block to handle and respond to any errors during database operations with status 500 and message: "Internal server error".
    Write your code in src/api.js

# Solution - 
    const express = require("express");
    const mongoose = require("mongoose");
    const app = express();
    app.use(express.json());

    /** Do not change the connection string below */
    mongoose.connect("mongodb://localhost:27017/myApp", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    });
    /** connection ends */

    const User = mongoose.model(
    "User",
    new mongoose.Schema({
        name: { type: String },
        email: { type: String },
    })
    );

    // Your code goes here
    app.get("/users/:id", async(req, res) => {
    try {
        const id = req.params.id;
        const fetchedUser = await User.findById(id);
        if(!fetchedUser)  return res.status(404).json({error:"No user found"});
        return res.status(200).json(fetchedUser)
    } catch(err) {
        return res.status(500).json({message: "Internal server error"});
    }
    })

    module.exports = { app, User };



