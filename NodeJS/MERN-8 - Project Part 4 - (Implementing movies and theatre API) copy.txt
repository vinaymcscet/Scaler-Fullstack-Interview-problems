Ques-1 --> (Node_express_middleware)

# Problem Description - 
    Create an Express middleware function that logs the date and time (timestamp) along with the HTTP method of every incoming request to the server. This middleware will help in monitoring the activity and troubleshooting by providing a simple but informative log of all requests handled by the server.
    Import the express module and create an Express application instance. Create the requestLoggerMiddleware function that logs the timestamp and HTTP method of each request. Apply the middleware globally so that it affects all incoming requests. Define a route to test the middleware functionality. Configure the server to listen on a designated port. Export the application for testing purposes.
    Write your code in src/api.js


# Solution - 
    /*********************code to be  written in the stub*************************/
    const { timeStamp } = require('console');
    const express = require('express');
    const fs = require('fs');
    const app = express();
    /*********************code to be  written in the stub*************************/
    /**
    * Express middleware to log incoming requests
    * @param {Object} req - Express request object
    * @param {Object} res - Express response object
    * @param {Function} next - Express next function
    */
    function requestLoggerMiddleware(req, res, next) {
    /************************learner code ************************/
    // Here goes the learner's code
    const body = req.method;
    const timestamp = new Date().toISOString();
    try {
        console.log(`${body} request received`);
        console.log(timestamp);
        next();
    } catch(err) {
        console.log(err);
    }
    }

    app.use(requestLoggerMiddleware);

    module.exports = app;
    /***********************code will be provided in stub*******************************/



Ques-2 --> (Node_express_check_age)

# Problem Description - 
    You need to develop a middleware for an Express.js application that validates the query parameter age for a specific route. The route /check-age should only process requests where the age parameter is a number between 18 and 65. If the age is not within this range, or if it's not provided, the middleware should respond with an appropriate error message.
    Create the basic Express server setup and install Express if not already installed. Write the validateAge middleware:
    Extract the age from req.query.
    Convert age to a number and check if it's within the specified range.
    Respond with an error message if the validation fails.
    Use next() to continue to the route handler if the validation succeeds. Define the /check-age route to use the middleware and return a json success message "Age is within the required range.", if it fails return a code of 400 and json message with error : "Invalid age. Age must be a number between 18 and 65."
    Write your code in src/api.js

# Solution - 
    /*********************code to be  written in the stub*************************/
    /*********************code to be  written in the stub*************************/
    const express = require('express');
    const app = express();

    // Middleware to validate age
    function validateAge(req, res, next) {
    /************************learner code ************************/
    // Here goes the learner's code
    let age = Number(req.query.age);
    try{
        if(age >= 18 && age <= 65) {
        next();
        } else if(age === "") {
        return res.status(400).send({ error: "Invalid age. Age must be a number between 18 and 65."})
        } else {
        return res.status(400).send({ error: "Invalid age. Age must be a number between 18 and 65."})
        }
    } catch(err) {
        console.warn(err);
    }
    }

    // Route that requires age validation
    app.get("/check-age", validateAge, (req, res) => {
    res.json({ message: "Age is within the required range." });
    });

    module.exports = app;