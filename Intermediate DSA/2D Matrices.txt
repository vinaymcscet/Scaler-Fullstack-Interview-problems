Ques-1 --> (Column Sum)

# Problem Description - 
    You are given a 2D integer matrix A, return a 1D integer array containing column-wise sums of original matrix.

# Problem Constraints - 
    1 <= A.size() <= 103
    1 <= A[i].size() <= 103
    1 <= A[i][j] <= 103

# Solution - 
    module.exports = { 
    //param A : array of array of integers
    //return a array of integers
        solve : function(A){
            let N = A.length;
            let M = A[0].length;
            let total_sum = [];
            for(let j=0;j<M;j++) {
                let sum = 0;
                for(let i=0;i<N;i++) {
                    sum += A[i][j];
                }
                total_sum.push(sum);
            }
            return total_sum;
        }
    };

Ques-2 --> (Main Diagonal Sum)

# Problem Description -
    You are given a N X N integer matrix. You have to find the sum of all the main diagonal elements of A.
    Main diagonal of a matrix A is a collection of elements A[i, j] such that i = j

# Problem Constraints - 
    1 <= N <= 103
    -1000 <= A[i][j] <= 1000

# Solution - 
    module.exports = { 
 //param A : array of array of integers
 //return an integer
	solve : function(A){
        let N = A.length;
        //First Approach
        let sum = 0;
        for(let i=0;i<N;i++) {
            for(let j=0;j<N;j++) {
                if(i == j) {
                    sum += A[i][j];
                }
            }
        }
        return sum;

        // second Approach
        let i=0, sum = 0;
        while (i<N) {
            sum += A[i][i];
            i++;
        }
        return sum;
	}
};

Ques-3 --> (Anti Diagonals)

# Problem Description - 
    Give a N * N square matrix A, return an array of its anti-diagonals. Look at the example for more details.  

# Problem Constraints - 
    1<= N <= 1000
    1<= A[i][j] <= 1e9

# Solution - 
    module.exports = { 
    //param A : array of array of integers
    //return a array of array of integers
        diagonal : function(A){
                let N = A.length;
                let M = 2 * N - 1;
                let sum = new Array(M).fill(0).map(() => new Array(N).fill(0));

                for (let i = 0; i < N; i++) {
                    let k = 0, l = i, b = l;
                    while (k < N && l >= 0) {
                        sum[b][k] = A[k][l];
                        k++;
                        l--;
                    }
                }

                let z = A.length;
                for (let j = 1; j < N; j++) {
                    let l = j, m = A.length - 1;

                    while (l < N && M >= 0) {
                        sum[z][l - j] = A[l][m];
                        l++;
                        m--;
                    }
                    z++;
                }

                return sum;

                let result = [];
                let N = A.length;
                // Iterate over the top row and rightmost column
                for (let i = 0; i < 2 * N - 1; i++) {
                    let row = [];
                    // Define the starting point based on the position of iteration
                    let rowStart = i < N ? 0 : i - N + 1;
                    let colStart = i < N ? i : N - 1;
                    // Traverse along the anti-diagonal and collect elements
                    for (let j = 0; j <= i && rowStart < N && colStart >= 0; j++) {
                        row.push(A[rowStart][colStart]);
                        rowStart++;
                        colStart--;
                    }
                    // Pad the row with zeros to make it equal in length
                    while (row.length < N) {
                        row.push(0);
                    }
                    // Add the collected anti-diagonal to the result array
                    result.push(row);
                }
            return result;
        }
    };

Ques-4 --> (Matrix Transpose)

# Problem Description - 
    Given a 2D integer array A, return the transpose of A.
    The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.

# Problem Constraints - 
    1 <= A.size() <= 1000
    1 <= A[i].size() <= 1000
    1 <= A[i][j] <= 1000

# Solution - 
    module.exports = { 
    //param A : array of array of integers
    //return a array of array of integers
        solve : function(A){
            
            let N = A.length;
            let M = A[0].length;
            let finalArr = [];
            
            for(let i=0;i<M;i++) {
                let current = [];
                for(let j=0;j<N;j++) {
                    current.push(A[j][i]);
                }
                finalArr.push(current);
            }
            return finalArr;
        }
    };

Ques-5 --> (Rotate Matrix)

# Problem Description - 
    You are given a n x n 2D matrix A representing an image.
    Rotate the image by 90 degrees (clockwise).
    You need to do this in place.
    Note: If you end up using an additional array, you will only receive partial score.

# Solution - 
    module.exports = { 
        //param A : array of array of integers 
        //return nothing 
        solve : function(A){ 
            let N = A.length;
            // transpose matrix
            for(let i=0;i<N;i++) {
                for(let j=0;j<=i;j++) {
                    let temp = A[i][j];
                    A[i][j] = A[j][i];
                    A[j][i] = temp;
                }
            }
            //reverse matrix
            //approach - 1
            for(let k=0;k<A.length;k++) {
                let m=0;
                let n = A[k].length-1;
                while(m<n) {
                    let temp = A[k][m];
                    A[k][m] = A[k][n];
                    A[k][n] = temp;
                    m++;
                    n--;
                }   
            }
            // approach - 2
            for(const row of mat){
                row.reverse();
            }
        } 
    };

Ques-6 --> (Matrix Scalar Product)

# Problem Description - 
    You are given a matrix A and and an integer B, you have to perform scalar multiplication of matrix A with an integer B.

# Problem Constraints - 
    1 <= A.size() <= 1000
    1 <= A[i].size() <= 1000
    1 <= A[i][j] <= 1000
    1 <= B <= 1000

# Solution - 
    module.exports = { 
    //param A : array of array of integers
    //param B : integer
    //return a array of array of integers
        solve : function(A, B){
            let N = A.length;
            let M = A[0].length;
            let result = [];

            for(let i=0;i<N;i++) {
                let current = [];
                for(let j=0;j<M;j++) {
                    current.push(A[i][j]*B);
                }
                result.push(current);
            }
            return result;
        }
    };

Ques-7 --> (Add the matrices)

# Problem Description - 
    You are given two matrices A & B of same size, you have to return another matrix which is the sum of A and B.
    Note: Matrices are of same size means the number of rows and number of columns of both matrices are equal.
    The Following will give you an idea of matrix addition:

# Problem Constraints - 
    1 <= A.size(), 
    B.size() <= 1000 1 <= A[i].size(),
    B[i].size() <= 1000 1 <= A[i][j], 
    B[i][j] <= 1000

# Solution - 
    module.exports = { 
    //param A : array of array of integers
    //param B : array of array of integers
    //return a array of array of integers
        solve : function(A, B){
            let N = A.length;
            let M = A[0].length;
            let result = [];

            for(let i=0;i<N;i++) {
                let current = [];
                for(let j=0;j<M;j++) {
                    current.push(A[i][j] + B[i][j]);
                }
                result.push(current);
            }
            return result;
        }
    };

Ques-8 --> (Row Sum)

# Problem Constraints - 
    1 <= A.size() <= 103
    1 <= A[i].size() <= 103
    1 <= A[i][j] <= 103

# Solution - 
    module.exports = { 
    //param A : array of array of integers
    //return a array of integers
        solve : function(A){
            let N = A.length;
            let M = A[0].length;
            let result_arr = [];
            
            for(let i=0;i<N;i++) {
                let sum = 0
                for (let j=0;j<M;j++) {
                    sum += A[i][j];
                }
                result_arr.push(sum)
            }
            return result_arr;
        }
    };

Ques-9 --> (Minor Diagonal Sum)

# Problem Description - 
    You are given a N X N integer matrix. You have to find the sum of all the minor diagonal elements of A.
    Minor diagonal of a M X M matrix A is a collection of elements A[i, j] such that i + j = M + 1 (where i, j are 1-based).

# Problem Constraints - 
    1 <= N <= 103
    -1000 <= A[i][j] <= 1000

# Solution - 
    module.exports = { 
    //param A : array of array of integers
    //return an integer
        solve : function(A){
            let N = A.length, sum=0;

            let i=0, j=N-1;
            while(i<N) {
                sum += A[i][j];
                i++;
                j--;
            }
            return sum;
        }
    };
