Ques-1 --> (Find all the subarrays)

Given A = [1, -2, 5, 2, -1, 6]. Choose all the valid subarrays of the array

# Solution - [1], [-2], [5], [2], [-1], [6], [1, -2], [1, -2, 5], [1, -2, 5, 2], [1, -2, 5, 2, -1], [1, -2, 5, 2, -1, 6], [-2, 5], 
[-2, 5, 2], [-2,5,2,-1], [-2,5,2,-1,6], [5,2], [5,2,-1], [5,2,-1,6], [2,-1], [2,-1,6], [-1,6]

total subarray - n(n+1)/2- => 21

Ques-2 --> (closest MinMax)

# Problem Description - 
    Given an array A, find the size of the smallest subarray such that it contains at least one occurrence of the maximum value of the array
    and at least one occurrence of the minimum value of the array.

# Problem Constraints - 1 <= |A| <= 2000

# Solution - 
    module.exports = { 
    //param A : array of integers
    //return an integer
        solve : function(A){
            let max_value = Math.max(...A);
            let min_value = Math.min(...A);
            let last_min_index = -1;
            let last_max_index = -1;
            let answer = Math.max(...A);
            if(max_value == min_value) {
                return 1;
            }
            for(let i=0;i<A.length;i++) {
                if(A[i] == min_value) {
                    if(last_max_index !== -1) {
                        answer = Math.min(answer, i-last_max_index+1);
                    }
                    last_min_index = i;
                } else if(A[i]==max_value){
                    if(last_min_index !== -1) {
                        answer = Math.min(answer, i-last_min_index+1);
                    }
                    last_max_index = i;
                }
            }
            return answer;
        }
    };

Ques-3 --> (Special Subsequences "AG")

# Problem Description
    You have given a string A having Uppercase English letters.
    You have to find how many times subsequence "AG" is there in the given string.
    NOTE: Return the answer modulo 109 + 7 as the answer can be very large.

# Problem Constraints
    1 <= length(A) <= 105

# Solution - 
    module.exports = { 
    //param A : string
    //return an integer
        solve : function(A){

            //Approach - 1
            let count = 0;
            for(let i=0;i<A.length;i++) {
                if(A[i] == 'A' || A[i] == 'a') {
                    for(let j=i+1;j<A.length;j++) {
                        if(A[j] == 'G' || A[j] == 'g') {
                            count++;
                        }
                    }
                }
            }
            return count;

            // Approach - 2
            let result = 0;
            let countA = 0;
            let mod;
            for(let i=0;i<A.length;i++) {
                if(A[i] == 'A') {
                    countA++;
                } else if(A[i] == 'G') {
                    result += countA;
                }
            }
            mod = Math.pow(10,9) + 7;
            result %=mod;
            return result;
        }
    };

Ques-4 --> (Total Number of Subarrays)

Given an array of size 21, find the total number of subarrays of the array.

# Solution - n*(n+1)/2  => 21(22)/2 => 231

Ques-5 --> (Subarray in given range)

# Problem Description
    Given an array A of length N, return the subarray from B to C.

# Problem Constraints
    1 <= N <= 105
    1 <= A[i] <= 109
    0 <= B <= C < N

# Solution - 
    module.exports = { 
    //param A : array of integers
    //param B : integer
    //param C : integer
    //return a array of integers
        solve : function(A, B, C){
            let start = B, end = C;
            let subArray = [];
            for(let i=start;i<=end;i++) {
                subArray.push(A[i]);
            }
            return subArray;
        }
    };

Ques-6 --> (Generate all subarrays)

# Problem Description
    You are given an array A of N integers.
    Return a 2D array consisting of all the subarrays of the array

# Note : The order of the subarrays in the resulting 2D array does not matter.

# Problem Constraints
    1 <= N <= 100
    1 <= A[i] <= 105

# Solution - 
    module.exports = { 
    //param A : array of integers
    //return a array of array of integers
        solve : function(A){
            let subArray=[];
            for(let start=0;start<A.length;start++) {
                for(let end=0;end<=start;end++) {
                    let dummyArray = [];
                    for(let i=end;i<=start;i++) {
                        dummyArray.push(A[i]);
                    }
                    subArray.push(dummyArray);
                }
            }
            return subArray;
        }
    };

Ques-7 --> (Best Time to Buy and Sell Stocks)

# Problem Description
    Say you have an array, A, for which the ith element is the price of a given stock on day i.
    If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.
    Return the maximum possible profit.

Problem Constraints
    0 <= A.size() <= 700000
    1 <= A[i] <= 107

# Solution - 
    module.exports = { 
 //param A : array of integers
 //return an integer
	maxProfit : function(A){
        //First Approach
        let dummyArray = [], max_profit;
        if(A.length == 0) {
            return 0;
        }
        for(let i=0;i<A.length;i++) {
           for(let j=i+1;j<A.length;j++) {
               dummyArray.push(A[j] - A[i]);
           }
        }
        max_profit = Math.max(...dummyArray);
        if(max_profit<0) {
            return 0;
        } else {
            return max_profit;
        }

        //second approach
        let min = A[0];
        let max_profit = 0;
        let current_profit;
        if(A.length == 0) {
            return 0;
        }
        for(let i=0;i<A.length;i++) {
            current_profit = A[i] - min;
            max_profit = current_profit > max_profit ? current_profit : max_profit;
            min = min < A[i] ? min : A[i];
        }
        return max_profit;
	}
};

Ques-8 --> (Count Subarrays starting with 'a')

Given a string A = "amazon", find the number of subarrays starting with the character 'a'.

# Solution - 10(a,am,ama,amaz,amazo,amazon,a,az,azo,azon)

Ques-9 --> (Pick from both sides!)

# Problem Description
    You are given an integer array A of size N.
    You have to perform B operations. In one operation, you can remove either the leftmost or the rightmost element of the array A.
    Find and return the maximum possible sum of the B elements that were removed after the B operations.
    # NOTE:   Suppose B = 3, and array A contains 10 elements, then you can:
            Remove 3 elements from front and 0 elements from the back, OR
            Remove 2 elements from front and 1 element from the back, OR
            Remove 1 element from front and 2 elements from the back, OR
            Remove 0 elements from front and 3 elements from the back.

# Problem Constraints
    1 <= N <= 105
    1 <= B <= N
    -103 <= A[i] <= 103

# Solution - 
    module.exports = { 
    //param A : array of integers
    //param B : integer
    //return an integer
        solve : function(A, B){
            let pfSum = [];
            let suffixSum = [];
            let sum = 0;
            let N = A.length;
            let answer;
            pfSum[0]=A[0];
            suffixSum[N-1] = A[N-1];

            for(let i=1;i<N;i++) {
                pfSum[i] = pfSum[i-1] + A[i];
            }
            for(let i=N-2;i>=0;i--) {
                suffixSum[i] = suffixSum[i+1] + A[i];
            }
            answer = Math.max(pfSum[B-1], suffixSum[N-B]);
            for(let i=1;i<B;i++) {
                sum = pfSum[i-1] + suffixSum[N-B+i];
                answer = Math.max(answer, sum);
            }
            return answer;
        }
    };

Ques-10 --> (Leaders in an array)

# Problem Description
    Given an integer array A containing N distinct integers, you have to find all the leaders in array A. An element is a leader if it is strictly greater than all the elements to its right side.
    NOTE: The rightmost element is always a leader.

# Problem Constraints
    1 <= N <= 105
    1 <= A[i] <= 108

# Solution - 
    module.exports = { 
    //param A : array of integers
    //return a array of integers
        solve : function(A){
            let result = [];
            result.push(A[A.length-1]);
            let max_elem = A[A.length-1];
            for(let i=A.length-2;i>0;i--) {
                for(let j=i+1;j<A.length;j++) {
                    if(A[i]>max_elem) {
                        max_elem = A[i];
                        result.push(A[i]);
                    }
                }
            }
            return result;
        }
    };
