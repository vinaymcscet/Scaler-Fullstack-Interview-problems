Ques-1 --> (Length of longest consecutive ones)

    Given a binary string A. It is allowed to do at most one swap between any 0 and 1. Find and return the length of the longest consecutive 1â€™s that can be achieved.

# Solution - 
    module.exports = { 
    //param A : string
    //return an integer
        solve : function(A){
            let ans = 0;
            let totalOnes = 0;
            let B = A.split("");
            let N = B.length;

            for(let i=0;i<N;i++) {
                if(B[i] == 1) totalOnes++;
                else {
                    let j=i-1;
                    let left = 0;
                    let right = 0;
                    while(j>=0 && B[j] == 1) {
                        left++;
                        j--;
                    }
                    j = i+1;
                    while(j<N && B[j] == 1) {
                        right++;
                        j++;
                    }
                    ans = Math.max(ans, left+right+1);
                }
            }
            if(ans == 0) return totalOnes;
            if(ans>totalOnes) return totalOnes;
            else return ans;
        }
    };

Ques-2 --> (Row to Column Zero)

# Problem Description -
    You are given a 2D integer matrix A, make all the elements in a row or column zero if the A[i][j] = 0. Specifically, make entire ith row and jth column zero.

# Problem Constraints -
    1 <= A.size() <= 103
    1 <= A[i].size() <= 103
    0 <= A[i][j] <= 103

# Solution - 
    module.exports = { 
    //param A : array of array of integers
    //return a array of array of integers
        solve : function(A){
            //Approach - 1
            let N = A.length;
            for(let i=0;i<N;i++) {
                for(let k=0;k<A[0].length;k++) {
                    if(A[i][k] == 0) {
                        let j=k-1;
                        while(j>=0) {
                            A[i][j] = (A[i][j] == 0) ? 0 : -1;
                            j--;
                        }
                        j=k+1;
                        while(j<A[0].length) {
                            A[i][j] = (A[i][j] == 0) ? 0 : -1;
                            j++;
                        }
                        j=i-1;
                        while(j>=0) {
                            A[j][k] = (A[j][k] == 0) ? 0 : -1;
                            j--;
                        }
                        j=i+1;
                        while(j<N) {
                            A[j][k] = (A[j][k] == 0) ? 0 : -1;
                            j++;
                        }
                    }
                }
            }
            for(let m=0;m<N;m++) {
                for(let p=0;p<A[m].length;p++) {
                    if(A[m][p] === -1) {
                        A[m][p] = 0;
                    }
                }
            }
            return A;

            //Approach - 2
            const matrix = A;
            const rows = matrix.length;
            const cols = matrix[0].length;
            const zeroRows = new Set();
            const zeroCols = new Set();
            // Step 1: Find Zeroes
            for (let i = 0; i < rows; i++) {
                for (let j = 0; j < cols; j++) {
                    if (matrix[i][j] === 0) {
                        zeroRows.add(i);
                        zeroCols.add(j);
                    }
                }
            }
            // Step 2: Zero Rows and Columns
            for (let i = 0; i < rows; i++) {
                for (let j = 0; j < cols; j++) {
                    if (zeroRows.has(i) || zeroCols.has(j)) {
                        matrix[i][j] = 0;
                    }
                }
            }
            return matrix;
        }
    };

Ques-3 --> (Majority Element)

# Problem Description - 
    Given an array of size N, find the majority element. The majority element is the element that appears more than floor(n/2) times.
    You may assume that the array is non-empty and the majority element always exists in the array.

# Problem Constraints -
    1 <= N <= 5*105
    1 <= num[i] <= 109

# Solution -
    module.exports = { 
    //param A : array of integers
    //return an integer
        majorityElement : function(A){
            // Approach - 1
            let map = new Map();
            for(let i=0;i<A.length;i++) {
                if(map.has(A[i])) map.set(A[i], map.get(A[i]) + 1);
                else map.set(A[i], 1);
            }
            let majorityElem = null;
            let maxCount = 0;

            for(let [num, count] of map) {
                if(count > maxCount) {
                    maxCount = count;
                    majorityElem = num;
                }
            }
            if(maxCount > A.length/2) return Number(majorityElem);
            
            // Approach -2 (Moore Voting Algorithm)
            let ME = A[0];
            let freq = 0;
            let N = A.length;

            for(let i=0;i<N;i++) {
                if(A[i] == ME) {
                    freq++;
                } else if(freq == 0) {
                    freq = 1;
                    ME = A[i];
                } else {
                    freq--;
                }
            }
            for(let j=0;j<N;j++) {
                if(A[j] == ME) freq++;
            }
            if(freq > N/2) return ME;
            else return -1;
        }
    };

Ques-4 --> (N/3 Repeat Number)

# Problem Description -
    You're given a read-only array of N integers. Find out if any integer occurs more than N/3 times in the array in linear time and constant additional space.
    If so, return the integer. If not, return -1.
    If there are multiple solutions, return any one.
    Note: Read-only array means that the input array should not be modified in the process of solving the problem

# Problem Constraints - 
    1 <= N <= 7*105
    1 <= A[i] <= 109

# Solution -
    module.exports = {
        /**
        * param A: list of integers
        * return: an integer
        */
        solve: function (A) {
            // Approach - 1
            const newMap = new Map();
            let N = A.length, result = -1;
            
            for(let i=0;i<N;i++) {
                if(newMap.has(A[i])){
                    newMap.set(A[i], newMap.get(A[i]) + 1);
                } else {
                    newMap.set(A[i], 1);
                }
            }
            for(let [item, freq] of newMap.entries()) {
                if(freq > N/3) result = item
            }
            return result;
            //A.sort((a, b) => a-b);
            // Approach - 2
            let first = -1, count1 = 0;
            let second = -1, count2  = 0;
            let N = A.length;

            if(N==2||N==1) {
                return A[0];
            }

            for(let i=0;i<N;i++) {
                if(A[i] == first) {
                    count1++;
                } else if(A[i] == second) {
                    count2++;
                } else if(count1 == 0) {
                    first = A[i];
                    count1 = 1;
                } else if(count2 == 0) {
                    second = A[i];
                    count2 = 1;
                } else {
                    count1--;
                    count2--;
                }
            }
            count1 = 0; count2 = 0;
            for(let k=0;k<N;k++) {
                if(A[k] == first) {
                    count1++;
                } else if(A[k] == second) {
                    count2++;
                }
            }
            if(count1 > N/3) {
                return first;
            }
            if(count2 > N/3) {
                return second;
            }
            return -1;
        }
    };

Ques-5 --> (Check anagrams)

# Problem Description -
    You are given two lowercase strings A and B each of length N. Return 1 if they are anagrams to each other and 0 if not.
    Note : Two strings A and B are called anagrams .to each other if A can be formed after rearranging the letters of B.

# Problem Constraints  - 
    1 <= N <= 105
    A and B are lowercase strings

# Solution -
    module.exports = { 
    //param A : string
    //param B : string
    //return an integer
        solve : function(A, B){
            // Approach - 1
            const freqA = [...A].sort();
            const freqB = [...B].sort();
            let N = A.length;

            for(let i=0;i<N;i++) {
                if(freqA[i] != freqB[i]) {
                    return 0
                }
            }
            return 1;

            Approach - 2
            let x = A.split("").sort().join("");
            let y = B.split("").sort().join("");

            if(x == y) return 1;
            else return 0;

            // Approach - 3
            var createFreqMap = function(str) {
                let map = new Map();
                for(let char of str) {
                    map.set(char, (map.get(char) || 0)+1);
                }
                return map;
            }
            var compareFreqMap = function(str1, str2) {
                if(str1.size != str2.size) return 0;
                for(let [key, value] of str1) {
                    if(str2.get(key) !== value) return 0
                }
                return 1;
            }
            if(A.length != B.length) return false;

            let freq1 = createFreqMap(A);
            let freq2 = createFreqMap(B);

            return compareFreqMap(freq1, freq2);
        }
    };

Ques-6 --> (Colorful Number)

# Problem Description -
    Given a number A, find if it is COLORFUL number or not.
    If number A is a COLORFUL number return 1 else, return 0.
    What is a COLORFUL Number:
    A number can be broken into different consecutive sequence of digits. 
    The number 3245 can be broken into sequences like 3, 2, 4, 5, 32, 24, 45, 324, 245 and 3245. 
    This number is a COLORFUL number, since the product of every consecutive sequence of digits is different

# Problem Constraints -
    1 <= A <= 2 * 109

# Solution -
    module.exports = { 
    //param A : integer
    //return an integer
        colorful : function(A){
            const digitsArray = [];

            while(A>0) {
                digitsArray.unshift(A%10);
                A = Math.floor(A/10);
            }

            let hashSet = new Set();
            for (let i = 0; i < digitsArray.length; i++) {
                let productValue = 1;
                for (let j = i; j < digitsArray.length; j++) {
                    productValue *= digitsArray[j];
                    if(hashSet.has(productValue)) {
                        return 0;
                    } else {
                        hashSet.add(productValue);
                    }
                    
                }
            }
            return 1;
        }
    };
