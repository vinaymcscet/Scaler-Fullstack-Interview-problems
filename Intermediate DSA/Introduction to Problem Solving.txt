Ques-1 -->

# Problem Description
    Given an integer A, you need to find the count of it's factors.
    Factor of a number is the number which divides it perfectly leaving no remainder.
    Example : 1, 2, 3, 6 are factors of 6

# Problem Constraints
    1 <= A <= 109

# Solution - 
    module.exports = { 
    //param A : integer
    //return an integer
        solve : function(A){
            // Approach -1
            let count = 0;
            for( let i=1;i<=A;i++) {
                if(A%i == 0) {
                    count = count + 1;
                }
            }
            return count;

            // Approach -2
            
            let count = 0;
            for( let i=1;i<=Math.sqrt(A);i++) {
                if(A%i == 0) {
                    if(i !== A/i) {
                        count = count + 2;
                    } else {
                        count = count + 1; 
                    }
                }
            }
            return count;
        }
    };

Ques-2 -->
# Problem Description
    Given a number A. Return 1 if A is prime and return 0 if not. 

# Note : 
    The value of A can cross the range of Integer.

# Problem Constraints
    1 <= A <= 10^9

# Solution - 
    module.exports = { 
    //param A : integer
    //return an integer
        solve : function(A){
        if(A == 1) return 0;
        for(let i=2;i<=Math.sqrt(A);i++) {
            if(A%i == 0) {
                return 0;
            } 
        }
        return 1;
        }
    };

Ques-3 -->
Find the number of times below code runs where N is a perfect square
    for i -> 1 to N

    if(i * i == N) return i

# Solution - sqrt(N) times loop run.

Ques-4 -->
    The sum of n natural numbers is :
# Solution - (n*(n+1))/2

Ques-5 -->
How many iterations will take place?

    int func(int n){
        int s = 0;
        for(int i = 1 ; i <= 100 ; i++){ 
            s = s + i;
        }
        return s;
    }
# Solution - Using Formulae - [a, b] items - (b-a+1) steps required.so, (100-1+1 = 100) steps.

Ques-6 -->
Find the number of iterations in the following code snippet:

    int ans = 0;
    for (int i = 0; i < n; i++)
    {
        ans += i * i;
    }
# Solution - [0 n-1] = (n-1) - 0 + 1 = n, Total n steps required.

Ques-7 -->
What will be the total number of iterations in the following code?
for (int i = 0; i < n; i++) {
    for (int j = 0; j <= i; j++) {
        print(i + j);
    }
}

# Solution - Total n(n+1)/2 steps required.

Ques-8 -->
    # Problem Description
    You are given an integer A. You have to tell whether it is a perfect number or not.
    Perfect number is a positive integer which is equal to the sum of its proper positive divisors.
    A proper divisor of a natural number is the divisor that is strictly less than the number.

# Problem Constraints
    1 <= A <= 106
# Solution - 
    module.exports = { 
    //param A : integer
    //return an integer
        solve : function(A){
            // Approach - 1
            let i;
            let sum = 0;
            for(i=1;i<=A;i++) {
                if(A%i == 0) {  
                    if(i<A) {              
                        sum += i;
                    }
                }
            }
            if(sum == A) {
                return 1;
            } else {
                return 0;
            }

            // Approach - 2
            if (A == 1) return 0;
            let sum=1;
            for(let i=2;i<=Math.sqrt(A);i++) {
                if(A%i == 0) {
                    sum += i;
                    if(i*i != A) {
                        sum += A/i;
                    }
                }
            }
            if(sum == A) return 1;
            return 0;
        }
    };

Ques-9 -->
# Problem Description
    You will be given an integer n. You need to return the count of prime numbers less than or equal to n.

# Problem Constraints
    0 <= n <= 10^3

# Solution - 
    module.exports = { 
    //param A : integer
    //return an integer
        solve : function(A){
            let i,j, sum=0;
            if(A == 1) return 0;
            for (i=2;i<=A;i++) {
                let prime_count = 0;
                for(j=1;j<=Math.sqrt(i);j++) {
                    if(i%j == 0) {
                        if(j !== i/j){
                            prime_count +=2;
                        } else {
                            prime_count++;
                        }
                    }
                }
                if(prime_count == 2) {
                    sum++;
                }
            }
            return sum;
        }
    };

Ques-10 --> How many elements are there between [135, 246] (inclusive of them) ?
# Solution - [135 246] = 246-135+1=112

Ques-11 -->

    Find the total number of iterations in the following code:
    void solve(int N, int M)
    {
        int count = 0;
        for (int i = 1; i <= N; i++)
        {
            if (N % i == 0)
                count++;
        }
        for (int i = 1; i <= M; i++)
        {
            if (M % i == 0)
                count++;
        }
        
        print count;
    }
# Solution - N+M times count run. 

Ques-12 --> 
    Find the total number of iterations in the following code snippet:
    NOTE: ^ denotes power, not Bitwise XOR.

    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= 3 ^ i; j++)
        {
            print(i + j);
        }
    }

# Solution - 3 + 9 + 27 + .... + 3^n times.


