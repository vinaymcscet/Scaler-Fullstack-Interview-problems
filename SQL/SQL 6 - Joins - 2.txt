Ques-1 --> (Department (No emp)) - 

    Context:
    Giant Tech is a large multinational company with numerous departments, each responsible for different business functions. The company maintains a detailed database of its departments and employees to manage its workforce efficiently. Understanding which departments currently do not have any employees can help in resource allocation and organizational restructuring.
    As a data analyst at Giant Tech, you are given the task of identifying departments that currently do not have any employees. This information will be used to review departmental structures and make necessary adjustments.
    Problem Statement:
    Write a query to display the details of all those departments that don't have any working employees.
    Result:
    Return the columns 'department_id', and 'department_name'.
    Return the results ordered by 'department_id' in ascending order.
    Table: employees

    employees
    Table: departments
    departments
    Sample Input:
    Table: employees
    Table: departments
    Sample Output:
    Sample Explanation:
    The output indicates that the departments with IDs 4 and 5, which are the Finance and IT departments respectively, currently do not have any employees working in them. The result is ordered by 'department_id' in ascending order.

# Solution - 
    
    SELECT distinct d.department_id , d.department_name
    from employees e 
    right join departments d 
    on d.department_id = e.department_id
    WHERE e.department_id IS NULL
    order by d.department_id

Ques-2 --> (Manager left) -

    Context:

    In the dynamic environment of StarTech Solutions, employee management requires precise tracking of current employees and their reporting structures. Itâ€™s crucial to identify situations where employees are left without active managers due to managerial turnover.

    As a data analyst at StarTech Solutions, your manager has tasked you with generating a report that identifies employees whose salaries are below $15000 and who are currently reporting to managers who have left the company. This will help in reassigning these employees to active managers to ensure smooth operations.

    Problem Statement:

    Write a query to find the employee_id of the employees whose salary is strictly less than $15000 and whose manager left the company.

    When a manager leaves the company, their information is deleted from the employees table, but the reporters still have their manager_id set to the manager that left.

    Result:

    Return the column 'employee_id'
    Return the result ordered by employee_id in ascending order.
    Table: employess

    schema

    Sample Input:

    Table: employees

    width=290

    Sample Output:

    width=93

    Sample Explanation:

    The employees with a salary less than $15000 are 1, 2, 3, 4, 5, and 7.
    1 manager is employee 2, who is still in the company.
    2, 3 employees have manager_id as null as they are in the highest position in the company and they have no managers.
    4 manager is employee 3, who is still in the company.
    5, 7 manager is employee 6, who left the company because there is no row for employee 6 as it was deleted.
    So, 5,7 employees manager left and their salary is less than $15000. Hence, that employee's employee_id is returned.

# Solution -  
    select e1.employee_id
    from employees e1
    left join employees e2
    on e1.manager_id = e2.employee_id
    WHERE e1.salary < 15000 AND e1.manager_id IS NOT NULL AND e2.employee_id IS NULL 
    order by e1.employee_id

Ques-3 --> (Handles No Customers) -

    Context:

    At GlobalSales Inc., employee performance is often evaluated based on the number of customers they handle. The company keeps track of employee and customer data in a database. Identifying employees who do not handle any customers can help distribute workloads and improve overall efficiency.

    As a data analyst at GlobalSales Inc., your manager has tasked you with identifying employees who do not have any customer assignments.

    Problem Statement:

    Write a SQL query to find the employee details who handles no customers.

    Result:

    Use the given customers table.
    Return the output ordered by employeeNumber in ascending order.
    The salesRepEmployeeNumber column refers to the employeeNumber who made sales to the customers.
    Sample Input:

    Table: customers



    Table: employees



    Sample Output:



    Sample Explanation:

    Employees with numbers 1002, 1056, 1143 and 1216 does not handle any customers.

# Solution - 
    
    SELECT  e.employeeNumber, e.firstName, e.lastName
    from customers c 
    right join employees e 
    on c.salesRepEmployeeNumber = e.employeeNumber
    where c.salesRepEmployeeNumber  IS NULL
    order by e.employeeNumber;

Ques-4 --> (Employees & Offices) -

    Problem Statement:

    Write a SQL query to get all the possible combinations of employees and offices.

    Return the output ordered by employeeNumber and officeCode in ascending order.
    Sample Input:

    Table: offices



    Table: employees

    Sample Output:

# Solution - 
    SELECT e.employeeNumber, e.firstName, e.lastName, o.officeCode, o.city
    from offices o
    CROSS JOIN  employees e 
    order by e.employeeNumber, o.officeCode;

Ques-5 --> (Combine Two Tables) -

    Write an SQL query to report the city of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.

    Return the result table in order of city names.

    Table: person



    Table: address



    Sample Input

    Table: person

    person

    Table: address

    address

    Sample Output

    output

# Solution - 

    SELECT a.city 
    from person p 
    left join address a 
    on a.personId = p.personId
    ORDER by a.city asc

Ques-6 --> (Queries(NPV)) -

    Problem Statement:

    Write a query to find the npv of each query of the queries table.

    Return the output order by id and year in the ascending order
    Note: Use the IFNULL() function in order to assign 0 value to the instance where npv is NULL after the join.

    Table: npv

    npv

    Table: queries

    queries

    Sample Input:

    Table: npv



    Table: queries



    Sample output:



    Explanation:

    The npv value of (7, 2018) is not present in the NPV table, we consider it 0.
    The npv values of all other queries can be found in the NPV table.

# Solution - 

    SELECT q.id, q.year, IFNULL(n.npv, 0) as npv
    from npv n
    right join queries q
    on q.id = n.id
    and q.year = n.year
    order by q.id, q.year

Ques-7 --> (Customers Who Never Order) -

    Write an SQL query to report all customers (as 'Customers') who never order anything.

    Return the resultant table ordered by customer names .

    Table: Customers



    id is the primary key column for this table.
    Each row of this table indicates the ID and name of a customer.

    Table: Orders



    id is the primary key column for this table.
    customerId is a foreign key of the ID from the Customers table.
    Each row of this table indicates the ID of an order and the ID of the customer who ordered it.

    Sample Input:

    Table: Customers



    Table: Orders



    Output:

    output

# Solution - 
    
    SELECT c.name as Customers
    from Customers c
    left join Orders o 
    on c.id = o.CustomerId
    where o.CustomerId is null
    order by Customers     

Ques-8 --> (Retrieve Authors with No Published Books) -

    Consider the database with the following tables:
    Authors: author_id (Integer, Primary Key), author_name (Text)
    Books: book_id (Integer, Primary Key), book_title (Text), author_id (Integer)

    Write an SQL query to retrieve the names of authors who haven't published any books.
    Include NULL values for book-related columns.

    Return the output ordered by author_name in ascending order.

    Sample Input:
    Table: Authors
    Input

    Table: Books
    input

    Sample Output:
    output


# Solution - 

    SELECT a.author_id , a.author_name , b.book_title 
    from  Authors a 
    left join Books b 
    on a.author_id = b.author_id 
    where b.book_Id is null
    order by author_name

Ques-9 --> (Combine Unique Customers from Two Tables) -

    Consider the database with the following tables:
    Customers1: customer_id (Integer, Primary Key), customer_name (Text)
    Customers2: customer_id (Integer, Primary Key), customer_name (Text)

    Write an SQL query to combine all unqiue entries from Customers1 and Customers2.

    Return the output ordered by customer_name in descending order.

    Sample Input:
    Table: Customers1
    input

    Table: Customers2
    input

    Sample Output:
    output

# Solution -

    SELECT * from Customers1
    UNION 
    SELECT * from Customers2
    order by customer_name desc

Ques-10 --> (Retrieve Employees and Their Mentors) -

    Consider the database with the following table:
    Employees: employee_id (Integer, Primary Key), employee_name (Text), hire_date (Date), mentor_id (Integer)

    Write an SQL query to retrieve the names of employees along with the names of their mentors (as 'mentor_name'). Include only employees who have mentors, and the mentor relationship is established when an employee is hired within 30 days of their mentor.

    Return the output ordered by mentor_name in ascending order.

    Note: You may use DATE_ADD() funcion here. The DATE_ADD() function adds a time/date interval to a date and then returns the date.

    Sample Input:
    Table: Employees
    input

    Sample Output:
    output

# Solution - 

    SELECT e1.employee_name, e2.employee_name as mentor_name
    from Employees e1
    join Employees e2
    on e1.mentor_id = e2.employee_id and
    e1.hire_date BETWEEN e2.hire_date AND DATE_ADD(e2.hire_date, INTERVAL 30 DAY)
    order by mentor_name;

Ques-11 --> (Employee Bonus Query) -

    Raw Problem
    Problem Statement:

    Write a query to report the name, bonus of each employee with a bonus of less than 1000.

    Return the bonus as 'NULL' if an employee doesn't have a bonus in bonus table.
    Return the result table sorted w.r.t. name of the employees in ascending order.
    NOTE : Carefully analyse the Sample output.



    Table: Bonus

    employee

    Table: employee

    bonus

    Sample Input:

    Table: employee



    Table: Bonus



    Sample output:



    Sample Explanation:

    Dan is in the result because he has bonus less than 1000.
    Brad and John are in the result because they don't even have a bonus.
    Thomas is not present in the result because he has bonus >= 1000.

# Solution - 
    
    SELECT e.name, b.bonus
    From employee e 
    left join Bonus b 
    on b.empId = e.empId 
    where b.bonus <=1000 OR b.bonus IS NULL
    order by e.name asc

Ques-12 --> (Replace Employee ID With The Unique Identifier) -

    Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just show null.

    Return the results ordered by id (not 'unique_id') in ascending order.

    Table: employees



    Table: employeeUNI



    Sample Input

    Table: employees

    employees

    Table: employeeUNI

    table 2

    Sample Output

    output

# Solution - 

    SELECT eu.unique_id 
    from employees e 
    left join  employeeUNI eu 
    on eu.id = e.id
    order by e.id

Ques-13 --> (Ad-Free Sessions) -

    Context:

    At AdStream, a digital marketing company, tracking the performance of advertising campaigns is crucial for understanding user engagement and optimizing ad placements. The company monitors various sessions on its platform, recording details such as session IDs and whether ads were shown during those sessions. Identifying sessions without ads can help the company refine its ad delivery strategy and improve overall campaign effectiveness.

    As a data analyst at AdStream, your manager has tasked you with generating a report that lists all sessions where no ads were shown to analyze potential gaps in the ad-serving process and identify areas for improvement.

    Problem Statement:

    Write a query to report all the sessions that did not get shown any ads.

    Result:

    Return the column 'session_id'
    Return the resultant table ordered by session_id in ascending order.

    Table: Playback

    playback
    Table: Ads

    Playback

    Sample Input:


    Table: Playback



    Table: Ads



    Sample Output:



    Sample Explanation:

    The ad with ID 1 was shown to user 1 at time 5 while they were in session 1.
    The ad with ID 2 was shown to user 2 at time 17 while they were in session 4.
    The ad with ID 3 was shown to user 2 at time 20 while they were in session 4.
    We can see that sessions 1 and 4 had at least one ad.
    Sessions 2, 3, and 5 did not have any ads, so we return them.

# Solution - 

    SELECT p.session_id
    from Playback p
    left join Ads a 
    on a.customer_id = p.customer_id and a.timestamp BETWEEN p.start_time AND p.end_time  
    where a.customer_id IS NULL
    order by p.session_id

Ques-14 --> (Form a Chemical Bond) -

    Table: Elements

    Column Name	Type
    symbol	varchar
    type	enum
    electrons	int


    symbol is the primary key for this table.
    Each row of this table contains information of one element.
    type is an ENUM of type ('Metal', 'Nonmetal', 'Noble')

    If type is Noble, electrons is 0.
    If type is Metal, electrons is the number of electrons that one atom of this element can give.
    If type is Nonmetal, electrons is the number of electrons that one atom of this element needs.


    Two elements can form a bond if one of them is 'Metal' and the other is 'Nonmetal'.
    Write an SQL query to find all the pairs of elements that can form a bond.

    Return the result ordered by metal in alphabetical order.
    The query result format is in the following example.

    Sample Input :

    Table: Elements

    symbol	type	electrons
    He	Noble	0
    Na	Metal	1
    Ca	Metal	2
    La	Metal	3
    Cl	Nonmetal	1
    O	Nonmetal	2
    N	Nonmetal	3

    Sample Output:

    metal	nonmetal
    La	Cl
    Ca	Cl
    Na	Cl
    La	O
    Ca	O
    Na	O
    La	N
    Ca	N
    Na	N

# Solution - 

    SELECT e1.symbol as metal, e2.symbol as nonmetal
    from Elements e1 
    join Elements e2
    on e1.type = 'Metal' and e2.type ='Nonmetal'
    order by metal;

Ques-15 --> (Cross Join) -

    In a CROSS JOIN between two tables with m and n rows, how many rows will the result set contain?

# Solution - m * n

Ques-16 --> (Joins VS Union -1) -

   What is a key distinction between JOIN and UNION operations in SQL?

# Solution - JOIN is used for combining tables, while UNION is used for combining the results of two SELECT statements.

Ques-17 --> (Joins VS Union -2) -

    When comparing the result of a JOIN operation with the result of a UNION operation, what is likely to be true?

# Solution - The number of rows returned depends on the specific data in the tables.

Ques-18 --> (Where VS On) -

    What is the key difference between using conditions in the WHERE clause and the ON clause?

# Solution - Conditions in the ON clause are applied before the join, while conditions in the WHERE clause are applied after the join.

Ques-19 --> (Union All Operation) -

    Consider two tables, employees_2022 and employees_2023, with the same columns:

    employee_id, employee_name, department_id
    What does the following SQL query return?

    SELECT employee_id, employee_name, department_id
    FROM employees_2022
    UNION ALL
    SELECT employee_id, employee_name, department_id
    FROM employees_2023;

# Solution - All employees from both years, including duplicates.

Ques-20 --> ( Left Join-1) -

    Suppose you have two tables, students and grades, with the following columns:

    students table: student_id, student_name
    grades table: student_id, grade

    What does the following SQL query accomplish?

    SELECT students.student_name, grades.grade
    FROM students
    LEFT JOIN grades ON students.student_id = grades.student_id;


# Solution - Retrieves all students, including those without grades.