Ques-1 --> (SQL_Question_1) - 

    Write a SQL query to print department name along with department wise average salary. The average salary should be rounded to 2 decimal places.

    Output Schema:

    department_name,average_salary
    NOTE: Output column name has to match the given output schema.

    Example Output:

    department_name,average_salary
    IT,15500
    Schema Design:

# Solution - 
    
    SELECT d.deptname as department_name, round(avg(e.salary), 2)  as average_salary
    FROM employee e 
    join department d 
    on e.deptid = d.deptid
    group by d.deptid; 

Ques-2 --> (Average Employee Salary) -

    Problem Statement:

    Write a query to get the details of the average salary of the employees for each department.

    Save the new column as 'avg_employee_salary'
    Return the result order by avg_employee_salary in descending order and department_id in ascending order.
    Sample Input:

    Table: employees

# Solution -  

    SELECT department_id, avg(salary) as avg_employee_salary
    FROM employees 
    group by department_id
    order by avg_employee_salary desc , department_id asc 

Ques-3 --> (Customer Placing the Largest Number of Orders) -

    Write an SQL query to find the customer_number for the customer who has placed the largest number of orders.

    The test cases are generated so that exactly one customer will have placed more orders than any other customer.

    Table: Orders



    Sample Input

    Table: Orders

    input

    Sample Output

    output

    Explanation: Clearly, cutomer_id 105 has made the maximum orders.

# Solution - 
    
    SELECT max(customer_number) as customer_number
    FROM Orders 
    group by customer_number
    order by count(*) desc
    limit 1

Ques-4 --> (Classes More Than 5 Students) -

    Write an SQL query to report all the classes that have at least five students.

    Return the result table ordered by class in descending order.

    Table: courses
    Sample Input:

    Table: courses

    input

    Sample Output:

    output

    Explanation: Only class 'Math' has a minimum of 5 students.

# Solution - 

    SELECT class
    FROM courses
    group by class
    having count(student) >= 5
    order by class desc

Ques-5 --> (Cost for each category) -

    Context:

    In a retail business, keeping track of the total cost incurred for each category of items is crucial for financial analysis and inventory management. This way, the business can make informed decisions about pricing, stock replenishment, and budget allocation.

    Problem Statement:

    For the given table of sales, select the query which gives the total cost for each category.

    A)  
    SELECT cate_id, SUM(receive_qty*purch_price)   
    FROM purchase              
    GROUP BY cate_id;  
    B)  
    SELECT cate_id, SUM(receive_qty)  
    FROM purchase              
    GROUP BY cate_id;  
    C)  
    SELECT cate_id, SUM(receive_qty + purch_price)  
    FROM purchase              
    GROUP BY cate_id;  
    D)  
    SELECT cate_id, AVG(receive_qty*purch_price)  
    FROM purchase              
    GROUP BY cate_id;

# Solution - A

Ques-6 --> (Duplicate Emails) -

    Write an SQL query to report all the duplicate emails.
    Return the result table ordered by emails.

    Table: Person
    id is the primary key column for this table.
    Each row of this table contains an email.

    Example:

    Person Table:
    Output:

# Solution - 

    SELECT email 
    from Person
    group by email
    having count(email)>1
    order by email

Ques-7 --> (Winning Candidate) -

    Write an SQL query to report the name of the winning candidate (i.e., the candidate who got the largest number of votes).

    The test cases are generated so that exactly one candidate wins the elections.

    Table: candidate

    Table: vote

    Sample Input:

    Table: candidate

    Table: vote

    Sample Output:

# Solution - 
    
    SELECT  c.firstname 
    from candidate c
    join vote v 
    on c.id = v.id
    group by v.candidateId
    having count(v.candidateId) > 1
    order by c.firstname asc
    limit 1     

Ques-8 --> (Number of Unique Subjects Taught by Each Teacher) -

    Table: Teacher

    Column Name	Type
    teacher_id	int
    subject_id	int
    dept_id	int


    (subject_id, dept_id) is the primary key for this table.
    Each row in this table indicates that the teacher with teacher_id teaches the subject subject_id in the department dept_id.

    Write an SQL query to report the number of unique subjects each teacher teaches in the university.
    The query result format is shown in the following example.

    Return the result ordered by teacher_id in ascending order.

    Sample Input :

    Table: Teacher

    teacher_id	subject_id	dept_id
    1	2	3
    1	2	4
    1	3	3
    2	1	1
    2	2	1
    2	3	1
    2	4	1

    Sample Output:

    teacher_id	cnt
    1	2
    2	4

# Solution - 

    SELECT teacher_id, count(distinct subject_id) as cnt  
    from Teacher 
    group by teacher_id 
    having count(teacher_id)
    order by teacher_id

Ques-9 --> (Actors and Directors Who Cooperated At Least Three Times) -

    Write a SQL query for a report that provides the pairs (actor_id, director_id) where the actor has cooperated with the director at least three times.

    Return the result table ordered by timestamp in ascending order.

    Table: actorDirector

# Solution -

    SELECT actor_id, director_id
    from actorDirector
    group by actor_id, director_id
    having count(timestamp)  >= 3
    order by timestamp;

Ques-10 --> (Project Employees) -

    Write an SQL query that reports the average experience years (As 'average_years') of all the employees for each project, rounded to 2 digits.
    Return the result table ordered by project_id in ascending order.
    Table: project

    Table: employee

    Sample Input:
    Table: project
    Table: employee
    Sample Output:

# Solution - 

    select distinct p.project_id,  round (avg(e.experience_years), 2) As average_years
    FROM project p 
    join employee e 
    on p.employee_id = e.employee_id
    group by p.project_id
    order by p.project_id

Ques-11 --> (Northern Latitudes) -

    Context:

    You are managing a global environmental research organization that monitors various geographic coordinates, including Northern Latitudes, to study climate patterns and environmental changes.

    Consider a table named station that contains geographical information, including a column lat_n representing Northern Latitudes.

    Problem Statement:

    The goal is to write an SQL query to get the greatest value of the Northern Latitudes (lat_n) as max from the station table which is less than 138.2523. Additionally, the maximum value should be rounded to four decimal places for reporting purposes.

    Table: station

    station

    Sample Input:

    Table: station



    Sample Output:



    Explanation:

    Watkins, Republic, Aguanga, and Hoskinston have lat_n < 138.2523.
    Out of these, the maximum value of Northern Latitude is 83.2743 (Watkins).

# Solution - 
    
    SELECT round(lat_n,4) as  max 
    from station 
    group by lat_n
    having lat_n<138.2523
    order by lat_n desc
    limit 1  

Ques-12 --> (Income greater than 2000) -

    Problem Statement:

    Write a query to find the cities where employees have a minimum income greater than $2000.

    Save the new column as 'Minimum_Income'
    Round Minimum_Income up to two decimal places.
    Return the result order by the City in ascending order.
    Table: employees

    input


    Sample Input:

    Table: employees



    Sample output:

# Solution - 

    select City, round(MIN(Income),2) as Minimum_Income 
    FROM employees 
    group by City 
    having MIN(Income) > 2000
    order by City

Ques-13 --> (Students in Departments) -

    Context:

    At Central University, the administration is keen on tracking the distribution of students across various departments. This helps in resource allocation and academic planning. As part of this effort, it's important to generate reports that include all departments, even those with no current students.

    As a data analyst at Central University, your task is to provide a comprehensive overview of student distribution by department.

    Problem Statement:

    Write a query to report the respective department name and number of students majoring in each department for all departments in the Department table (even ones with no current students).

    Result:

    Return the columns dept_name and student_number.
    Order the result table by student_number in descending order. In case of a tie, order them by dept_name alphabetically.
    Table: student

    student

    Table: department

    department

    Sample Input:

    Table: student



    Table: department



    Sample output:



    Explanation:

    There are two students (Jack and Jane) in Engineering department.
    There is only one student (Mark) in Science department.
    There is no student in Law.

# Solution - 

    SELECT d.dept_name , count(s.student_id) as student_number
    from student s 
    right join department d 
    on s.dept_id = d.dept_id
    group by d.dept_name
    order by student_number desc, d.dept_name asc

Ques-14 --> (Products Recommendation) -

    Context:

    Fresh Mart, a leading grocery store, aims to understand customer purchasing patterns to improve product recommendations and inventory management. Identifying customers based on specific product purchases can help tailor marketing efforts and enhance customer satisfaction.

    As a data analyst at Fresh Mart, you are tasked with generating a report that lists the customers who bought specific products while excluding others. This analysis will help the marketing team target promotions more effectively.

    Problem Description:

    Write a query to find the customer_id and customer_name of customers who bought products "Bread" and "Milk" but did not buy the product "Eggs".

    Result:

    Return the columns customer_id and customer_name
    Return the output ordered by customer_name in ascending order
    Sample Input:

    Table: customers



    Table: orders



    Sample Output:



    Sample Explanation:

    Here, only the customer_id with id 2 bought Bread and Milk products but did not buy the Eggs.

# Solution - 

    SELECT c.customer_id, c.customer_name
    from customers c 
    join orders o 
    on c.customer_id = o.customer_id
    group by c.customer_id ,c.customer_name
    HAVING sum(o.product_name="Bread") > 0 AND 
    sum(o.product_name="Milk") > 0 AND sum(o.product_name="Eggs") = 0
    order by customer_name;

Ques-15 --> (Game Play Analysis) -

    Write an SQL query to report the first login date (as 'first_login') for each player.

    Return the result table ordered by player_id in ascending order.

    Table: activity
    Sample Input:

    Table: activity

    Sample Output:


# Solution - 

    SELECT player_id , min(event_date) as first_login 
    from activity 
    group by player_id 
    order by player_id asc 

Ques-16 --> (Queries Quality and Percentage) -

   We define query quality as:
    "The average of the ratio between query rating and its position".

    We also define poor query percentage as:
    "The percentage of all queries with rating less than 3".

    Write an SQL query to find each query_name, the quality and poor_query_percentage.
    Both quality and poor_query_percentage should be rounded to 2 decimal places.

    Return the result table ordered by query_name.

    Table:queries



    Sample Input:

    Table:queries



    Sample Output:



    Explanation:
    Dog queries quality is ((5 / 23) + (5 / 124) + (4 / 40) + (4 / 39)) / 4 = 0.06
    Dog queries poor_ query_percentage is (1 / 5) * 100 = 20.00

    Cat queries quality equals ((5 / 56) + (4 / 152) + (4 / 162)+ (4/28)) / 4 = 0.10
    Cat queries poor_ query_percentage is (1 / 5) * 100 = 20.00

# Solution - 

    SELECT query_name, round(avg(rating/position), 2) as quality,
    round(count(if(rating < 3, 1, Null))/count(rating) * 100 , 2) as poor_query_percentage
    from queries
    group by query_name
    order by query_name

Ques-17 --> (Average Selling Price) -

    Write an SQL query to find the average selling price (as 'average_price') for each product.
    Return the result ordered by product_id in ascending order.

    Note:
    1. Ensure that each product purchase_date is in between its corresponding start_date and end_date.
    2. average_price should be rounded to 2 decimal places.


    Table: prices



    Each row of this table indicates the price of the product_id in the period from start_date to end_date.
    For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id.

    Table: unitsSold

    Sample Input:

    Table: prices

    Table: unitsSold

    Sample Output:


# Solution - 

    SELECT p.product_id ,round(SUM(p.price * u.units)/SUM(u.units),2) as average_price
    from prices p 
    join unitsSold u 
    on p.product_id = u.product_id 
    AND u.purchase_date between p.start_date AND p.end_date
    group by u.product_id
    order by u.product_id asc 

Ques-18 --> (Students and Examinations) -

    Write an SQL query to find the number of times (as 'attended_exams') each student attended each exam.

    Return the result table ordered by student_id and subject_name.
    Table: students

    Table: subjects

    Table: examinations
    Sample Input:

    Table: students

    Table: subjects

    Table: examinations

    Sample Output:

# Solution - 

    SELECT s1.student_id , s1.student_name , s2.subject_name ,
    count(e.subject_name) as attended_exams
    from students s1 
    cross join subjects s2
    left join  examinations e 
    on e.student_id = s1.student_id 
    and e.subject_name = s2.subject_name
    group by s1.student_id, s2.subject_name
    order by s1.student_id, s2.subject_name

Ques-19 --> (List the Products Ordered in a Period) -

    Write an SQL query to get the names of products that have at least 100 units ordered in February 2022 and their amount.

    Table: products

    Table: orders

    Sample Input:
    Table: products
    input
    Table: orders

    input
    Sample Output:

# Solution - 

    SELECT p.product_name, sum(o.unit) as unit
    from products p
    join orders o
    on p.product_id = o.product_id
    where MONTH(o.order_date) = 02 AND YEAR(o.order_date) = 2022
    group by p.product_id, p.product_name 
    having sum(o.unit) >= 100

Ques-20 --> (Warehouse Manager) -

    Table: Warehouse

    Column Name	Type
    name	varchar
    product_id	int
    units	int


    (name, product_id) is the primary key for this table.
    Each row of this table contains the information of the products in each warehouse.


    Table: Products

    Column Name	Type
    product_id	int
    product_name	varchar
    Width	int
    Length	int
    Height	int

    product_id is the primary key for this table.
    Each row of this table contains information about the product dimensions (Width, Lenght, and Height) in feets of each product.


    Write an SQL query to report the number of cubic feet of volume the inventory occupies in each warehouse.

    Return the results ordered by warehouse_name in ascending order.

    The query result format is in the following example.

    Sample Input :

    Table: Warehouse

    name	product_id	units
    LCHouse1	1	1
    LCHouse1	2	10
    LCHouse1	3	5
    LCHouse2	1	2
    LCHouse2	2	2
    LCHouse3	4	1

    Table: Products

    product_id	product_name	Width	Length	Height
    1	LC-TV	5	50	40
    2	LC-KeyChain	5	5	5
    3	LC-Phone	2	10	10
    4	LC-T-Shirt	4	10	20

    Sample Output:


    warehouse_name	volume
    LCHouse1	12250
    LCHouse2	20250
    LCHouse3	800

    Explanation:
    For LCHouse1: (1*5*50*40) + (10*5*5*5) + (5*2*10*10) = 12250
    For LCHouse2: (2*5*50*40) + (2*5*5*5) = 20250
    For LCHouse3: (1*4*10*20) = 800

# Solution - 

    SELECT w.name as warehouse_name, sum(w.units * p.Width * p.Length * p.Height) as volume
    from Warehouse w
    join Products p 
    on w.Product_id = p.Product_id 
    group by w.name
    order by w.name asc;