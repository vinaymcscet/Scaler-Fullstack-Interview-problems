Ques-1 --> (Top 5 popular movies) - 

    Context:

    Acme Studios, a major Hollywood production company, maintains a vast movie database. This database tracks information about movies they've produced, including titles, directors, taglines, and a popularity metric. Understanding movie popularity is crucial for Acme Studios to identify audience preferences and make informed decisions about future productions. By analyzing the most popular movies, streaming services can refine their recommendations and negotiate better content deals.

    Problem Statement:

    To gain insights into audience tastes, Acme Studios wants to identify the most popular movies in their database. This can be achieved by analyzing the "popularity" field within the "movies" table.

    Write a query to find the movie titles, taglines, and directors for the top 5 popular movies.

    Result:

    Return the columns 'original_title', 'tagline', and 'director'.

    Dataset description for movies table:

    1) id - tmdb movie id

    2) imdb_id - imdb movie id

    3) popularity -A numeric quantity specifying the movie's popularity.

    4) budget -The budget in which the movie was made.

    5) revenue - The worldwide revenue generated by the movie.

    6) original_title- The title of the movie

    7) cast - The name of the lead and supporting actors.

    8) homepage - A link to the homepage of the movie.

    9) director - The name of the director of the movie

    10) tagline - Movie's tagline.

    11) keywords -The keywords or tags related to the movie.

    12) overview -A brief description of the movie.

    13) runtime -The running time of the movie in minutes.

    14) genres -The genres of the movies

    15) production_companies-The production house of the movie.

    16) release_date -the date on which it was released.

    17) vote_count -the count of votes received.

    18) vote_average - average ratings the movie received.

    19) release_year - the year on which it was released.

    Sample Input:

    Table: movies

# Solution - 
    SELECT original_title, tagline, director from movies LIMIT 5;

Ques-2 --> (Low Fat & Recyclable Products) -

    Problem Statement:
    Write a query to find the ids of products that are both low-fat and recyclable.
    Return the result table ordered by product_id in ascending order.
    Table: products
    Schema
    Sample Input:
    Table: products
    Sample output:
    Explanation:
    Only products 1 and 3 are both low-fat and recyclable.

# Solution -  
    SELECT product_id FROM products
    where low_fats= "Y" AND recyclable = "Y"
    order by product_id

Ques-3 --> (Germany) -

    Problem Statement:

    Write a query to fetch customer details like customerName, phone, addressLine1, city, state, and postalCode who are not from Germany.
    Return the result ordered by customerName in ascending order.
    Table: customers
    Schema
    Sample Input:
    Table: customers

    Sample output:

# Solution - 
    SELECT  customerName, phone, addressline1, city, state, postalcode FROM  customers
    WHERE country <> 'Germany'
    ORDER BY customerName asc;

Ques-4 --> (Patients With a Condition) -

    Write an SQL query to report the patient_id who have Type I Diabetes.

    Patients with Type I Diabetes will have "DIAB1" as prefix in any of the words in the conditions data.

    For example :

    - Patient with conditions such as "DIAB100 ACNE FEVER" , "ACNE DIAB100 FEVER" are Type 1 Diabetic
    - Patient with conditions such as "ACNEDIAB100 FEVER" , "ACNE FEVER" are not Type 1 Diabetic
    Return the results ordered by patient_id in ascending order.

    Table: patients



    Sample Input:

    Table: patients
    input

    Sample Output:
    Output

    Explanation: Patients with id 10 and 12 have Type I Diabetes as conditions have words having 'DIAB1' as prefix

# Solution - 
    SELECT patient_id from patients
    WHERE conditions LIKE 'DIAB1%' OR
        conditions LIKE '%DIAB1%' OR
        conditions LIKE '% DIAB1 %'
    ORDER BY patient_id

Ques-5 --> (2012-2015) -

    Problem Statement:

    Find the details of the movies that are released between the years 2012-2015 i.e., (Including 2012 and 2015).

    Return the columns 'original_title', 'genres', 'vote_average', and 'revenue'.
    Return the result ordered by original_title in ascending order.
    Dataset description for movies table:

    1) id - tmdb movie id

    2) imdb_id - imdb movie id

    3) popularity -A numeric quantity specifying the movie's popularity.

    4) budget -The budget in which the movie was made.

    5) revenue - The worldwide revenue generated by the movie.

    6) original_title- The title of the movie

    7) cast - The name of the lead and supporting actors.

    8) homepage - A link to the homepage of the movie.

    9) director - The name of the director of the movie

    10) tagline - Movie's tagline.

    11) keywords -The keywords or tags related to the movie.

    12) overview -A brief description of the movie.

    13) runtime -The running time of the movie in minutes.

    14) genres -The genres of the movies

    15) production_companies-The production house of the movie.

    16) release_date -the date on which it was released.

    17) vote_count -the count of votes received.

    18) vote_average - average ratings the movie received.

    19) release_year - the year on which it was released.

    Sample Input:

    Table: movies

    Sample Output:


# Solution - 

    // Approach - 1
    SELECT original_title, genres, vote_average, revenue from movies
    where release_year >= "2012" AND
        release_year <= "2015"
    order by original_title;

     // Approach - 2
    SELECT original_title, genres, vote_average, revenue from movies
    where release_year between "2012" AND "2015"
    order by original_title;

Ques-6 --> (Olympic Table) -

    Context:

    The Olympic Games are a major international multi-sport event where athletes from various countries compete for medals in different sports. The performance of each country is often evaluated based on the total number of medals won.

    Problem Statement:

    In the context of managing data for an Olympic event, you are tasked with sorting a table of countries based on their medal counts. The goal is to determine the ranking of countries by their performance in the Olympics, prioritizing gold, silver, and bronze medals, respectively.

    Write an SQL query that sorts the olympic table according to the following rules:

    The country with more gold medals should come first.
    If there is a tie in the no. of gold medals, the country with more silver medals should come first.
    If there is a tie in the no. of silver medals, the country with more bronze medals should come first.
    If there is a tie in the no. of bronze medals as well, then the countries with the tie are sorted in ascending order lexicographically.
    Table: olympic
    Schema
    Sample Input:
    Table: olympic
    Sample Output:

    Explanation:

    The tie between China and USA is broken by their lexicographical names.
    Since "China" is lexicographically smaller than "USA", it comes first.
    Israel comes before Egypt because it has more bronze medals.


# Solution - 
    SELECT * FROM olympic
    order by gold_medals   desc,
            silver_medals desc,
            bronze_medals desc,
            country asc;

Ques-7 --> (Keywords) -

    Context:

    Acme Studios, a major Hollywood production company, maintains a vast movie database that tracks detailed information about their films, including genres, keywords, and cast. Understanding audience preferences for specific movie categories is crucial for informing production decisions and marketing strategies.

    You are a data analyst at Acme Studios. Your manager has asked you to compile a list of all movies that contain the keywords 'sport', 'sequel', or 'suspense'. This data will be used to tailor marketing strategies and recommend relevant content to viewers.

    Problem Statement:

    Write a query to list down all the movies along with their details that have keywords like 'sport' or 'sequel' or 'suspense'.

    Result:

    Return the columns 'original_title', 'director', 'genres', 'cast', 'budget', 'revenue', 'runtime', and 'vote_average'.
    Return the columns ordered by original_title in ascending order.
    Dataset description for 'movies' table:

    id - tmdb movie id
    imdb_id - imdb movie id
    popularity - A numeric quantity specifying the movie popularity.
    budget - The budget in which the movie was made.
    revenue - The worldwide revenue generated by the movie.
    original_title - The title of the movie
    cast - The name of the lead and supporting actors.
    homepage - A link to the homepage of the movie.
    director - The name of the director of the movie
    tagline - Movie tagline.
    keywords - The keywords or tags related to the movie.
    overview - A brief description of the movie.
    runtime - The running time of the movie in minutes.
    genres - The genres of the movies
    production_companies - The production house of the movie.
    release_date - the date on which it was released.
    vote_count - the count of votes received.
    vote_average - average ratings the movie received.
    release_year - the year in which it was released.
    Sample Input:

    Table: movies
    Sample output:

# Solution - 
    
    SELECT original_title, director, genres, cast, budget, revenue, runtime, vote_average
    from movies
    where keywords Like "%sport%"   OR
          keywords Like "%sequel%" OR
          keywords Like "%suspense%"
    order by original_title;

Ques-8 --> (Article Views 1) -

    Write an SQL query to find all the authors that viewed at least one of their own articles.
    Return the result table sorted by id in ascending order.
    Table: views

    Sample Input:
    Table: views

    Sample Output:

# Solution - 

    SELECT author_id as id from views
    where viewer_id = author_id;

Ques-9 --> (CRUD - 1) -

    Given the SQL query:
    UPDATE employees SET salary = salary * 1.1 WHERE department = 'Sales';
    What does this query do?

# Solution -

    Increases the salary of employees in the 'Sales' department by 10%.

Ques-10 --> (CRUD - 2) -

    Which SQL operation explicitly mentions the reset of the primary key of a table?

# Solution - TRUNCATE

Ques-11 --> (Cities starting with vowels) -

    Problem Statement:

    Write a query to get the list of city names starting with vowels (i.e., a, e, i, o, or u) from station table.

    The result should not contain duplicate values.

    Return the result table ordered by city in ascending order.

    Table: station
    Schema

    Sample Input:
    Table: station

    Sample output:
    Explanation: The above table has unique city names starting with vowels (i.e., a, e, i, o, or u) and is ordered by city in ascending order.

# Solution - 
    
    // Approach - 1
    SELECT distinct city from station
    where city LIKE "a%" OR
        city LIKE "e%" OR
        city LIKE "i%" OR
        city LIKE "o%" OR
        city LIKE "u%" 
    order by city;

    // Approach - 2
    SELECT DISTINCT(city)
    FROM station
    WHERE SUBSTR(city, 1, 1) IN ('A', 'E' , 'I', 'O', 'U')
    ORDER BY city;


Ques-12 --> (Problems that are low quality) -

    Problem Statement:

    Write a query to report the IDs of the low-quality problems.

    A problem is low-quality if the like percentage of the problem (the number of likes divided by the total number of votes) is strictly less than 60%.

    Return the result table ordered by problem_id in ascending order.
    Table: problems

    schema

    Sample Input:

    Table: problems



    Sample output:



    Explanation:

    The like percentages are as follows:

    Problem 1: (4446 / (4446 + 2760)) * 100 = 61.69858%
    Problem 6: (1290 / (1290 + 425)) * 100 = 75.21866%
    Problem 7: (8569 / (8569 + 6086)) * 100 = 58.47151%
    Problem 10: (9002 / (9002 + 7446)) * 100 = 54.73006%
    Problem 11: (2677 / (2677 + 8659)) * 100 = 23.61503%
    Problem 13: (2050 / (2050 + 4164)) * 100 = 32.99002%
    Problems 7, 10, 11, and 13 are low-quality problems because their like percentages are less than 60%.

# Solution - 

    SELECT problem_id from problems
    where likes / (likes + dislikes) < 0.6
    order by problem_id;

Ques-13 --> ( Sort the Olympic Table) -

    Table: Olympic
    Column Name	Type
    country	varchar
    gold_medals	int
    silver_medals	int
    bronze_medals	int

    country is the primary key for this table.
    Each row in this table shows a country name and the number of gold, silver, and bronze medals it won in the Olympic games.



    The Olympic table is sorted according to the following rules:
    The country with more gold medals comes first.
    If there is a tie in the gold medals, the country with more silver medals comes first.
    If there is a tie in the silver medals, the country with more bronze medals comes first.
    If there is a tie in the bronze medals, the countries with the tie are sorted in ascending order lexicographically.

    Write an SQL query to sort the Olympic table
    The query result format is shown in the following example.

    Example :


    Table: Olympic


    country	gold_medals	silver_medals	bronze_medals
    China	10	10	20
    South Sudan	0	0	1
    USA	10	10	20
    Israel	2	2	3
    Egypt	2	2	2

    Output:


    country	gold_medals	silver_medals	bronze_medals
    China	10	10	20
    USA	10	10	20
    Israel	2	2	3
    Egypt	2	2	2
    South Sudan	0	0	1

# Solution - 

    select * FROM Olympic
    order by gold_medals desc, 
    silver_medals desc,
    bronze_medals desc,
    country asc;

Ques-14 --> (CRUD - 3) -

    Which operation among DELETE, TRUNCATE, and DROP is slower but allows rolling back changes?

# Solution - DELETE

Ques-15 --> (CRUD - 4) -

    Consider the following statements regarding the TRUNCATE operation in SQL. Identify the correct one.

# Solution - It resets the primary key of the table.

Ques-16 --> (CRUD - 5) -

    Consider the SQL Query:
    DROP TABLE employees;
    What does this query do?

# Solution - Deletes the 'employees' table structure and all its data.

Ques-17 --> (CRUD - 6) -

    Consider the SQL Query:
    DELETE FROM customers WHERE last_purchase_date < '2022-01-01';
    What does this query do?

# Solution - Deletes customers with a last purchase date before '2022-01-01'.

Ques-18 --> (CRUD - 7) -

    Which statement is correct about the ROLLBACK command and the DELETE operation in SQL?

# Solution - DELETE can be rolled back, but it doesn't reset the primary key.

Ques-19 --> (CRUD - 8) -

    Consider the SQL query:
    SELECT employee_name, salary FROM employees ORDER BY salary DESC LIMIT 5;
    What is the purpose of the LIMIT 5 in this query?

# Solution - 

    Retrieves employees with the top 5 highest salaries.

Ques-20 --> (CRUD - 9) -

    Retrieve the names of products whose names contain the letter 'A' and have a price between \$50 and \$100 (excluding 50 and 100). Choose the correct SQL query.

# Solution - 

    SELECT product_name FROM products WHERE product_name LIKE '%A%' AND price > 50 AND price < 100;