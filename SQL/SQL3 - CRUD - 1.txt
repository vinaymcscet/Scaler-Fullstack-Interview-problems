Ques-1 --> (Find Customer Referee) - 

    Write an SQL query to fetch the names of the customer that are not referred by the customer with id = 102.
    Table: customer
    Sample Input:
    Test Case 1

    Sample Output:
    Output

    Explanation: Only customers Gwenneth and Daryl are referred with id=102

# Solution - 
    select name from customer 
    where referee_id != 102 

Ques-2 --> (Find Customers With Positive Revenue this Year) -

    Write an SQL query to report the unique customers with postive revenue in the year 2021.

    Note: Use distinct operator to get unique values.

    Table: Customers
    Sample Input:
    Test Case 1

    Sample Output:
    Output 

    Explanation: Only customer_id 100 has positive revenue in the year 2021

# Solution -  
    SELECT DISTINCT customer_id from customers
    where revenue > 0 AND year = 2021;

Ques-3 --> (New Salary) -

Context:

Zenith Tech Solutions is a growing software development company. The company is reviewing employee compensation and considering salary increases as a way to reward employee performance and stay competitive in the job market, Zenith Tech is considering a salary increase for all staff. To calculate the potential impact of a salary increase, Zenith Tech wants to analyze the effects of a 20% raise for all employees. By analyzing the "New_salary" column, Zenith Tech can assess the overall financial implications of a company-wide raise and make an informed decision about salary adjustments. This can help them retain valuable talent and attract top performers in the competitive tech industry.

Problem Description:

    Write a SQL query to create a new column named "New_salary" within their "employees" table. This column will reflect the adjusted salary after applying a 20% raise to the current salary ("salary").
    Steps to calculate the salary increment:

    Multiply the current salary by the percentage of the increment.
    Divide the result by 100.
    Then add the result to the current salary.
    Name the column as 'New_Salary'
    Round off the 'New_salary'. Use Round() for this.
    Result:

    Return the columns emp_id, name, salary, and 'New_salary'.
    Order the output by the emp_id in ascending order.

    Table: employees
    Schema
    Sample Input:
    Table: employees

    Sample Output:
    Explanation: The New salary for Luis can be calculated as 6142+(0.2*6142) = 7370. In a similar manner, the New_salary is calculated for each employee.

# Solution - 
    ALTER table employees
    add New_salary INT;
    update employees set New_salary = salary + Round(0.2 * salary);
    SELECT * from employees;

Ques-4 --> (Total Amount) -

    Problem Description:

    Write a query to calculate the sub_total for each order, return the details of the orderNumber, productCode, and sub_total.
    Note : Please ensure to read the sample out explanation.

    Table: orderdetails
    Schema
    Note:
    Round off the sub_total up to two decimal places.
    Order the output by the orderNumber in ascending order and then by sub_total in descending order.

    Sample Input:
    Table: orderdetails

    Sample Output:

    Sample Explanation:
    To get the sub_total for each orderNumber, we must multiply the quantityOrdered column with the PriceEach column.

# Solution - 
    alter table orderdetails
    add sub_total float;
    UPDATE orderdetails SET sub_total = quantityOrdered * priceEach;
    select orderNumber,productCode,sub_total from orderdetails
    order by orderNumber asc , sub_total desc;

Ques-5 --> (Employee 101) -

Context:

Unified Solutions Inc. is a technology consulting firm specialising in workforce management solutions, dedicated to providing tailored staffing solutions to optimise business operations. The company prides itself on deploying highly skilled professionals to meet the staffing needs of various industries. To maintain accurate records of employee career progression and ensure effective human resources management, Unified Solutions Inc. utilizes a comprehensive job history database.

You are a database administrator at Unified Solutions Inc. As part of your responsibility to manage employee records, you need to retrieve details from the job history for all employees except for the employee with ID 101. This data is crucial for tracking career trajectories, facilitating performance evaluations, and supporting strategic workforce planning initiatives.

Problem Statement:

    Write a query to get all the details of all the employees from job_history except for the employee with ID 101.
    Result:
    Return all the fields.
    Return the result ordered by employee_id and job_id in ascending order.
    Table: job_history
    Schema

    Sample Input:
    Table: job_history

    Sample output:

    Explanation: The above table shows all the employees who do not have an employee_id 101 and is ordered by employee_id and job_id in ascending order.

# Solution - 
    SELECT * from job_history
    where employee_id != 101
    order by employee_id asc, job_id asc;

Ques-6 --> (Not Boring Movies) -

    Table: Cinema
    Column Name	Type
    id	int
    movie	varchar
    description	varchar
    rating	int

    id is the primary key for this table.
    Each row contains information about the name of a movie, its genre, and its rating.
    rating is a 2 decimal places float in the range [0, 10]
    Write an SQL query to report the movies with an odd-numbered ID and a description that is not "boring".

    Return the result table ordered by rating in descending order.

    Note: Use the mod(column_name,number) function to find out an odd-numbered or even-numbered ID.
    Example:
    Table: Cinema

    id	movie	description	rating
    1	War	great 3D	8.9
    2	Science	fiction	8.5
    3	irish	boring	6.2
    4	Ice song	Fantacy	8.6
    5	House card	Interesting	9.1
    Output:

    id	movie	description	rating
    5	House Card	Interesting	9.1
    1	War	great 3D	8.9


# Solution - 
    SELECT * from Cinema
    where mod(id, 2) AND description not like "%boring%"
    order by rating desc;

Ques-7 --> (Big Countries) -

    A country is big if:
    it has an area greater than 300000 km2, AND
    it has a population greater than 20000000.
    Write an SQL query to report the name, population, and area of the big countries.
    Return the resultant table ordered by population in ascending order.
    Table: world

    Sample Input:
    Table: world
    input
    Sample Output:
    output
    Explanation: Both Maseru and Vitória have area greater than 300000 and population greater than 20000000.

# Solution - 
    
    SELECT name,population,area from world
    where area > 300000 and population > 20000000
    order by population asc;

Ques-8 --> (Invalid Tweets) -

    Write an SQL query to find the IDs of the invalid tweets. The tweet is invalid if the number of characters used in the content of the tweet is strictly greater than 15.
    Return the resultant table ordered by tweet_id in ascending order.
    Note: Use the length(column_name) function to find the length of the string.
    Table: tweets

    Sample Input:
    Table: tweets
    Sample Output:

    Explanation:
    tweets with id, 100, 102 and 105 has length greater than 15. They are invalid tweets.

# Solution - 

    select tweet_id from tweets 
    where LENGTH(content) > 15 
    ORDER BY tweet_id asc;

Ques-9 --> (Retrieve Customers with Specific Name) -

    Consider a database schema for customers with the following table:

    Customers: customer_id (Integer, Primary Key) ,first_name (Text), last_name (Text), email (Text)

    Write an SQL query to search for customers whose first name is "John" or last name is "Smith," and full name is not ‘John Smith’.

    Return the output ordered by customer_id in ascending order.

    Sample Input:

    Table: Customers

    input

    Sample Output:

    output

# Solution -

    SELECT * from Customers
    where (first_name = "John" or last_name = "Smith") 
    and concat(first_name, " ", last_name) != "John Smith"
    order by customer_id asc;

Ques-10 --> (Filter Products in Electronics Category) -

    Consider a database schema for products with the following table:

    Products: product_id (Integer, Primary Key),product_name (Text),category (Text),price (Integer)

    Write an SQL query to retrieve products that belong to the "Electronics" category and have a price greater than 500 or products that belong to the "Apparel" category and have a price less than 50.

    Return the output ordered by product_id in ascending order.

    Sample Input:

    Table: Products

    input

    Output:

# Solution - 

    SELECT * from Products
    where (category= "Electronics" and price > 500) or
    (category= "Apparel" and price < 50)
    order by  product_id asc;

Ques-11 --> (Movies released after 2014) -

    Context:

    Acme Studios, a major Hollywood production company, maintains a vast movie database. This database tracks detailed information about their films, including titles, directors, and ratings. Understanding audience preferences is crucial for informing creative decisions and attracting viewers.

    You are a data analyst at Acme Studios. Your manager has asked you to identify the titles of movies released after 2014 that have received an average vote rating greater than 7. This information can be valuable for Acme Studios to identify movies that resonate with audiences and potentially influence future content creation or marketing strategies.

    Problem Statement:

    Write a query to display the titles of the movies that are released (i.e., release_year) after 2014 and have an average vote rating (i.e.,vote_average) greater than 7.

    Result:

    Return the column 'original_title'.
    Return the result ordered by original_title in ascending order.
    Dataset description for movies table:

    1) id - tmdb movie id

    2) imdb_id - imdb movie id

    3) popularity -A numeric quantity specifying the movie's popularity.

    4) budget -The budget in which the movie was made.

    5) revenue - The worldwide revenue generated by the movie.

    6) original_title- The title of the movie

    7) cast - The name of the lead and supporting actors.

    8) homepage - A link to the homepage of the movie.

    9) director - The name of the director of the movie

    10) tagline - Movie's tagline.

    11) keywords -The keywords or tags related to the movie.

    12) overview -A brief description of the movie.

    13) runtime -The running time of the movie in minutes.

    14) genres -The genres of the movies

    15) production_companies-The production house of the movie.

    16) release_date -the date on which it was released.

    17) vote_count -the count of votes received.

    18) vote_average - average ratings the movie received.

    19) release_year - the year on which it was released.

    Sample Input:

    Table: movies
    Sample Output:

# Solution - 

    select original_title from movies 
    where  release_year > 2014
    and vote_average > 7
    order by original_title asc ;


Ques-12 --> (Selected Departments) -

    Problem Statement:
    Write a query to find the details of those employees who work in the departments with numbers included in 30, 40, or 90.
    Return the result ordered by employee_id in ascending order.
    Explanation: The above employees have department_id included in 30, 40, or 90.

# Solution - 

    // Approach - 1
    SELECT employee_id , first_name , job_id , department_id from employees
    where department_id = 30 || department_id = 40 || department_id = 90
    order by employee_id asc
    // Approach - 2
    SELECT employee_id , first_name , job_id , department_id from employees
    where department_id IN (30, 40, 90)
    order by employee_id asc

Ques-13 --> (Office Codes) -

    Problem Statement:

    Write a query to find the employees whose officeCodes are not included in 4,6,7.
    Return the result ordered by firstName and lastName in ascending order.
    Table: employees
    Schema
    Sample Input:
    Table: employees

    Sample output:
    Explanation: The above table shows the employees whose office codes are not 4,6 or 7.

# Solution - 

    SELECT firstName, lastName , jobTitle from employees
    where officeCode not in (4,6,7)
    order by firstName, lastName

Ques-14 --> (Horror genre) -

    Problem Statement:

    Display the details of the movies which belong to the 'Horror' genre.

    Return the columns 'original_title', and 'popularity'.
    Return the result ordered by the popularity in descending order.
    Dataset description for movies table:

    1) id - tmdb movie id

    2) imdb_id - imdb movie id

    3) popularity -A numeric quantity specifying the movie's popularity.

    4) budget -The budget in which the movie was made.

    5) revenue - The worldwide revenue generated by the movie.

    6) original_title- The title of the movie

    7) cast - The name of the lead and supporting actors.

    8) homepage - A link to the homepage of the movie.

    9) director - The name of the director of the movie

    10) tagline - Movie's tagline.

    11) keywords -The keywords or tags related to the movie.

    12) overview -A brief description of the movie.

    13) runtime -The running time of the movie in minutes.

    14) genres -The genres of the movies

    15) production_companies-The production house of the movie.

    16) release_date -the date on which it was released.

    17) vote_count -the count of votes received.

    18) vote_average - average ratings the movie received.

    19) release_year - the year on which it was released.

    Sample Input:

    Table: movies
    Sample Output:

# Solution - 

    select original_title , popularity from movies
    where genres = "Horror" 
    order by popularity desc

Ques-15 --> (Recyclable and Low Fat Products) -

    Table: Products
    Column Name	Type
    product_id	int
    low_fats	enum
    recyclable	enum

    product_id is the primary key for this table.
    low_fats is an ENUM of type ('Y', 'N') where 'Y' means this product is low fat and 'N' means it is not.
    recyclable is an ENUM of types ('Y', 'N') where 'Y' means this product is recyclable and 'N' means it is not.



    Write an SQL query to find the ids of products that are both low fat and recyclable.
    Return the result table sorted by product_id in ascending order
    The query result format is in the following example.

    Example :


    Table: Products


    product_id	low_fats	recyclable
    0	Y	N
    1	Y	Y
    2	N	Y
    3	Y	Y
    4	N	N

    Output:


    product_id
    1
    3

# Solution - 

    SELECT product_id from Products
    where low_fats= "Y" AND recyclable = "Y"
    order by product_id

Ques-16 --> (Low-Quality Problems) -

    Table: Problems

    Column Name	Type
    problem_id	int
    likes	int
    dislikes	int

    problem_id is the primary key column for this table.
    Each row of this table indicates the number of likes and dislikes for a LeetCode problem.

    Write an SQL query to report the IDs of the low-quality problems. A LeetCode problem is low-quality if the like percentage of the problem (number of likes divided by the total number of votes) is strictly less than 60%.

    Return the result table ordered by problem_id in ascending order.

    The query result format is in the following example.

    Example :


    Problems table:

    problem_id	likes	dislikes
    6	1290	425
    11	2677	8659
    1	4446	2760
    7	8569	6086
    13	2050	4164
    10	9002	7446

    Output:

    problem_id
    7
    10
    11
    13

# Solution - 

    SELECT problem_id from Problems
    where (likes/(likes + dislikes)*100) < 60
    order by problem_id;

Ques-17 --> (Filter Movies) -

    Consider a database schema for movies with the following table:

    Movies: movie_id (Integer, Primary Key), movie_title (Text), genre (Text), release_year (Integer)

    Write an SQL query to retrieve the titles of movies released in 2000 or later that belong to the genres "Sci-Fi" or "Action."

    Return the result ordered by movie_id in ascending order.

    Sample Input:

    Table: Movies

    Input

    Sample Output:

# Solution - 

    SELECT movie_title from Movies
    where release_year >= 2000 and genre IN ("Sci-Fi", "Action")
    order by movie_id;

Ques-18 --> (Filter Customers) -

    Consider a database schema for customers with the following table:

    Customers: customer_id (Integer, Primary Key), customer_name (Text), last_purchase_date (Date)

    Write an SQL query to find the names of customers who have not made a purchase since January 1, 2023.

    Return the results ordered by customer_id in ascending order.

    Sample Input:

    Table: Customers

    Input

    Sample Output:

# Solution - 

    select customer_name from Customers
    where last_purchase_date < "2023-01-01" 
    order by customer_id;

Ques-19 --> (Filter Orders) -

    Consider a database schema for orders with the following table:

    Orders: order_id (Integer, Primary Key), customer_id (Integer), order_status (Text)

    Write an SQL query to retrieve the order IDs of orders placed by customer 1 that are either "Shipped" or "Delivered."

    Return the output ordered by order_id in ascending order.

    Sample Input:

    Table: Orders

    input

    Sample Output:

# Solution - 

    SELECT order_id from Orders
    where customer_id = 1 and order_status IN ("Shipped", "Delivered")
    order by order_id;

Ques-20 --> (Filter Movies not in Specific Genre) -

    Consider a database schema for movies with the following table:

    Movies: movie_id (Integer, Primary Key), movie_title (Text), genre (Text)

    Write an SQL query to retrieve the titles of movies that are not in the genres "Romance" or "Drama."

    Return the output ordered by movie_id in ascending order.

    Sample Input:

    Table: Movies
    input

    Sample Output:

# Solution - 

    SELECT movie_title from Movies
    where genre NOT IN ("Romance", "Drama")
    order by movie_id;