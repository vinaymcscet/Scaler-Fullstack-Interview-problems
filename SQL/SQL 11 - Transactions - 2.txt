Ques-1 --> (Isolation Levels 1) - 

    What is the primary purpose of isolation levels in a DBMS?

# Solution - To control the level of visibility of changes made by one transaction to other concurrent transactions

Ques-2 --> (Isolation Levels 2) -

    Which one of the following is NOT a part of the ACID properties of database transactions?

# Solution -  Repeatable Read

Ques-3 --> (Isolation Levels 3) -

    Which of the following correctly represents the standard hierarchy of isolation levels, from lowest to highest in terms of data visibility control?

# Solution - Read Uncommitted, Read Committed, Repeatable Read, Serializable

Ques-4 --> (Isolation Levels 4) -

    In the "Repeatable Read" isolation level, which of the following phenomena is prevented?

# Solution - Dirty reads, Non-repeatable reads

Ques-5 --> (Isolation Levels 5) -

    In which scenario is a higher isolation level, such as "Serializable," more likely to be required?

# Solution - A financial system processing stock market trades.

Ques-6 --> (Isolation Levels 6) -

    Isolation Level: Repeatable Read

    Transaction 1:

    BEGIN TRANSACTION;

    SELECT COUNT(*) FROM Products WHERE Category = 'Electronics';

    COMMIT;

    Transaction 2:

    BEGIN TRANSACTION;

    INSERT INTO Products (ProductID, ProductName, Category) VALUES (106, 'Smartphone', 'Electronics');

    COMMIT;

    In this scenario, what does the "Repeatable Read" isolation level guarantee regarding the visibility of changes made by Transaction 2 to Transaction 1?

# Solution - Transaction 1 will always see the initial result of COUNT().

Ques-7 --> (Isolation Levels 7) -

    Isolation Level: Repeatable Read

    Transaction 1:

    BEGIN TRANSACTION;

    SELECT COUNT(*) FROM Products WHERE Category = 'Electronics';

    COMMIT;


    Transaction 2:

    BEGIN TRANSACTION;

    INSERT INTO Products (ProductID, ProductName, Category) VALUES (106, 'Smartphone', 'Electronics');

    COMMIT;

    What problem is depicted in the above scenario?

# Solution - Phantom read problem

Ques-8 --> (Isolation Levels 8) -

    Isolation Level: Serializable

    Transaction 1:

    BEGIN TRANSACTION;

    UPDATE Employees SET Salary = Salary + 1000 WHERE EmployeeID = 102;

    COMMIT;


    Transaction 2:

    BEGIN TRANSACTION;

    UPDATE Employees SET Salary = Salary + 500 WHERE EmployeeID = 102;

    COMMIT;

    In this scenario, Transaction 1 and Transaction 2 are both attempting to update the same employee's Salary. Assuming the "Serializable" isolation level, what is likely to happen?

# Solution - A lock conflict will occur, and one of the transactions will be blocked until the other completes

Ques-9 --> (Isolation Levels 9) -

    What is a deadlock in the context of a DBMS?

# Solution - A condition where two or more transactions are waiting for each other to release resources, preventing progress.

Ques-10 --> (Isolation Levels 10) -

    In a multi-user database system where data consistency is crucial, and concurrent transactions should not see each other's changes until they commit, which isolation level is most appropriate?

# Solution - Serializable

Ques-11 --> (Isolation Levels 11) - 

    In a system where high concurrency and performance are essential, and you want to minimize locking and contention while requiring the possibility of repeatable reads, which isolation level is a good choice?

# Solution - Repeatable Read

Ques-12 --> (Isolation Levels 12) -

    What is a "dirty read" in the context of a DBMS?

# Solution - Reading data that has been updated by another uncommitted transaction.

Ques-13 --> (Isolation Levels 13) -

    What is a common use case for shared locks in a DBMS?

# Solution - Allowing multiple transactions to read data simultaneously while preventing write operations.

Ques-14 --> (Isolation Levels 14) -

    Which of the following statements accurately describes an exclusive lock in a DBMS?

# Solution - It blocks all other transactions from accessing the locked data.

Ques-15 --> (Isolation Levels 15) -

    In a DBMS, if one transaction holds an exclusive lock on a data item, and another transaction requests an exclusive lock on the same item, what is the likely outcome?

# Solution - The second transaction is blocked until the first transaction releases the lock.